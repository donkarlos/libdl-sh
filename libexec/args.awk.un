#! /usr/bin/awk -f ##
#! /usr/bin/env shebang
#! nawk -f
#-----------------------------------------------------------------------------
#   args.awk			- Command-line option parser
#
#   Copyright Â© 2018-2020 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2018-03-03
##  CHANGED BY:	ks	2020-05-14	Update copyright notice.
##					Move initialization to front.
##					Trace argument types symbolically.
##					Print error messages with error().
##					Also trace to stderr.
##			2020-05-15	Use system("echo '...' >&2").
##					Recognize POSIX compliancy mode.
##					Recognize scan mode prefices.
##			2020-05-16	Emit error messages with error().
##					Imply unquoted output in compatibility
##					mode.
##					Implement options `-h|--help',
##					`-V|--version', and `-T|--test'.
##					Eliminate ++ARGI and ARGI--.
##					Defer entry into 2nd pass.
##					Overhaul 2nd pass and main program.
##			2020-05-17	Count OPTSTRING occurences within
##					getopt_add_optstring().
##			2020-05-18	Use RE variables.
##					Make compatible, posixly, and ordered
##					genuine booleans.
##					Merge getopt_shift() into args_get-
##					opt().
##					Count LONGOPTS occurences within
##					getopt_add_longopts().
##					Count errors.
##			2020-05-19	Have end-of-options marker take pre-
##					cedence over options.
##			2020-05-21	Add and implement option `-U|--unquot-
##					ed-options.
##			2020-05-23	Ultimately distinguish between short
##					and alternative long options by merg-
##					ing option processing ([ks] It took me
##					nearly a week to properly figure this
##					out, discovering some "interesting"
##					bugs in util-linux's getopt(1) `-a'
##					implementation along the way... :-)
##			2020-05-26	Implement csh(1)-style quoting.
##					Show usage information.
##			2020-05-27	Use universal interpreter.
##
##  Global constants and variables:
##	- DEBUG		Debugging flag (set with '-vDEBUG=1')
##	- FALSE/TRUE	Boolean constants
##	- bv2sy[BV]	Boolean value -> symbol map
##	- compatible	Compatibility mode flag
##	- posixly	POSIX compliancy flag
##	- ordered	Ordered output flag
##	- AT_{ERR,EOA,EOO,ARG,ONA,OOA,ORA}
##			Argument/option type indices returned by
##			getopt_shift() denoting
##			  * ERRor,
##			  * End Of Arguments,
##			  * End Of Options ("--"),
##			  * ordinary ARGument,
##			  * Option with No/Optional/Required Argument
##			(The latter three being the option type subset)
##	- at2sy[AT]	Argument type -> symbol map
##	- dl2at[DL]	Short option descriptor's length -> option type map
##	- at2ds[AT]	Option type -> descriptor suffix map
##	- pi2oc[PI]	Per-pass option index -> name map's size
##	- pion2oi[PI,ON] Per-pass option name -> index map
##			 (also used for long options' abbreviations)
##	- pioi2on[PI,OI] Per-pass option index -> name map
##	- pioi2at[PI,OI] Per-pass option index -> type map
##			 (uses subset AT_{ONA,OOA,ORA})
##	- piow2ov[PI,"a"]
##			Per-pass alternative long options flag
##	- piow2ov[PI,"l"]
##			Per-pass LONGOPTS count
##	- piow2ov[PI,"n"]
##			Per-pass command name
##	- piow2ov[PI,"o"]
##			Per-pass OPTSTRING count
##	- piow2ov[PI,"q"]
##			Per-pass quiet flag (i.e., suppress error messages)
##	- piow2ov[PI,"Q"]
##			Per-pass suppress output flag
##	- piow2ov[PI,"u"]
##			Per-pass unquoted output flag
##	- piow2ov[PI,"U"]
##			Per-pass unquoted options flag
##	- piow2ov[PI,"s"]
##			Per-pass shell
##	- nesting	Nesting depth
##----------------------------------------------------------------------------
##  Initialization:
#-----------------------------------------------------------------------------
BEGIN {
    bv2sy[FALSE	= 0	]	= "FALSE"
    bv2sy[TRUE	= !FALSE]	= "TRUE"
					## Define booleans.
    at				= -4	## Enumerate argument types...
    at2sy[AT_ERR = ++at]	= "AT_ERR"
    at2sy[AT_EOA = ++at]	= "AT_EOA"
    at2sy[AT_EOO = ++at]	= "AT_EOO"
    at2sy[AT_ARG = ++at]	= "AT_ARG"
    at2sy[AT_ONA = ++at]	= "AT_ONA"
    at2sy[AT_OOA = ++at]	= "AT_OOA"
    at2sy[AT_ORA = ++at]	= "AT_ORA"

    at2ds[dl2at[++dl] = AT_ONA]	= ""	## Preset option type -> descriptor
    at2ds[dl2at[++dl] = AT_ORA]	= ":"	## suffix and short option descrip-
    at2ds[dl2at[++dl] = AT_OOA]	= "::"	## tor's length -> option type maps
}					## in one go!

##----------------------------------------------------------------------------
##  enter(FN,FP)		Trace entry into function FN with sprintf()-
##				formatted parameter list FP to stderr and
##				increase nesting depth
##  Global variables:
##	- nesting	(W) Nesting depth
##  Local variables:
##	- fmt		(W) Format string
##	- msg		(W) Quoted message
##----------------------------------------------------------------------------
function enter(fn,fp ,fmt,msg) {
    if (DEBUG) {
	fmt = sprintf("#%%%us%%s(%%s)",nesting++)
					## Construct format string.
	msg = sprintf(fmt,"",fn,fp); gsub(/'/,"&\\\\&&",msg)
					## Construct quoted message and
	system("echo '" msg "' >&2")	## emit it to stderr.
    }
}

##----------------------------------------------------------------------------
##  trace(EX)			Trace sprintf()-formatted EXpression to stderr
##
##  Global variables:
##	- nesting	(R) Nesting depth
##  Local variables:
##	- fmt		(W) Format string
##	- msg		(W) Quoted message
##----------------------------------------------------------------------------
function trace(ex ,fmt,msg) {
    if (DEBUG) {
	fmt = sprintf("#%%%us%%s",nesting)
					## Construct format string.
	msg = sprintf(fmt,"",ex); gsub(/'/,"&\\\\&&",msg)
					## Construct quoted message and
	system("echo '" msg "' >&2")	## emit it to stderr.
    }
}

##----------------------------------------------------------------------------
##  leave(RV)			Trace leave from function with sprintf()-
##				formatted return value RV to stderr and
##				decrease nesting depth
##  Global variables:
##	- nesting	(W) Nesting depth
##  Local variables:
##	- fmt		(W) Format string
##	- msg		(W) Quoted message
##----------------------------------------------------------------------------
function leave(rv ,fmt,msg) {
    if (DEBUG) {
	fmt = rv ? sprintf("#%%%usreturn(%%s)",--nesting)		\
		 : sprintf("#%%%usreturn%%s",  --nesting)
					## Construct format string.
	msg = sprintf(fmt,"",rv); gsub(/'/,"&\\\\&&",msg)
					## Construct quoted message and
	system("echo '" msg "' >&2")	## emit it to stderr.
    }
}

##----------------------------------------------------------------------------
##  error(MSG,PI)		Emit sprintf()-formatted error message MSG
##				on stderr unless PI-th pass is quiet
##  Global variables:
##	- piow2ov[PI,"n"]
##			(R) Per-pass command name
##	- piow2ov[PI,"q"]
##			(R) Per-pass quiet flag
##----------------------------------------------------------------------------
function error(msg,pi) {
    if (!piow2ov[pi,"q"]) {		## PI-th pass is quiet?
	sub(/^/,piow2ov[pi,"n"] ": ",msg); gsub(/'/,"&\\\\&&",msg)
					## No, construct quoted message and
	system("echo '" msg "' >&2")	## emit it to stderr.
    }
}

##----------------------------------------------------------------------------
##  quote_sh(STRING,PI,AT)	Conditionally piow2ov[PI,"s"]-quote STRING
##
##  Global variables:
##	- piow2ov[PI,"u"]
##			(R) Per-pass unquoted output flag
##	- piow2ov[PI,"U"]
##			(R) Per-pass unquoted options flag
##	- piow2ov[PI,"s"]
##			(R) Per-pass shell
##----------------------------------------------------------------------------
function quote_sh(string,pi,at ,re) {
    enter("quote_sh",sprintf("string=\"%s\",pi=%u",string,pi))
    if (!piow2ov[pi,"u"] && (!piow2ov[pi,"U"] || (at < AT_ONA))) {
					## Must quote STRING?
	re = (piow2ov[pi,"s"] ~ /csh$/) ? "[!']" : "'"
	gsub(re,"'\\\\&'",string); string = "'" string "'"
    }					## Yes, do so.
    leave("\"" string "\""); return string
}

##----------------------------------------------------------------------------
##  set_property(PI,OW,OV)	Set string property piow2ov[PI,OW] to OV
##
##  Global variables:
##	- piow2ov[PI,OW](W) String property piow2ov[PI,OW]
##----------------------------------------------------------------------------
function set_property(pi,ow,ov) {
    piow2ov[pi,ow] = ov
    trace(sprintf("piow2ov[pi=%u,ow=\"%s\"]=\"%s\"",pi,ow,ov))
}

##----------------------------------------------------------------------------
##  inc_property(PI,OW)		Increment numeric property piow2ov[PI,OW]
##
##  Global variables:
##	- piow2ov[PI,OW](W) Numeric property piow2ov[PI,OW]
##----------------------------------------------------------------------------
function inc_property(pi,ow) {
    trace(sprintf("++piow2ov[pi=%u,ow=\"%s\"]=%u",pi,ow,++piow2ov[pi,ow]))
}

##----------------------------------------------------------------------------
##  become_compatible(PI)	Force compatibility mode for PI-th pass
##
##  Global variables:
##	- compatible	(W) Compatibility mode flag
##	- bv2sy[BV]	(R) Boolean value -> symbol map
##	- piow2ov[PI,"u"]
##			(R) Per-pass unquoted output flag
##----------------------------------------------------------------------------
function become_compatible(pi) {
    compatible = TRUE; trace(sprintf("compatible=%s",bv2sy[compatible]))
    inc_property(pi,"u")		## Force compatibility mode, implying
}					## unquoted output for PI-th pass.

##----------------------------------------------------------------------------
##  getopt_add_optstring(OPTSTRING,PI)
##				Add short options described by OPTSTRING to
##				PI-th pass
##  Global variables:
##	- compatible	(R) Compatibility mode flag
##	- posixly	(W) POSIX compliancy flag
##	- ordered	(W) Ordered output flag
##	- bv2sy[BV]	(R) Boolean value -> symbol map
##	- RSTART	(W) match() start position
##	- RLENGTH	(W) match() length
##	- at2sy[AT]	(R) Argument type -> symbol map
##	- dl2at[DL]	(R) Short option descriptor's length -> type map
##	- at2ds[AT]	(R) Option type -> descriptor suffix map
##	- pi2oc[PI]	(W) Per-pass option index -> name map's size
##	- pion2oi[PI,ON](W) Per-pass option name -> index map
##	- pioi2on[PI,OI](W) Per-pass option index -> name map
##	- pioi2at[PI,OI](W) Per-pass option index -> type map
##	- piow2ov[PI,"o"]
##			(W) Per-pass OPTSTRING count
##  Local variables:
##	- re		(R) Mode-specific short option descriptor RE
##	- ow		(W) Option word
##	- on		(W) Option name
##	- at		(W) Option type
##	- oi		(W) Option index
##----------------------------------------------------------------------------
function getopt_add_optstring(optstring,pi ,re,ow,on,at,oi) {
    enter("getopt_add_optstring",sprintf("optstring=\"%s\",pi=%u",	\
	optstring,pi))
    if (optstring ~ /^\+/) {		## OPSTRING has leading '+'?
	if (!(piow2ov[pi,"o"] || compatible)) {
	    posixly = TRUE		## Yes, force POSIX compliancy (unless
					## a prior OPTSTRING had been seen
	}				## or in compatibility mode)
	sub(/^./,"",optstring)		## and consume leading '+'.
    } else if (optstring ~ /^-/) {	## OPSTRING has leading '-'?
	if (!(piow2ov[pi,"o"] || compatible)) {
	    ordered = TRUE		## Yes, force ordered output (unless
	    posixly = FALSE		## a prior OPTSTRING had been seen
	}				## or in compatibility mode)
	sub(/^./,"",optstring)		## and consume leading '-'.
    }
    trace(sprintf("posixly=%s;ordered=%s;optstring=\"%s\"",		\
	bv2sy[posixly],bv2sy[ordered],optstring))

    re = compatible ? "^.:?:?" : "^[^-:]:?:?"
					## Choose short option descriptor RE.
    while (optstring) {			## While OPTSTRING is not empty do...
	if (!match(optstring,re)) {	## Looking at valid descriptor?
	    error(sprintf("'%s' describes no short option!",optstring),pi)
	    leave("1"); return 1	## No, complain and indicate failure!
	}
	ow = substr(optstring,1,1); on = "-" ow; at = dl2at[RLENGTH]
	trace(sprintf("ow=\"%s\";on=\"%s\";at=%s",ow,on,at2sy[at]))
					## Derive option word, name, and
					## type from descriptor.
	if (!(oi = pion2oi[pi,on])) {	## Short option unregistered so far?
	    pioi2on[pi,oi = pion2oi[pi,on] = ++pi2oc[pi]] = on
	    pioi2at[pi,oi] = at		## Yes, register short option.
	    trace(sprintf("pioi2on[pi=%u,oi=pion2oi[pi,on]=++pi2oc[pi]"	\
		"=%u]=on;pioi2at[pi,oi]=at",pi,oi))
	} else if (at != pioi2at[pi,oi]) {
					## No, and registered differently?
	    error(sprintf("'%s' already registered by '%s%s'!",on,ow,	\
		at2ds[pioi2at[pi,oi]]),pi)
	    leave("1"); return 1	## Yes, complain and indicate failure!
	}
	optstring = substr(optstring,1+RLENGTH)
	trace(sprintf("optstring=\"%s\"",optstring))
    }					## Consume descriptor.
    inc_property(pi,"o")		## Count OPTSTRING occurence and
    leave("0"); return 0		## indicate success.
}

##----------------------------------------------------------------------------
##  getopt_add_longopts(LONGOPTS,PI)
##				Add long options described by LONGOPTS's to
##				PI-th pass
##  Global variables:
##	- RSTART	(W) match() start position
##	- RLENGTH	(W) match() length
##	- at2sy[AT]	(R) Argument type -> symbol map
##	- dl2at[DL]	(R) Short option descriptor's length -> type map
##	- at2ds[AT]	(R) Option type -> descriptor suffix map
##	- pi2oc[PI]	(W) Per-pass option index -> name map's size
##	- pion2oi[PI,ON](W) Per-pass option name -> index map
##	- pioi2on[PI,OI](W) Per-pass option index -> name map
##	- pioi2at[PI,OI](W) Per-pass option index -> type map
##	- piow2ov[PI,"l"]
##			(W) Per-pass LONGOPTS count
##  Local variables:
##	- di		(W) Descriptor index
##	- dc		(R) Descriptor count
##	- dv[DI]	(R) Descriptor vector
##	- cp		(W) ':' position/abbreviation length
##	- ow		(W) Option word
##	- on		(W) Option name
##	- at		(W) Option type
##	- oi		(W) Option index
##----------------------------------------------------------------------------
function getopt_add_longopts(longopts,pi ,di,dc,dv,cp,ow,on,at,oi) {
    enter("getopt_add_longopts",sprintf("longopts=\"%s\",pi=%u",longopts,pi))
    di = 0; dc = split(longopts,dv,/,/); if (!dc) {
					## Split LONGOPTS into descriptor(s)?
	error("no long option descriptor(s) passed!",pi)
	leave("1"); return 1		## No, complain and indicate failure!
    }
    while (++di <= dc) {		## Foreach descriptor do...
	if (!match(dv[di],/^[^-=:]+(-[^-=:]+)*:?:?$/)) {
					## Description is valid?
	    error(sprintf("'%s' describes no long option!",dv[di]),pi)
	    leave("1"); return 1	## No, complain and indicate failure!
	}
	if (!(cp = index(dv[di],":"))) cp = RLENGTH + 1
	ow = substr(dv[di],1,cp-1); on = "--" ow; at = dl2at[2+RLENGTH-cp]
	trace(sprintf("ow=\"%s\";on=\"%s\";at=%s",ow,on,at2sy[at]))
					## Derive colon position as well as
					## option word, name, and type from
					## descriptor.
	if (!(oi = pion2oi[pi,on]) || (on < pioi2on[pi,oi])) {
					## Long option so far unregistered or
					## registered as abbreviation?
	    pioi2on[pi,oi = pion2oi[pi,on] = ++pi2oc[pi]] = on
	    pioi2at[pi,oi] = at		## Yes, register long option.
	    trace(sprintf("pioi2on[pi=%u,oi=pion2oi[pi,on]=++pi2oc[pi]"	\
		"=%u]=on;pioi2at[pi,oi]=at",pi,oi))
	} else if (at != pioi2at[pi,oi]) {
					## No, and registered differently?
	    error(sprintf("'%s' already registered by '%s%s'!",on,ow,	\
		at2ds[pioi2at[pi,oi]]),pi)
	    leave("1"); return 1	## Yes, complain and indicate failure!
	}

	while (cp > 2) {		## Foreach abbreviation do...
	    if (!pion2oi[pi,on = substr(on,1,cp--)]) {
					## Abbreviation already registered?
		pion2oi[pi,on] = oi	## No, register abbreviation.
		trace(sprintf("pion2oi[pi=%u,on=\"%s\"]=%u",pi,on,oi))
	    } else if ((oi = pion2oi[pi,on]) < 0) {
					## Abbreviation already ambiguous?
		break			## Yes, so its prefices are, too!
	    } else if (pioi2on[pi,oi] != on) {
					## Abbreviation is ambiguous?
		pion2oi[pi,on] = -1	## Yes, indicate so.
		trace(sprintf("pion2oi[pi=%u,on=\"%s\"]=-1",pi,on))
	    }
	}
    }
    inc_property(pi,"l")		## Count LONGOPTS occurence and
    leave("0"); return 0		## indicate success.
}

##----------------------------------------------------------------------------
##  unshift(ARG)		Unfetch ARGument
##
##  Global variables:
##	- ARGI		(W) Argument index
##	- ARGV[ARGI]	(W) Argument vector
##----------------------------------------------------------------------------
function unshift(arg) {
    ARGV[--ARGI] = arg; trace(sprintf("ARGV[--ARGI=%u]=\"%s\"",ARGI,arg))
}

##----------------------------------------------------------------------------
##  args_print()		Print command line parameters
##
##  Global variables:
##	- ARGC		(R) Argument count
##	- ARGI		(W) Argument index
##	- ARGV[ARGI]	(R) Argument vector
##----------------------------------------------------------------------------
function args_print() {
    for (ARGI = 0; ARGI < ARGC; ++ARGI)	## Foreach argument do...
	printf "ARGV[%u]=\"%s\"\n",ARGI,ARGV[ARGI]
					## Print it.
    printf "ARGC=%u\n",ARGC; return 0	## Print argument count.
}

##----------------------------------------------------------------------------
##  args_getopt(CN)		Emulate getopt(1)
##
##  Global variables:
##	- ARGI		(W) Argument index
##	- ARGC		(R) Argument count
##	- ARGV[ARGI]	(W) Argument vector
##	- RSTART	(W) match() start position
##	- RLENGTH	(W) match() length
##	- compatible	(W) Compatibility mode flag
##	- posixly	(W) POSIX compliancy flag
##	- ordered	(R) Ordered output flag
##	- bv2sy[BV]	(R) Boolean value -> symbol map
##	- at2sy[AT]	(R) Argument type -> symbol map
##	- pion2oi[PI,ON](R) Per-pass option name -> index map
##	- pioi2on[PI,OI](R) Per-pass option index -> name map
##	- pioi2at[PI,OI](R) Per-pass option index -> type map
##  Local variables:
##	- pi		(W) Pass index (1st pass processes getopt(1) options,
##					2nd pass processes invoker's options
##					and emits result)
##	- ec		(W) Error count
##	- arg		(W) Fetched argument
##	- at		(W) Argument type
##	- on		(W) Option name
##	- ov		(W) Option value
##	- oi		(W) Option index
##	- at		(W) Fetched argument's type
##	- ep		(W) '=' position
##	- O		(W) Result's  left-hand side (LHS)
##	- A		(W) Result's right-hand side (RHS)
##	- son		(W) Short option name
##	- lon		(W) Long option name
##----------------------------------------------------------------------------
function args_getopt(cn ,pi,ec,arg,on,ov,oi,at,ep,O,A,son,lon) {
    enter("args_getopt",sprintf("cn=\"%s\"",cn))
    posixly = ordered = compatible = FALSE
    pi = 1; ec = 0			## Enter 1st pass.
    set_property(pi,"n",cn); set_property(pi+1,"n",cn)
					## Preset pass' command name.
    if ("POSIXLY_CORRECT" in ENVIRON) {	## POSIXLY_CORRECT present in env.?
	posixly = TRUE; trace(sprintf("posixly=%s",bv2sy[posixly]))
    }					## Yes, force POSIX compliancy.

    if ("GETOPT_COMPATIBLE" in ENVIRON) {
					## GETOPT_COMPATIBLE present in env.?
	become_compatible(pi+1)		## Yes, force compatibility mode.
    } else if (   getopt_add_optstring("ahl:n:o:qQs:uUTV",pi)		\
	       || getopt_add_longopts("alternative,help,longoptions:,"	\
		    "name:,options:,quiet,quiet-output,shell:,unquoted,"\
		    "unquoted-options,test,version",pi)) {
					## Added own options for 1st pass?
	leave("3"); return 3		## No, indicate internal error!
    }

    for (;;) {				## While processing arguments do...
	if (ARGI < ARGC) {		## Arguments remain?
	    if ((pi == 1) && compatible) {
					## In 1st pass and compatibility mode?
		trace(sprintf("++pi=%u;continue",++pi))
		continue		## Yes, immediately enter 2nd pass.
	    } else if ((pi == 2) && !piow2ov[pi,"o"]) {
					## In 2nd pass and no OPTSTRING seen?
		if (!compatible && (ARGI == 2)) {
					## Yes. Not in compatibility mode and
					## looking at 1st argument?
		    become_compatible(pi)
		}			## Yes, force compatibility mode.
		if (!getopt_add_optstring(ARGV[ARGI++],pi)) continue
					## 2nd pass's OPTSTRING added?
		leave("3"); return 3	## No, indicate internal error!
	    }
	    arg = ARGV[ARGI++]; trace(sprintf("ec=%u;arg=\"%s\"",ec,arg))
					## Fetch next argument.
	    if (arg == "--") {		## Looking at end-of-option marker?
		trace(sprintf("at=%s",at2sy[at = AT_EOO]))
					## Yes, set respective argument type.
	    } else if (arg !~ /^-./) {	## Looking at ordinary argument?
		trace(sprintf("at=%s",at2sy[at = AT_ARG]))
					## Yes, set respective argument type.
	    } else {			## Looking at option!
		if (piow2ov[pi,"l"] && match(arg,/^--[^=]+/)) {
					## Is it a long option?
		    on = substr(arg,RSTART,RLENGTH); ep = RSTART + RLENGTH
		    oi = pion2oi[pi,on]	## Yes, extract name, compute assumed
					## '=' position, and fetch index.
		} else if (   piow2ov[pi,"l"] && piow2ov[pi,"a"]	\
			   && match(arg,/^-[^-][^=]*/)) {
					## Is it maybe an alt. long option?
		    on = substr(arg,RSTART,RLENGTH); ep = RSTART + RLENGTH
		    son = substr(arg,RSTART,2); lon = "-" on
					## Yes, extract name, compute assumed
					## '=' position, and extract short/
					## construct long option name.
		    if (   (pion2oi[pi,son] && !pion2oi[pi,lon])	\
			|| (   pion2oi[pi,on] && pion2oi[pi,lon]	\
			    && (substr(arg,ep,1) != "="))) {
					## Must be parsed as short option?
			oi = pion2oi[pi,on = son]; RLENGTH = 2; ep = 0
					## Yes, fetch short option's index,
					## reduce length, and invalidate
		    } else {		## assumed '=' position.
			oi = pion2oi[pi,on = lon]
					## No, fetch corresponding long op-
		    }			## tion's index.
		} else if (match(arg,/^-./)) {
					## Is it a short option?
		    on = substr(arg,RSTART,RLENGTH); ep = 0
		    oi = pion2oi[pi,on]	## Yes, extract option's name, invali-
					## date '=' position, and fetch index.
		} else {		## This isn't supposed to happen!
		    ++ec; error("OOPS! How did we get here?")
		    leave("3"); return 3 ## Indicate internal error!
		}
		trace(sprintf("on=\"%s\";oi=%d;ep=%u",on,oi,ep))

		if (oi < 0) {		## Option name is ambiguous?
		    ++ec; error(sprintf("ambiguous option '%s'!",on),pi)
		    continue		## Yes, complain and skip it!
		} else if (!oi) {	## Option name unknown in PI-th pass?
		    ++ec; error(sprintf("unknown option '%s'!",arg),pi)
					## Yes, complain and skip it if it's
		    if (ep) continue	## a long option.
		    at = AT_ONA
		} else {		## Option is known!
		    at = pioi2at[pi,oi]; on = pioi2on[pi,oi]
		}			## Fetch type and full name.
		trace(sprintf("at=%s;on=\"%s\"",at2sy[at],on))

		if (!ep) {		## Short option?
		    ov = substr(arg,RSTART+RLENGTH)
					## Yes, extract affixed value.
		} else if (!substr(arg,ep)) {
					## Long option without affixed value?
		    ov = ""		## Yes, assume empty value.
		} else if (substr(arg,ep,1) == "=") {
					## Long option with affixed value?
		    if (at == AT_ONA) {	## Yes, but it mustn't have one?
			++ec; error(sprintf("option '%s' mustn't have "	\
			    "value!",on),pi)
			continue	## Yes, complain and skip it!
		    }
		    ov = substr(arg,ep+1)
					## No, extract affixed value.
		} else {		## This isn't supposed to happen!
		    ++ec; error(sprintf("invalid option '%s'!",arg),pi)
		    leave("3"); return 3 ## Indicate internal error!
		}
		trace(sprintf("ov=\"%s\"",ov))

		if (ov || (ep && (substr(arg,ep,1) == "="))) {
					## Value affixed to option?
		    if (at >= AT_OOA) {	## Yes, and option wants value?
			at = AT_ORA	## Yes, supply it.
		    } else if (!ep) {	## No, value affixed to short option?
			unshift("-" ov); if (!oi) continue
					## Yes, push it back as options and
		    }			## skip option unless it is known.
		} else {		## No value affixed to option!
		    if (at <= AT_OOA) {	## But option wants value?
			if (!oi) continue
			at = AT_ONA	## No, don't supply it.
		    } else if (ARGI < ARGC) {
					## Yes, and arguments remain?
			ov = ARGV[ARGI++]; trace(sprintf("ov=\"%s\"",ov))
					## Yes, fetch value.
		    } else {
			++ec; error(sprintf("option '%s' requires value!",on),pi)
			trace(sprintf("at=%s",at2sy[at = AT_ERR]))
					## No, count error, complain, and
		    }			## indicate failure!
		}
		trace(sprintf("at=%s",at2sy[at]))
	    }
	} else {			## No arguments remain!
	    if ((pi == 2) && !piow2ov[pi,"o"] && !compatible) {
					## Saw OPTSTRING for 2nd pass and
					## in compatibility mode?
		error("missing OPTSTRING!",pi); leave("2"); return 2
	    }				## No, indicate misuse!
	    trace(sprintf("at=%s",at2sy[at = AT_EOA]))
	}				## Yes, indicate exhaustion!

	if (at < AT_EOA) {		## An error was encountered?
	    trace("break"); break	## Yes, abort pass!
	} else if (pi == 1) {		## No, in 1st pass?
	    if (at < AT_ARG) {		## 1st pass's options consumed?
		trace(sprintf("++pi=%u;continue",++pi))
		continue		## Yes, enter 2nd pass.
	    } else if (at == AT_ARG) {	## No, saw ordinary argument?
		trace(sprintf("--ARGI=%u;++pi=%u;continue",--ARGI,++pi))
		continue		## Yes, back argument index up and
					## enter 2nd pass.
	    } else if (on ~ /^(-h|--help)$/) {
					## No, saw option '-h|--help'?
		arg = "cat >&2 <<EOF\n\
Usage:\n\
 getopt OPTSTRING [ARGUMENT ...]\n\
 getopt [OPTIONS] [--] OPTSTRING [ARGUMENT ...]\n\
 getopt [OPTIONS] -o|--options OPTSTRING [OPTIONS] [--] [ARGUMENT ...]\n\n\
Parse ARGUMENTs into options and arguments\n\n\
Valid options are:\n\
 -h, --help			Show this help and exit\n\
 -V, --version			Show version information and exit\n\
 -a, --alternative		Recognize altenative long options\n\
 -l, --longoptions=LONGOPTS	Specify long options to be recognized\n\
 -n, --name=COMMAND		Report errors on behalf of COMMAND\n\
 -o, --options=OPTSTRING	Specify short options to be recognized\n\
 -q, --quiet			Suppress error messages\n\
 -Q, --quiet-output		Suppress normal output\n\
 -s, --shell=SHELL		Use SHELL's quoting conventions (default: sh)\n\
 -T, --test			Test for getopt(1) version\n\
 -u, --unquoted			Don't quote output\n\
 -U, --unquoted-options		Don't quote options in output\nEOF"
		system(arg)		## Yes, show help and...
		leave("2"); return 2	## ...indicate "misuse"!
	    } else if (on ~ /^(-V|--version)$/) {
					## No, saw option '-V|--version'?
		printf "%s (%s) %s\n",cn,"@PACKAGE_NAME@","@PACKAGE_VERSION@"
					## Yes, show version and...
		leave("0"); return 0	## ...indicate success.
	    } else if (on ~ /^(-T|--test)$/) {
					## No, saw option '-V|--version'?
		leave("4"); return 4	## Yes, indicate modern getopt(1).
	    } else if (on ~ /^(-a|--alternative)$/) {
					## No, saw option '-a|--alternative'?
		inc_property(pi+1,"a")	## Yes, allow alternative long options
					## in 2nd pass.
	    } else if (on ~ /^(-l|--longoptions)$/) {
					## No, saw option '-l|--longoptions'?
		if (!getopt_add_longopts(ov,pi+1)) continue
					## Yes, 2nd pass's LONGOPTS added?
		leave("3"); return 3	## No, indicate internal error!
	    } else if (on ~ /^(-n|--name)$/) {
					## No, saw option '-n|--name'?
		set_property(pi+1,"n",ov)
					## Yes, set 2nd pass's command name.
	    } else if (on ~ /^(-o|--options)$/) {
					## No, saw option '-o|--options'?
		if (!getopt_add_optstring(ov,pi+1)) continue
					## Yes, 2nd pass's OPTSTRING added?
		leave("3"); return 3	## No, indicate internal error!
	    } else if (on ~ /^(-q|--quiet)$/) {
					## No, saw option '-q|--quiet'?
		inc_property(pi+1,"q")	## Yes, make 2nd pass quiet.
	    } else if (on ~ /^(-Q|--quiet-output)$/) {
					## No, saw option '-Q|--quiet-output'?
		inc_property(pi+1,"Q")	## Yes, make 2nd pass entirely quiet.
	    } else if (on ~ /^(-s|--shell)$/) {
					## No, saw option '-s|--shell'?
		if (ov ~ /^([bd]?a|k|t?c)?sh$/) {
					## Yes. Valid shell specified?
		    set_property(pi+1,"s",ov)
					## Yes, set 2nd pass's shell.
		} else {
		    ++ec; error(sprintf("invalid shell '%s'!",ov),pi)
		}
	    } else if (on ~ /^(-u|--unquoted)$/) {
					## No, saw option '-u|--unquoted'?
		inc_property(pi+1,"u")	## Yes, don't quote 2nd pass's output.
	    } else if (on ~ /^(-U|--unquoted-options)$/) {
					## No, saw option '-U|--unquoted-options'?
		inc_property(pi+1,"U")	## Yes, don't quote 2nd pass's options.
	    }
	} else {			## In 2nd pass!
	    if (at < AT_ARG) {		## 2nd pass's arguments exhausted?
		trace("break"); break	## Yes, leave 2nd pass.
	    } else if (at == AT_ARG) {	## No, saw ordinary argument?
		if (ordered) {		## Output is ordered?
		    O = O quote_sh(arg,pi,at) " "; trace(sprintf("O=\"%s\"",O))
					## Yes, fetch, quote, and append it
		} else {		## to LHS.
		    A = A " " quote_sh(arg,pi,at); trace(sprintf("A=\"%s\"",A))
					## No, fetch, quote, and append it
		}			## to RHS.
		if (posixly) {		## In POSIX compliancy mode?
		    trace("break"); break
					## Yes, treat remaining arguments as
		}			## ordinary arguments.
	    } else if ((at == AT_ONA) && (pioi2at[pi,oi] == AT_ONA)) {
					## Saw option without value?
		O = O quote_sh(on,pi,at) " "; trace(sprintf("O=\"%s\"",O))
					## Yes, quote and append it to LHS.
	    } else {			## Saw option with value!
		O = O quote_sh(on,pi,at) " " quote_sh(ov,pi,AT_ARG) " "
		trace(sprintf("O=\"%s\"",O))
					## Yes, quote and append it as well as
	    }				## its value to LHS.
	}
    }

    if (at < AT_EOA) {			## Prior getopt_shift() failed?
	leave("1"); return 1		## Yes, indicate failure!
    }
    while (ARGI < ARGC) {		## Foreach remaining argument do...
	A = A " " quote_sh(ARGV[ARGI++],pi,AT_ARG)
	trace(sprintf("A=\"%s\"",A))	## Fetch, quote, and append it to RHS.
    }
    if (!piow2ov[pi,"Q"]) printf "%s--%s\n",O,A
					## Print result unless entirely quiet.
    leave(sprintf("%u",(ec > 0))); return (ec > 0)
}					## Indicate success or failure.

##----------------------------------------------------------------------------
##  Main program:
##----------------------------------------------------------------------------
BEGIN {
    ARGI = 1; action = ARGV[ARGI++]	## Fetch action. Which action?
    if (action == "print") {
	status = args_print()		## Print arguments.
    } else if (action == "getopt") {
	status = args_getopt(action)	## Emulate getopt(1).
    } else {
	piow2ov[0,"n"] = ARGV[0]	## Fake 0th pass...
	error(sprintf("unknown action '%s'!",action),0)
	status = 2			## ...and indicate misuse!
    }
    trace(sprintf("exit %d",status)); exit status
}
