#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libemit.sh			- Message emission library
#
#   Copyright (C) 2013-2016 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-12
##  CHANGED BY:	ks	2016-05-21	Implement meta operations.
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
emit_package='@PACKAGE_TARNAME@'	## Define source package name/version.
emit_version='@PACKAGE_VERSION@'
emit_api=0				## Define API version.
emit_heads=:
readonly emit_package emit_version emit_api

##----------------------------------------------------------------------------
##  emit_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
emit_meta() {
    local mp=emit_			## Set meta prefix.

    case $1-$2 in			## Which META operation?
	get-apis)			## Inquire APIs...
	    local sx ms=\;
	    local fa='/^a'"$ms"'/!d;s///'   ff='/^f'"$ms"'/!d;s///'	\
		  da=';s/([^)'"$ms"'(]*)//' p2=';s/'"$ms"'/&'"$mp"'/'
	    case ${3-api} in		## Which format?
		api)	sx="$fa"		;;
		full)   sx="$ff$p2${4+;$4}"	;;
		list)	sx="$ff$p2$da${4+;$4}"	;;
		*)	return 1		;;
	    esac
	    sed "$sx" <<EOF
a${ms}$emit_api
f${ms}$emit_api${ms}meta(META [ARG ...])${ms}2-
f${ms}$emit_api${ms}set_head(LEVEL HEAD)${ms}2
f${ms}$emit_api${ms}get_head(LEVEL)${ms}1
f${ms}$emit_api${ms}(LEVEL MESSAGE ...)${ms}2
EOF
	    ;;
	get-package|get-version|get-api)
					## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	*)  return 2			## Anything else...
	    ;;				## Indicate misusage!
    esac
}

##----------------------------------------------------------------------------
##  emit_set_head(LEVEL HEAD)	Set LEVEL's emit head to HEAD
##----------------------------------------------------------------------------
emit_set_head() {
    eval emit_head_$1=\$2

    case $emit_heads in
	*:$1:*)					;;
	*)	emit_heads=$emit_heads$1:	;;
    esac
}

##----------------------------------------------------------------------------
##  emit_get_head(LEVEL)	Get LEVEL's emit head
##----------------------------------------------------------------------------
emit_get_head() {
    case $emit_heads in
	*:$1:*)	eval echo \"\$emit_head_$1\"	;;
	*)	return 1			;;
    esac
}

##----------------------------------------------------------------------------
##  emit(LEVEL MESSAGE ...)	Emit message at LEVEL
##----------------------------------------------------------------------------
emit() {
    local l="$1"; shift			## Fetch level.

    case $emit_heads in
	*:$l:*)	eval echo \"\$emit_head_$l\$*\"	;;
	*)	echo "$*"			;;
    esac
}
