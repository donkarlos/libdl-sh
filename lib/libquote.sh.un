#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libquote.sh			- String quoting library
#
#   Copyright (C) 2013-2017 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-13
##  CHANGED BY:	ks	2015-12-29	Implement meta operations.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
quote_package='@PACKAGE_TARNAME@'	## Define source package name/version.
quote_version='@PACKAGE_VERSION@'
quote_api=0				## Define API version.
quote_sh_sx='s/'"$SQ"'/&'"$BS$BS"'&&/g;s/^/'"$SQ"'/;s/$/'"$SQ"'/'
readonly quote_package quote_version quote_api quote_sh_sx

##----------------------------------------------------------------------------
##  quote_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
quote_meta() {
    local mp=quote_			## Set meta prefix.

    case $1-$2 in			## Which META operation?
	get-apis)			## Inquire APIs...
	    local sx ms=\;
	    local fa='/^a'"$ms"'/!d;s///'   ff='/^f'"$ms"'/!d;s///'	\
		  da=';s/([^)'"$ms"'(]*)//' p2=';s/'"$ms"'/&'"$mp"'/;s/_(/(/'
	    case ${3-api} in		## Which format?
		api)	sx="$fa"		;;
		full)   sx="$ff$p2${4+;$4}"	;;
		list)	sx="$ff$p2$da${4+;$4}"	;;
		*)	return 1		;;
	    esac
	    sed "$sx" <<EOF
a${ms}$quote_api
f${ms}$quote_api${ms}meta(META [ARG ...])${ms}2-
f${ms}$quote_api${ms}sh(STRING)${ms}1
f${ms}$quote_api${ms}command(COMMAND [ARGUMENT|REDIRECTION ...])${ms}1-
f${ms}$quote_api${ms}re(STRING [DELIMITER])${ms}1-2
f${ms}$quote_api${ms}ere(STRING [DELIMITER])${ms}1-2
f${ms}$quote_api${ms}rs(STRING [DELIMITER])${ms}1-2
f${ms}$quote_api${ms}grep(STRING)${ms}1
f${ms}$quote_api${ms}egrep(STRING)${ms}1
f${ms}$quote_api${ms}sed(STRING [DELIMITER=/])${ms}1-2
EOF
	    ;;
	get-package|get-version|get-api)
					## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	session-*)			## Dummy init/sustain/suspend/exit
	    :				## session...
	    ;;
	*)  return 2			## Anything else...
	    ;;				## Indicate misusage!
    esac
}

##----------------------------------------------------------------------------
##  quote_sh(STRING)		Quote STRING for sh(1)
##----------------------------------------------------------------------------
quote_sh() {
    case $BASH in
	?*) echo \'${1//\'/\'\\\'\'}\'
	    ;;
	*)  sed "$quote_sh_sx" <<EOF
$1
EOF
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  quote_command(COMMAND [ARGUMENT|REDIRECTION ...])
##				Quote sh(1) command
##----------------------------------------------------------------------------
quote_command() {
    local cmd="$1" arg; shift		## Fetch command.

    case $BASH in			## Append each redirection/argument...
	?*) for arg in ${1+"$@"}; do case $arg in
		*\<*|*\>*)
		    cmd="$cmd $arg"			;;
		*)  cmd="$cmd "\'${arg//\'/\'\\\'\'}\'	;;
	    esac; done	;;
	*)  for arg in ${1+"$@"}; do case $arg in
		*\<*|*\>*)
		    cmd="$cmd $arg"			;;
		*)  cmd="$cmd `sed "$quote_sh_sx" <<EOF
$arg
EOF`"							;;
	    esac; done	;;
    esac

    echo "$cmd"				## Emit quoted command.
}

##----------------------------------------------------------------------------
##  quote_re(STRING [DELIMITER])
##				Quote STRING for use as obsolete/basic RE
##----------------------------------------------------------------------------
quote_re() {
    sed 's/[]'"$2"'^\.*$[]/'"$BS$BS"'&/g' <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  quote_ere(STRING [DELIMITER])
##				Quote STRING for use as modern/extended RE
##----------------------------------------------------------------------------
quote_ere() {
    sed 's/[]'"$2"'^\.(|)?*+{}$[]/'"$BS$BS"'&/g' <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  quote_rs(STRING [DELIMITER])
##				Quote STRING for use as RE substitution
##----------------------------------------------------------------------------
quote_rs() {
    sed 's/['"$2"'&\]/'"$BS$BS"'&/g' <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  quote_grep(STRING)		Quote STRING for grep(1)
##----------------------------------------------------------------------------
quote_grep() {
    quote_re "$1"
}

##----------------------------------------------------------------------------
##  quote_egrep(STRING)		Quote STRING for egrep(1)
##----------------------------------------------------------------------------
quote_egrep() {
    quote_ere "$1"
}

##----------------------------------------------------------------------------
##  quote_sed(STRING [DELIMITER=/])
##				Quote STRING for sed(1)
##----------------------------------------------------------------------------
quote_sed() {
    quote_re "$1" "${2:-/}"
}
