#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libquote.sh			- String quoting library
#
#   Copyright Â© 2013-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-13
##  CHANGED BY:	ks	2015-12-29	Implement meta operations.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##		ks	2017-02-11	Make quote_sh() and quote_command()
##					process multi-line strings.
##		ks	2020-05-12	Limit valid 'meta session' operations.
##					Make 'meta get apis FORMAT' properly
##					handle namespace rule-exempted names.
##		ks	2021-04-29	Add universal quoter quote().
##		ks	2021-05-01	'set -u'-harden quote_meta().
##		ks	2021-05-08	Make 'quote_meta get apis' SEDEX
##					labels portable.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
quote_package='@PACKAGE_TARNAME@'	## Define source package name/version.
quote_version='@PACKAGE_VERSION@'
quote_api=0				## Define API version.
quote_cs_sh=']^?*~! 	${}()<|>&;#'"$BQ$DQ$SQ$BS"'['
quote_sx_ml=':n'"$NL"'$!{;N;bn'"$NL"'}'
quote_sx_sh='s/'"$SQ"'/&'"$BS$BS"'&&/g;s/^/'"$SQ"'/;s/$/'"$SQ"'/'
quote_sxl_re='s/[]'
quote_sxr_re='^\.*$[]/'"$BS$BS"'&/g'
quote_sxl_rs='s/[\&'
quote_sxr_rs=']/'"$BS$BS"'&/g'
quote_sx_nl='s/'"$BS$NL"'/'"$BS$BS"'&/g'
					## Define sed(1) expression chunks.

readonly quote_package quote_version quote_api quote_cs_sh quote_sx_ml	\
	 quote_sx_sh quote_sxl_re quote_sxr_re quote_sxl_rs quote_sxr_rs\
	 quote_sx_nl

##----------------------------------------------------------------------------
##  quote_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
quote_meta() {
    local mp=quote_			## Set meta prefix.

    case ${2+=}${1+$1-}${2-} in		## Which META operation?
	=get-apis)			## Inquire APIs...
	    local sx ms=\;
	    local fa='/^a'"$ms"'/!d;s///' da='s/([^)'"$ms"'(]*)//'	\
		  ff='/^F'"$ms"'/{;s///;t2'"$NL"'};/^f'"$ms"'/!d;s///'	\
		  fr='/^R'"$ms"'/{;s///;t2'"$NL"'};/^r'"$ms"'/!d;s///'	\
		  p2=';s/'"$ms"'/&'"$mp"'/;:2'
	    case ${3-api} in		## Which format?
		api)	sx="$fa"			;;
		full)	sx="$ff$p2${4+$NL$4}"		;;
		list)	sx="$ff$p2$NL$da${4+;$4}"	;;
		r/o)	sx="$fr$p2${4+$NL$4}"		;;
		*)	return 1			;;
	    esac
	    sed "$sx" <<EOF
a${ms}$quote_api
f${ms}$quote_api${ms}meta(META [ARG ...])${ms}2-
F${ms}$quote_api${ms}quote([STYLE [DELIMITER]] ... STRING])${ms}0-
f${ms}$quote_api${ms}sh(STRING)${ms}1
f${ms}$quote_api${ms}command(COMMAND [ARGUMENT|REDIRECTION ...])${ms}1-
f${ms}$quote_api${ms}re(STRING [DELIMITER])${ms}1-2
f${ms}$quote_api${ms}ere(STRING [DELIMITER])${ms}1-2
f${ms}$quote_api${ms}rs(STRING [DELIMITER])${ms}1-2
f${ms}$quote_api${ms}grep(STRING)${ms}1
f${ms}$quote_api${ms}egrep(STRING)${ms}1
f${ms}$quote_api${ms}sed(STRING [DELIMITER=/])${ms}1-2
EOF
	    ;;
	=get-package|=get-version|=get-api)
					## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	=session-init|=session-load|=session-dump|=session-exit)
	    :				## Session init/load/dump/exit...
	    ;;				## ...is a no-op.
	*)  return 2			## Anything else...
	    ;;				## ...is abuse!
    esac
}

##----------------------------------------------------------------------------
##  quote([[STYLE [DELIMITER]] ... STRING])
##				Universally quote STRING
##
##  Non-local variables:
##	- quote_cs_sh	(R) Special sh(1) character set
##	- quote_sx_ml	(R) ~~~~
##	- quote_sx_sh	(R) ~~~~
##	- quote_sxl_re	(R) ~~~~
##	- quote_sxr_re	(R) ~~~~
##	- quote_sxl_rs	(R) ~~~~
##	- quote_sxr_rs	(R) ~~~~
##	- quote_sx_nl	(R) ~~~~
##----------------------------------------------------------------------------
quote() {
    local n st de string i=0 sx

    set shiftee ${1+"$@"}		## Let initial shift always succeed.
    while shift ${n-}; do		## Foreach STyle do...
	case ${2+2}${1+1}_${1+1$1_}${2+2$2_}${3+3} in
					## What are we looking at?
	    21_1r[es]_2_3|21_1r[es]_2?_3)
					## Style re/rs with DElimiter...
		n=2 st=$1 de=$2		## Fetch STyle and DEimiter.
		;;
##	    21_1r[es]_2r[es]_3|21_1r[es]_2sh_3)
##					## Style re/rs sans DElimiter...
##		n=1 st=$1 de=		## Fetch STyle and assume empty
##		;;			## DElimiter.
##	    21_1r[es]_2??*_3)		## Style re/rs with invalid DElim-
##		return 2		## iter...
##		;;			## Indicate abuse!
	    21_1*_2*_*)			## Style without DElimiter...
		n=1 st=$1 de=		## Fetch STyle and (for safety)
		;;			## assume empty DElimiter.
	    1_1*_)			## STRING...
		n=1 string=$1		## Fetch STRING, yet immediately exert
		case ${st+=} in		## quoting rounds if some STyle had
		    =)	break	;;	## been fetched before.
		esac
		;;
	    _)				## No more arguments...
		break			## Exert quoting rounds.
		;;
	    *)				## Should never happen...
		return 3		## Indicate internal error!
		;;
	esac; case ${st-sh} in		## Which STyle had been fetched?
	    re)				## Basic RE...
		sx="${sx+$sx;}$quote_sxl_re${de-}$quote_sxr_re;$quote_sx_nl"
					## Append sed(1) expr. for another
		;;			## round of basic RE quoting.
	    rs)				## 's///' right-hand side...
		sx="${sx+$sx;}$quote_sxl_rs${de-}$quote_sxr_rs;$quote_sx_nl"
					## Append sed(1) expr. for another
		;;			## round of right-hand side quoting.
	    sh)				## Bourne shell...
		sx="${sx+$sx;}:p$i"; i=`expr $i + 1`
		sx="$sx$NL"'/^$/bq'"$i$NL"'/'"$BS$NL"'/bq'"$i"
		sx="$sx$NL"'/['"$quote_cs_sh"']/!bp'"$i$NL"':q'"$i$NL$quote_sx_sh"
					## Append sed(1) expr. for another
		;;			## round of shell quoting.
	    *)				## Unknown STyle...
		return 2		## Indicate abuse!
		;;
	esac
    done; sed "$quote_sx_ml;${sx+$sx;}:p$i$NL"'/^$/d' <<EOF
${string-}
EOF
					## Exert quoting rounds to STRING in
}					## one go!

##----------------------------------------------------------------------------
##  quote_sh(STRING)		Quote STRING for sh(1)
##----------------------------------------------------------------------------
quote_sh() {
    case $BASH in
	?*) echo "$SQ${1//\'/\'\\\'\'}$SQ"
	    ;;
	*)  sed "$quote_sx_ml;$quote_sx_sh" <<EOF
$1
EOF
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  quote_command(COMMAND [ARGUMENT|REDIRECTION ...])
##				Quote sh(1) command
##----------------------------------------------------------------------------
quote_command() {
    local cmd="$1" arg; shift		## Fetch command.

    case $BASH in			## Append each redirection/argument...
	?*) for arg in ${1+"$@"}; do case $arg in
		*\<*|*\>*)
		    cmd="$cmd $arg"			;;
		*)  cmd="$cmd $SQ${arg//\'/\'\\\'\'}$SQ";;
	    esac; done	;;
	*)  for arg in ${1+"$@"}; do case $arg in
		*\<*|*\>*)
		    cmd="$cmd $arg"			;;
		*)  cmd="$cmd `sed "$quote_sx_ml;$quote_sx_sh" <<EOF
$arg
EOF`"							;;
	    esac; done	;;
    esac

    echo "$cmd"				## Emit quoted command.
}

##----------------------------------------------------------------------------
##  quote_re(STRING [DELIMITER])
##				Quote STRING for use as obsolete/basic RE
##----------------------------------------------------------------------------
quote_re() {
    sed "$quote_sxl_re${2-}$quote_sxr_re" <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  quote_ere(STRING [DELIMITER])
##				Quote STRING for use as modern/extended RE
##----------------------------------------------------------------------------
quote_ere() {
    sed 's/[]'"${2-}"'^\.(|)?*+{}$[]/'"$BS$BS"'&/g' <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  quote_rs(STRING [DELIMITER=/])
##				Quote STRING for use as sed(1) 's///' substi-
##				tution
##----------------------------------------------------------------------------
quote_rs() {
    sed "$quote_sxl_rs${2-/}$quote_sxr_rs" <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  quote_grep(STRING)		Quote STRING for grep(1)
##----------------------------------------------------------------------------
quote_grep() {
    quote_re "$1"
}

##----------------------------------------------------------------------------
##  quote_egrep(STRING)		Quote STRING for egrep(1)
##----------------------------------------------------------------------------
quote_egrep() {
    quote_ere "$1"
}

##----------------------------------------------------------------------------
##  quote_sed(STRING [DELIMITER=/])
##				Quote STRING for sed(1)
##----------------------------------------------------------------------------
quote_sed() {
    quote_re "$1" "${2:-/}"
}
