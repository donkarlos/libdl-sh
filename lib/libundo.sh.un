#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libundo.sh			- Undo stack management library
#
#   Copyright (C) 2013-2016 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-13
##  CHANGED BY:	ks	2016-05-16	Work around dash(1)'s local semantics.
##					Fix `undo_* MARK TAG' semantics.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-24	Deprecate undo_keep().
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
undo_api=1				## Define API version.
undo_stack=
undo_exit0=

##----------------------------------------------------------------------------
##  undo_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
undo_meta() {
    local mp=undo_			## Set meta prefix.

    case $1-$2 in			## Which META operation?
	get-apis)			## Inquire APIs...
	    local fa='/^a:/!d;s///'	ff='/^f:/!d;s///'		\
		  da=';s/([^):(]*):/:/'	p2=';s/:/:'"$mp"'/'		\
		  sx
	    case ${3-api} in		## Which format?
		api)	sx="$fa"		;;
		full)   sx="$ff$p2${4+;$4}"	;;
		list)	sx="$ff$p2$da${4+;$4}"	;;
		*)	return 1		;;
	    esac
	    sed "$sx" <<EOF
a:0
f:0:meta(META [ARG ...]):2-
f:0:init(TAG):1
f:0:mark(MARK):1
f:0:push([TAG] COMMAND [ARGUMENT|REDIRECTION ...]):1-
f:0:pull(MARK [TAG] | TAG | [COUNT=1]):0-2
f:0:drop(MARK [TAG] | TAG | [COUNT=1]):0-2
f:0:keep(MARK [TAG] | TAG | [COUNT=1]):0-2
a:1
f:1:meta(META [ARG ...]):2-
f:1:init(TAG):1
f:1:mark(MARK):1
f:1:push([TAG] COMMAND [ARGUMENT|REDIRECTION ...]):1-
f:1:pull(MARK [TAG] | TAG | [COUNT=1]):0-2
f:1:drop(MARK [TAG] | TAG | [COUNT=1]):0-2
EOF
	    ;;
	get-api)			## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	set-api)			## Set and freeze API...
	    ${mp}meta get apis api | fgrep -qxe "$3" || return 1
	    eval "$mp$2"'=$3; readonly '"$mp$2"
	    ;;
	*)  return 2			## Anything else...
	    ;;				## Indicate misusage!
    esac
}

##----------------------------------------------------------------------------
##  undo_init(TAG)		Set cleanups tag for successful exit
##----------------------------------------------------------------------------
undo_init() {
    case $1 in				## Cleanups tag is first?
	::*)	return 2	;;	## No, it's a mark!
	:?*)	undo_exit0=$1	;;	## Yes, set cleanups tag.
	*)	return 2	;;	## No, it's not a tag!
    esac
}

##----------------------------------------------------------------------------
##  undo_emit(MODE MARK)	Emit undos within MARKed range and MARK,
##  undo_emit(MODE MARK TAG)	Emit TAGged undos within MARKed range,
##  undo_emit(MODE TAG)		Emit TAGged undos, or
##  undo_emit(MODE [COUNT=1])	Emit COUNT undos on behalf of undo_MODE(),
##				where MODE is drop or keep.
##
##  NOTE:   (1)	When emitting a marked range, an empty line is prepended
##		so that the range matches even if MARK is on top.
##		Otherwise, the undo stack might be accidentally cleared or
##		not modified at all!
##----------------------------------------------------------------------------
undo_emit() {
    local i mark range sedex

    case $1 in				## Which mode?
	drop) i=	;;		## Drop, i.e. don't invert deletes.
	keep) i='!'	;;		## Keep, i.e. invert deletes.
	*)    return 2	;;		## None of the above!
    esac

    case $2 in				## Mark is next?
	::?*)				## Yes, derive mark/range fragments.
	    mark='/^#{'"$2"'::}#$/'; range="1,$mark"
	    case $3 in			## Tag is next?
		::*)	return 2		;;
					## No, it's another mark!
		:?*)
		    case $1 in
			drop)
			    sedex='{;'"$mark"'bp;/#'"$3$DS/$i"'d;1d;};:p'   ;;
			keep)
			    sedex='!d;'"$mark"'d;/#'"$3$DS/$i"'d'	    ;;
		    esac			;;
		?*)	return 2		;;
					## No, it's not a tag!
		*)	sedex="$i"'d;1d'	;;
	    esac			## No, (don't) drop marked range.
	    ;;
	::*)				## Tag is first?
	    return 2			## It's a mark!
	    ;;
	:?*)
	    unset range; sedex="/#$2"'$/'"${i}d"
	    ;;				## Yes, (don't) drop tagged undos.
	*)  unset range; sedex="1${2+,$2}${i}d"
	    ;;				## No, assume it's a count.
    esac
    sed "$range$sedex" 2>/dev/null <<EOF
${range+$NL}$undo_stack
EOF
}

##----------------------------------------------------------------------------
##  undo_mark(MARK)		Push MARK onto undo stack
##
##  NOTE:   (1)	Contrary to tags (which are appended as a comment), marks
##		occupy a whole line. Keep this in mind when pulling/dropping/
##		keeping undos by count!
##----------------------------------------------------------------------------
undo_mark() {
    case $1 in				## Mark is first?
	::?*)	undo_stack="#{$1::}#$NL$undo_stack"	;;
					## Push mark onto undo stack.
	*)	return 2				;;
    esac				## No, it's not a mark!
}

##----------------------------------------------------------------------------
##  undo_push([TAG] COMMAND [ARGUMENT|REDIRECTION ...])
##				Push (TAGged) COMMAND (with quoted ARGUMENTs
##				and/or raw REDIRECTIONs) onto undo stack
##----------------------------------------------------------------------------
undo_push() {
    local tag

    case $1 in				## Tag is first?
	::*) return 2		;;	## No, it's a mark!
	:?*) tag=" #$1"; shift	;;	## Yes, fetch it.
    esac
    undo_stack="`quote_command ${1+"$@"}`$tag$NL$undo_stack"
}					## Push (tagged) undo onto stack.

##----------------------------------------------------------------------------
##  undo_pull(MARK)		Pull undos within MARKed range and MARK,
##  undo_pull(MARK TAG)		Pull TAGged undos within MARKed range,
##  undo_pull(TAG)		Pull TAGged undos, or
##  undo_pull([COUNT=1])	Pull COUNT undos from undo stack
##----------------------------------------------------------------------------
undo_pull() {
    eval "`undo_emit keep ${1+"$@"}`"
    undo_stack=`undo_emit drop ${1+"$@"}`
				## Pull (i.e. apply and drop) selected undos
}				## from stack.

##----------------------------------------------------------------------------
##  undo_drop(MARK)		Drop undos within MARKed range and MARK,
##  undo_drop(MARK TAG)		Drop TAGged undos within MARKed range,
##  undo_drop(TAG)		Drop TAGged undos, or
##  undo_drop([COUNT=1])	Drop COUNT undos from undo stack
##----------------------------------------------------------------------------
undo_drop() {
    undo_stack=`undo_emit drop ${1+"$@"}`
}					## Drop selected undos from stack.

##----------------------------------------------------------------------------
##  undo_keep(MARK)		Keep undos within MARKed range and MARK,
##  undo_keep(MARK TAG)		Keep TAGged within MARKed range,
##  undo_keep(TAG)		Keep TAGged undos, or
##  undo_keep([COUNT=1])	Keep COUNT undos on undo stack
##----------------------------------------------------------------------------
undo_keep() {
    case ${undo_api--} in
	0)  dl_warn rel-dpr-func undo "keep([$#]$*)" 0.4 0.5 0.3.6	;;
	1)  dl_warn api-wdr-func undo "keep([$#]$*)" 1 0		;;
    esac || return 1

    undo_stack=`undo_emit keep ${1+"$@"}`
}					## Keep selected undos on stack.

##----------------------------------------------------------------------------
##  undo_exit(STATUS)		Apply cleanups/undos
##
##  NOTE:   (1)	This function is registered as exit-time hook!
##----------------------------------------------------------------------------
undo_exit() {
    case ${1-1}$undo_exit0 in		## Exit with...
	0)				## ...success and no cleanups tag?
	    ;;				## What's done is done.
	0:*)				## ...success and cleanups tag?
	    eval "`undo_emit keep "$undo_exit0"`"
	    ;;				## Apply cleanups.
	*)				## ...failure?
	    eval "$undo_stack"		## Apply undos.
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
dl_load quote && dl_atexit undo_exit
