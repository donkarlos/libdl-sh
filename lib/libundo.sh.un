#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libundo.sh			- Undo stack management library
#
#   Copyright Â© 2013-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-13
##  CHANGED BY:	ks	2016-05-16	Work around dash(1)'s local semantics.
##					Fix `undo_* MARK TAG' semantics.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-24	Deprecate undo_keep().
##					Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##					Add 'meta get/set 0tag' as substitute
##					for undo_init().
##		ks	2017-02-11	Deprecate undo_init().
##		ks	2020-05-12	Limit valid 'meta session' operations.
##					Make 'meta get apis FORMAT' properly
##					handle namespace rule-exempted names.
##		ks	2021-05-01	'set -u'-harden undo_meta().
##		ks	2021-05-08	Make 'undo_meta get apis' sed(1) expr.
##					labels portable.
##		ks	2021-05-13	'set -u'-harden undo_init(), undo_ex-
##					it(), undo_emit(), and undo_mark().
##					Merge undo_mark() functionality into
##					undo_push().
##					Deprecate/Withdraw undo_mark().
##		ks	2021-05-16	Use dl_readonly() to freeze variables
##					and dl_apis() to emit API information.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
undo_re_tag=':[^: 	][^ 	]*'	## Define unanchored RE for tags.
readonly undo_re_tag

undo_package=@PACKAGE_TARNAME@		## Define source package name
undo_version=@PACKAGE_VERSION@		## and version.
undo_api=1				## Preset default API version.
undo_stack=				## Clear undo stack.
readonly undo_package undo_version; unset undo_ro undo_0tag
					## Discard spurious environment.

##----------------------------------------------------------------------------
##  undo_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
undo_meta() {
    local mp=undo_ ms=\;		## Set meta prefix and separator.

    case ${2+=}${1+$1-}${2-} in		## Which META operation?
	=get-apis)			## Inquire APIs...
	    shift 2 && dl_apis ${1+"$@"} <<EOF
a${ms}0
f${ms}0${ms}meta(META [ARG ...])${ms}2-4
f${ms}0${ms}init(TAG)${ms}1
f${ms}0${ms}mark(MARK)${ms}1
f${ms}0${ms}push([TAG] COMMAND [ARGUMENT|REDIRECTION ...])${ms}1-
f${ms}0${ms}pull(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
f${ms}0${ms}drop(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
f${ms}0${ms}keep(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
a${ms}1
f${ms}1${ms}meta(META [ARG ...])${ms}2-4
f${ms}1${ms}mark(MARK)${ms}1
f${ms}1${ms}push([TAG] COMMAND [ARGUMENT|REDIRECTION ...])${ms}1-
f${ms}1${ms}pull(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
f${ms}1${ms}drop(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
a${ms}2
f${ms}2${ms}meta(META [ARG ...])${ms}2-4
f${ms}2${ms}push(MARK|[TAG] COMMAND [ARGUMENT|REDIRECTION ...])${ms}1-
f${ms}2${ms}pull(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
f${ms}2${ms}drop(MARK [TAG] | TAG | [COUNT=1])${ms}0-2
EOF
	    ;;
	=get-package|=get-version|=get-api|=get-0tag)
					## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	=set-*)				## Set internal variable once...
	    case ${4+4}${3+=}$2 in	## Usage OK?
		=api)	${mp}meta get apis | fgrep -qxe "$3"
			;;		## Yes, try to validate API version.
		=0tag)	expr "_$3" : "_$undo_re_tag"'$' >/dev/null
			;;		## Yes, try to validate tag.
		*)	return 2	## No, indicate abuse!
			;;
	    esac && eval dl_readonly undo "$2" "$3"
	    ;;
	=session-init|=session-load|=session-dump|=session-exit)
	    :				## Session init/load/dump/exit...
	    ;;				## ...is a no-op.
	*)  return 2			## Anything else...
	    ;;				## ...is abuse!
    esac
}

##----------------------------------------------------------------------------
##  undo_init(TAG)		Set cleanups tag for successful exit
##----------------------------------------------------------------------------
undo_init() {
    case ${undo_api--} in
	[12])	dl_warn api-wdr-func "undo;_init([$#]$*)" 1 0		;;
	*)	dl_warn rel-dpr-func "undo;_init([$#]$*)" 0.4 0.5 0.3.6	;;
    esac && undo_meta set 0tag ${1+"$1"}
}

##----------------------------------------------------------------------------
##  undo_emit(MODE MARK)	Emit undos within MARKed range and MARK,
##  undo_emit(MODE MARK TAG)	Emit TAGged undos within MARKed range,
##  undo_emit(MODE TAG)		Emit TAGged undos, or
##  undo_emit(MODE [COUNT=1])	Emit COUNT undos on behalf of undo_MODE(),
##				where MODE is drop or keep.
##
##  NOTE:   (1)	When emitting a marked range, an empty line is prepended
##		so that the range matches even if MARK is on top.
##		Otherwise, the undo stack might be accidentally cleared or
##		not modified at all!
##----------------------------------------------------------------------------
undo_emit() {
    local i mark range sx

    case ${1+=$1} in			## Which mode?
	=drop)	i=	;;		## Drop, i.e. don't invert deletes.
	=keep)	i='!'	;;		## Keep, i.e. invert deletes.
	*)	return 2;;		## None of the above!
    esac; case ${2+=$2} in		## Mode followed by mark?
	=::?*)				## Yes, derive mark/range fragments.
	    mark='/^#{'"$2"'::}#$/'; range="1,$mark"
	    case ${3+=$3} in		## Mark followed by tag?
		=::*)			## No (a 2nd mark!), indicate abuse!
		    return 2	    ;;
		=:?*)			## Yes, ...
		    case $1 in		## Which mode?
			drop)	sx='{;'"$mark"'bp;/#'"$3$DS/$i"'d;1d;};:p'  ;;
			keep)	sx='!d;'"$mark"'d;/#'"$3$DS/$i"'d'	    ;;
		    esac	    ;;
		=?*)return 2	    ;;	## No, indicate abuse!
		*)  sx="$i"'d;1d'   ;;	## Nothing, (don't) drop marked range.
	    esac
	    ;;
	=::*)				## Mode followed by valid tag?
	    return 2			## No, indicate abuse!
	    ;;
	=:?*)
	    unset range; sx="/#$2"'$/'"${i}d"
	    ;;				## Yes, (don't) drop tagged undos.
	*)  unset range; sx="1${2+,$2}${i}d"
	    ;;				## No, assume it's a count.
    esac
    sed "${range-}$sx" 2>/dev/null <<EOF
${range+$NL}$undo_stack
EOF
}

##----------------------------------------------------------------------------
##  undo_mark(MARK)		Push MARK onto undo stack
##
##  NOTE:   (1)	Contrary to tags (which are appended as a comment), marks
##		occupy a whole line. Keep this in mind when pulling/dropping/
##		keeping undos by count!
##----------------------------------------------------------------------------
undo_mark() {
    case ${undo_api--} in
	2)  dl_warn api-wdr-func "undo;_mark([$#]$*)" 2 1		;;
	*)  dl_warn rel-dpr-func "undo;_mark([$#]$*)" 0.4 0.5 0.3.6	;;
    esac && case ${2+2}${1+1$1} in	## Usage OK/mark is valid?
	1::?*)	undo_stack=$CS{$1::}$CS$NL$undo_stack
		;;			## Y/Y: Push mark onto undo stack.
	1*)	return 1		## Y/N: Indicate failure!
		;;
	*)	return 2		## N/?: Indicate abuse!
		;;
    esac
}

##----------------------------------------------------------------------------
##  undo_push([TAG] COMMAND [ARGUMENT|REDIRECTION ...])
##  undo_push(MARK)		Push (TAGged) COMMAND (with quoted ARGUMENTs
##				and/or REDIRECTIONs) or MARK onto undo stack
##----------------------------------------------------------------------------
undo_push() {
    local tag cmd

    case ${undo_api--}/${2+2}${1+1$1} in
					## Which API/Argument(s) combination?
	*/21::*)			## ?/MARK COMMAND: Indicate abuse!
	    return 2
	    ;;
	*/21:?*)			## ?/TAG COMMAND: Fetch tag and quote
	    tag=$1; shift		## command.
	    cmd=`quote_command "$@"`
	    ;;
	2/1::?*)			## 2/MARK: Construct mark.
	    cmd=$CS{$1::}$CS
	    ;;
	*/21?*|*/1?*)			## ?/COMMAND: Quote command.
	    cmd=`quote_command "$@"`
	    ;;
	*/21|*/1)			## ?/Empty command: Indicate failure!
	    return 1
	    ;;
	*)  return 2			## Anything else is abuse!
	    ;;
    esac && undo_stack=$cmd${tag+ $CS$tag}$NL$undo_stack
					## Push (tagged) command or mark onto
}					## undo stack.

##----------------------------------------------------------------------------
##  undo_pull(MARK)		Pull undos within MARKed range and MARK,
##  undo_pull(MARK TAG)		Pull TAGged undos within MARKed range,
##  undo_pull(TAG)		Pull TAGged undos, or
##  undo_pull([COUNT=1])	Pull COUNT undos from undo stack
##----------------------------------------------------------------------------
undo_pull() {
    eval "`undo_emit keep ${1+"$@"}`"
    undo_stack=`undo_emit drop ${1+"$@"}`
				## Pull (i.e. apply and drop) selected undos
}				## from stack.

##----------------------------------------------------------------------------
##  undo_drop(MARK)		Drop undos within MARKed range and MARK,
##  undo_drop(MARK TAG)		Drop TAGged undos within MARKed range,
##  undo_drop(TAG)		Drop TAGged undos, or
##  undo_drop([COUNT=1])	Drop COUNT undos from undo stack
##----------------------------------------------------------------------------
undo_drop() {
    undo_stack=`undo_emit drop ${1+"$@"}`
}					## Drop selected undos from stack.

##----------------------------------------------------------------------------
##  undo_keep(MARK)		Keep undos within MARKed range and MARK,
##  undo_keep(MARK TAG)		Keep TAGged within MARKed range,
##  undo_keep(TAG)		Keep TAGged undos, or
##  undo_keep([COUNT=1])	Keep COUNT undos on undo stack
##----------------------------------------------------------------------------
undo_keep() {
    case ${undo_api--} in
	[12])	dl_warn api-wdr-func "undo;_keep([$#]$*)" 1 0		;;
	*)	dl_warn rel-dpr-func "undo;_keep([$#]$*)" 0.4 0.5 0.3.6	;;
    esac && undo_stack=`undo_emit keep ${1+"$@"}`
}					## Keep selected undos on stack.

##----------------------------------------------------------------------------
##  undo_exit(STATUS)		Apply cleanups/undos
##
##  NOTE:   (1)	This function is registered as exit-time hook!
##----------------------------------------------------------------------------
undo_exit() {
    case ${1-1}${undo_0tag-} in		## Exit with...
	0)				## ...success and no cleanups tag?
	    ;;				## What's done is done.
	0:*)				## ...success and cleanups tag?
	    eval "`undo_emit keep "$undo_0tag"`"
	    ;;				## Apply cleanups.
	*)				## ...failure?
	    eval "$undo_stack"		## Apply undos.
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
dl_load quote && dl_atexit undo_exit
