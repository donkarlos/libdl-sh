#! /bin/sh								  {%%}
#-----------------------------------------------------------------------------
#   libundo.sh			- libsh undo stack management library
#
#   Copyright (C) 2013, Karl Schmitz
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#									  {%-}
#   AUTHOR(S):	ks	Karl Schmitz <carolus.faber@googlemail.com>
#
#   WRITTEN BY:	ks	2013-02-13
#   CHANGED BY:
#-----------------------------------------------------------------------------
#   Global variables:							  {%+}
#-----------------------------------------------------------------------------
undo_stack=
undo_exit0=

#-------------------------------------------------------------------------{%-}
#   undo_init(TAG)		Set cleanups tag for successful exit
#-------------------------------------------------------------------------{%+}
undo_init () {
    case $1 in				# Tag is valid?
	:*) undo_exit0=$1	;;	# Yes, set cleanups tag.
	*)  return 1		;;	# No, indicate failure!
    esac
}

#-------------------------------------------------------------------------{%-}
#   undo_push([TAG] COMMAND [ARGUMENT|REDIRECTION ...])
#				Push (tagged) command onto undo stack
#-------------------------------------------------------------------------{%+}
undo_push () {
    local tag

    case $1 in :*) tag=" $CS$1"; shift;; esac
					# Conditionally fetch tag.
    undo_stack="`quote_command ${1+"$@"}`$tag$NL$undo_stack"
					# Push (tagged) command onto stack.
}

#-------------------------------------------------------------------------{%-}
#   undo_drop(TAG|[COUNT=1])	Drop (tagged) command(s) from undo stack
#-------------------------------------------------------------------------{%+}
undo_drop () {
    local script

    case $1 in
	:*) script='/#'"$1"'$/d';;
	*)  script="1${1+,$1}d"	;;
    esac
    undo_stack=`echo "$undo_stack" | sed "$script"`
}

#-------------------------------------------------------------------------{%-}
#   undo_pull(TAG|[COUNT=1])	Apply and drop (tagged) command(s)
#-------------------------------------------------------------------------{%+}
undo_pull () {
    local script

    case $1 in
	:*) script='/#'"$1"'$/p';;
	*)  script="1${1+,$1}p"	;;
    esac
    eval "`echo "$undo_stack" | sed -n "$script"`"
    undo_drop ${1+"$1"}
}

#-------------------------------------------------------------------------{%-}
#   undo_exit(STATUS)		Apply cleanups/undos
#
#   NOTE:   (1)	This function is registered for invocation by dl_exit()!
#-------------------------------------------------------------------------{%+}
undo_exit () {
    case ${1-1}$undo_exit0 in		# Exit with...
	0)				# ...success and cleanups tag unset?
	    ;;				# What's done is done.
	0:*)				# ...success and cleanups tag set?
	    eval "`echo "$undo_stack" | grep '#'"$undo_exit0"'$'`"
	    ;;				# Pick and apply cleanups.
	*)				# ...failure?
	    eval "$undo_stack"		# Apply undos.
	    ;;
    esac
}

#-------------------------------------------------------------------------{%-}
#   Initialization:
#-------------------------------------------------------------------------{%+}
dl_load quote && dl_atexit undo_exit
