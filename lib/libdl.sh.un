#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libdl.sh			- Demand-loading library
#
#   Copyright Â© 2013-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-12
##  CHANGED BY:	ks	2015-04-23	Implement meta operations.
##					Lay session concept foundation.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##		ks	2017-02-11	Canonify LSP items in 'pre libpath'
##					meta operation.
##		ks	2017-07-01	Add service function dl_dump().
##		ks	2017-07-08	Add service function dl_split().
##		ks	2018-02-26	Overhaul dl_split().
##		ks	2020-05-03	Add 'meta get-apis r/o'.
##		ks	2020-05-12	Become aware of relocated installa-
##					tions.
##					Limit valid 'meta session' operations.
##		ks	2021-05-01	'set -u'-harden dl_meta().
##		ks	2021-05-07	'set -u'-harden dl_split(), dl_dump(),
##					and dl_which().
##		ks	2021-05-08	Make 'dl_meta get apis' sed(1) expr.
##					labels portable.
##		ks	2021-05-12	Remove LIBDL_SH_DESTDIR nonsense.
##		ks	2021-05-14	Prepare for multiple API versions.
##		ks	2021-05-15	Add dl_readonly() and use it to freeze
##					variables.
##		ks	2021-05-16	'set -u'-harden dl_readonly().
##					Add dl_apis() and use it to emit API
##					information.
##		ks	2021-05-18	Add special characters '[' and ']'.
##		ks	2021-05-25	Make constant's API table entries API
##					version-independent.
##		ks	2021-02-26	Add service function dl_inform().
##
##  NOTE:   (1)	To avoid cluttering code, this library is exempted from need-
##		ing namespace prefixes for its special character definitions.
##	    (2)	The below line assigning special characters MUST contain an
##		embedded \r (ASCII CR)! Because there are editors may get
##		wrong ideas about such content (like, e.g. KDE's Advanced Text
##		Editor kate(1)), the test suite checks for this. Should the
##		particular test fail while running the test suite, you need
##		to restore the embedded \r with a different editor (like,
##		e.g. vi(1)) and re-run the test suite.
##----------------------------------------------------------------------------
##  Define special characters:
##							  .- see note (2)
#---------------------------------------------------------v-------------------
BQ=\` DQ=\" SQ=\' BS=\\ CS=\# DS=\$ HS=\! QB=\` QE=\' CR='' NL='
' LB=\[ RB=\]
readonly BQ DQ SQ BS CS DS HS QB QE CR NL LB RB

##----------------------------------------------------------------------------
##  Global variables:
##----------------------------------------------------------------------------
dl_cs_ul=ABCDEFGHIJKLMNOPQRSTUVWXYZ	## Define locale-independent character
dl_cs_ll=abcdefghijklmnopqrstuvwxyz	## sets for upper-/lower-case letters,
dl_cs_1d=123456789			## decimal digits, letters and alpha-
dl_cs_0d=0$dl_cs_1d			## numerics as well as unanchored REs
dl_cs_al=$dl_cs_ul$dl_cs_ll		## recognizing sh(1) special char.s/
dl_cs_an=$dl_cs_al$dl_cs_0d		## identifiers, and cardinal numbers.
dl_cs_sh=']({< 	'"$CR$BQ$DQ$SQ$BS$CS$DS$HS"'~?*|;&>})['
dl_re_id='[_'"$dl_cs_al"'][_'"$dl_cs_an"']*'
dl_re_1n='['"$dl_cs_1d"']['"$dl_cs_0d"']*'
dl_re_0n='['"$dl_cs_0d"']['"$dl_cs_0d"']*'
readonly dl_cs_ul dl_cs_ll dl_cs_1d dl_cs_0d dl_cs_al dl_cs_an		\
	 dl_re_id dl_re_1n dl_re_0n

dl_package=@PACKAGE_TARNAME@		## Define source package name
dl_version=@PACKAGE_VERSION@		## and version.
dl_libpath=`libdl-sh path` || exit 127	## Determine LSP or abort!
dl_loaded=:dl:				## Register this library as loaded
dl_needed=				## and none as needing to be loaded.
dl_atexits='exit $status'		## Preset exit-hook's command.
readonly dl_package dl_version; unset dl_ro dl_api dl_atloads dl_session
					## Discard spurious environment.

##----------------------------------------------------------------------------
##  dl_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
dl_meta() {
    local mp=dl_ ms=\;			## Set meta prefix and separator.

    case ${2+=}${1+$1-}${2-} in		## Which META operation?
	=get-apis)			## Inquire APIs...
	    shift 2 && dl_apis ${1+"$@"} <<EOF
a${ms}1
f${ms}1${ms}meta(META [ARG ...])${ms}2-
f${ms}1${ms}inform(ABOUT [AARG ...] FUNC [FARG ...])${ms}4-
f${ms}1${ms}apis([FORMAT=api [SEDEX]])${ms}0-2
f${ms}1${ms}dump(MP VS ...)${ms}2-
f${ms}1${ms}readonly(LIB VS [VALUE])${ms}2-3
f${ms}1${ms}split(WORD IFS &FIELD ...)${ms}3-
f${ms}1${ms}which(LIB)${ms}1
f${ms}1${ms}atload(HOOK)${ms}1
f${ms}1${ms}load(LIB ...)${ms}1-
f${ms}1${ms}atexit(HOOK)${ms}1
f${ms}1${ms}exit([STATUS=\$?])${ms}0-1
R${ms}BQ
R${ms}DQ
R${ms}SQ
R${ms}BS
R${ms}CS
R${ms}DS
R${ms}HS
R${ms}QB
R${ms}QE
R${ms}CR
R${ms}NL
R${ms}LB
R${ms}RB
r${ms}cs_ul
r${ms}cs_ll
r${ms}cs_1d
r${ms}cs_0d
r${ms}cs_al
r${ms}cs_an
r${ms}re_id
r${ms}re_1n
r${ms}re_0n
EOF
	    ;;
	=get-package|=get-version|=get-api|=get-libpath|=get-loaded|	\
	=get-session)			## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	=pre-libpath)			## Prepend to library search path...
	    case ${3+=} in		## One or more path items given?
		=)  local ifs vs=$2 items= item; shift 2
		    ifs=$IFS; IFS=:; set shiftee $*; shift; IFS=$ifs
		    for item in ${1+"$@"}; do
					## Yes, foreach item do...
			item=`cd "$item" 2>/dev/null && /bin/pwd` &&
			    items=$items$item:
		    done; eval "$mp$vs"'=$items$'"$mp$vs"
					## Canonify and prepend it to library
		    ;;			## search path if it does exist.
		*)  return 2		## No, indicate misuse!
		    ;;
	    esac
	    ;;
	=set-session)			## Set session ID...
	    case ${4+4}${3+=} in	## Usage OK?
		=)  eval "$mp$2"'=$3'	## Yes, set session ID.
		    ;;
		*)  return 2		## No, indicate abuse!
		    ;;
	    esac
	    ;;
	=set-*)				## Set internal variable once...
	    case ${4+4}${3+=}$2 in	## Usage OK?
		=api)	${mp}meta get apis | fgrep -qxe "$3"
			;;		## Yes, try to validate API version.
		*)	return 2	## No, indicate abuse!
			;;
	    esac && dl_readonly dl "$2" "$3"
	    ;;
	=session-init|=session-load|=session-dump|=session-exit)
	    :				## Session init/load/dump/exit...
	    ;;				## ...is a no-op.
	*)  return 2			## Anything else...
	    ;;				## ...is abuse!
    esac
}

##----------------------------------------------------------------------------
##  dl_inform(ABOUT [AARG ...] FUNC [FARG ...])
##				Inform user about deprecated and/or withdrawn
##				features and abort application if necessary
##----------------------------------------------------------------------------
dl_inform() {
    local status=0 about drel wrel crel wapi capi func ifs args invo lib

    case ${5+5}${4+4}${1+=$1} in	## Usage OK?
	*4=rel-req-set-api|*4=rel-wdr-meta)
	    about=$1 wrel=$2 crel=$3 func=$4;		shift 4	;;
	*4=api-wdr-func)
	    about=$1 wapi=$2 capi=$3 func=$4;		shift 4	;;
	54=rel-dpr-func)
	    about=$1 drel=$2 wrel=$3 crel=$4 func=$5;	shift 5	;;
	*)  return 2	;;		## No, indicate abuse!
    esac; ifs=$IFS; IFS=,; args=$*; IFS=$ifs; eval "`sed '
	:N'"$NL"'$!{;N;bN'"$NL"'}
	s/'"$BS$NL"'/<NL>/g;s/'"$CR"'/<CR>/g;s/	/<HT>/g;s/ /<SP>/g;s/'"$SQ"'/&'"$BS$BS"'&&/g
	s/^//;t0'"$NL"':0
	s/^\([^(;)][^(;)]*\);\([^(;)]*\)\((.*)\)$/invo='"$SQ"'\1\2\3'"$SQ"' lib='"$SQ"'\1'"$SQ"' func='"$SQ"'\1\2'"$SQ"'/;tp
	s/^\([^(;_)][^(;_)]*\)_\([^(;)]*\)(.*)$/invo='"$SQ"'&'"$SQ"' lib='"$SQ"'\1'"$SQ"' func='"$SQ"'\1_\2'"$SQ"'/;tp
	s/^\([^(;_)][^(;_)]*\)(.*)$/invo='"$SQ"'&'"$SQ"' lib='"$SQ"'\1'"$SQ"'; func=$lib/;tp
	s/^/invo='"$SQ"'/;s/$/'"$SQ"'/;:p
    ' <<EOF
$func([$#]$args)
EOF`"					## Rewrite invocation.
    case $dl_loaded in			## Library loaded?
	*:${lib-}:*)			## Yes, try to determine package...
	    package=`${lib}_meta get package` || unset package
	    version=`${lib}_meta get version` || unset version
	    ;;				## ...name and version.
    esac; case ${lib+=}$about in
	=rel-req-set-api)		## Release requires set API version...
	    cat >&2 <<EOF
$invo; CAUTION!
Function invoked without API version of lib$lib.sh being selected before,
which is required since release $wrel. Chances are that your application
still wants to use a withdrawn API version. To prevent serious damage, the
application is aborted now!

Downgrade package ${package-} to release $crel to make the application
work again.
EOF
	    exit 127
	    ;;
	=rel-dpr-func)			## Release deprecated function...
	    verscmp --target=fast -- "${version-}" lt-nl "$drel" 2>/dev/null || {
		cat >&2 <<EOF
$invo; WARNING:
Function deprecated since release $drel, to be withdrawn by release $wrel.
See lib$lib(3SH) for suggestions on how to migrate your application or
downgrade package ${package-} to release $crel.
EOF
	    }
	    ;;
	=api-wdr-func)			## API version withdrew function...
	    cat >&2 <<EOF
$invo; WARNING:
Function withdrawn from API version $wapi of lib$lib.sh.
See lib$lib(3SH) for suggestions on how to migrate your application or
stay with (probably deprecated) API version $capi for the time being.
EOF
	    status=127
	    ;;
	=rel-wdr-meta)			## Release withdrew meta operation...
	    verscmp --target=fast -- "${version-}" lt-nl "$wrel" 2>/dev/null || {
		cat >&2 <<EOF
$invo; WARNING:
Meta operation withdrawn since release $wrel.
See lib$lib(3SH) for suggestions on how to migrate your application or
downgrade package ${package-} to release $crel.
EOF
		status=2
	    }
	    ;;
	*)				## Catch-all...
	    echo "$*; OOPS!" >&2
	    status=3
	    ;;
    esac; return $status
}

##----------------------------------------------------------------------------
##  dl_apis([FORMAT=api [SEDEX]])
##				'get apis' meta operation helper
##
##  NOTE:   (1)	Invoker must provide API information on standard input!
##
##  Non-local variables:
##	- mp		(R) Meta prefix
##	- ms[=;]	(R) Meta separator
##----------------------------------------------------------------------------
dl_apis() {
    local all='
	s/^F'"${ms-;}"'/f'"${ms-;}"'/;t_a
	s/^R'"${ms-;}"'/r'"${ms-;}"'/;t_a
	s/^f'"${ms-;}"'[^'"${ms-;}"']*'"${ms-;}"'/&'"$mp"'/;t_a
	s/^r'"${ms-;}"'/&'"$mp"'/;t_a
	/^a'"${ms-;}"'/!d;:_a
    ' tf="$BS([^${ms-;}]*${ms-;}$BS)" uf="$BS([^${ms-;}]*$BS)"
    local pa="s/^a${ms-;}//;t_s${NL}d;:_s"				\
	  pf="s/^f${ms-;}//;t_s${NL}d;:_s"				\
	  pr="s/^r${ms-;}//;t_s${NL}d;:_s"				\
	 d2a="${NL}s/([^)${ms-;}(]*)//;t_2$NL:_2"			\
	  f1="${NL}s/^$uf.*$DS/${BS}1/;t_f${NL}:_f"			\
	f123="${NL}s/^$tf$tf$uf.*$DS/${BS}1${BS}2${BS}3/;t_f${NL}:_f"

    case ${1-api} in			## Which format?
	all)	sed "$all${2-}"			;;
	api)	sed "$all$pa$f1"		;;
	full)	sed "$all$pf$f123${2+$NL$2}"	;;
	list)	sed "$all$pf$d2a$f123${2+$NL$2}";;
	r/o)	sed "$all$pr$f1${2+$NL$2}"	;;
	*)	return 1			;;
    esac
}

##----------------------------------------------------------------------------
##  dl_dump(MP VS ...)		Dump library's variables
##
##  NOTE:   (1)	The invoker is responsible for redirecting standard output!
##----------------------------------------------------------------------------
dl_dump() {
    case ${2+=}${1-} in			## Usage OK/meta prefix basically OK?
	=?*_)	local mp="$1" vs;;	## Y/Y: Fetch meta prefix.
	=*)	return 1	;;	## Y/N: Indicate failure!
	*)	return 2	;;	## N/?: Indicate abuse!
    esac

    local sx0=':0'"$NL"'$!{;N;b0'"$NL"'};s/'"$SQ"'/&'"$BS$BS"'&&/g;s/^/'\
	  sx1='='"$SQ"'/;s/$/'"$SQ"'/'
					## Fetch meta prefix.
    shift; for vs in ${1+"$@"}; do	## Foreach stem do...
	eval 'case ${'"$mp$vs"'+=} in
	    =)	sed "$sx0$mp$vs$sx1" <<EOF
$'"$mp$vs"'
EOF
		;;
	    *)	echo unset '"$mp$vs"'
		;;
	esac'
    done
}

##----------------------------------------------------------------------------
##  dl_readonly(LIB VS [VALUE])	(Set and) freeze library's variable
##----------------------------------------------------------------------------
dl_readonly() {
    case ${4+4}${3+3}${2+2$dl_loaded$dl_needed} in
					## Usage OK?/LIBrary loaded or needed?
	3*:${1+$1:}*)			## Y/Y: Variable still settable?
	    eval 'case ${'"$1_$2"'+=$'"$1_$2"'}${'"$1_"'ro-:} in
		=$3:*)			## Maybe, but ignore idempotence.
		    ;;
		=*:$2:*)		## No, indicate failure!
		    return 1
		    ;;
		*)  '"$1_$2"'=$3 '"$1_"'ro=${'"$1_"'ro-:}$2:; readonly '"$1_$2"'
		    ;;			## Yes, set and freeze it.
	    esac'
	    ;;
	2*:${1+$1:}*)			## Y/Y: Variable still freezable?
	    eval 'case ${'"$1_"'ro-:} in
		*:$2:*)			## No, indicate failure!
		    return 1
		    ;;
		*)  '"$1_"'ro=${'"$1_"'ro-:}$2:; readonly '"$1_$2"'
			;;		## Yes, freeze it.
	    esac'
	    ;;
	*)  return 2			## N/?: Indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  dl_split(WORD IFS &FIELD ...)
##				Split WORD by IFS into FIELDs
##----------------------------------------------------------------------------
dl_split() {
    case ${3+=} in			## At least one &FIELD given?
	=)  local word="$1" nifs="$2" oifs
	    shift 2	;;		## Yes, fetch WORD and IFS.
	*)  return 2	;;		## No, indicate abuse!
    esac; eval "`awk '
	BEGIN {
	    print "oifs=$IFS; IFS=$nifs; set shiftee $word; IFS=$oifs"
	}
	{
	    while (++i <= NF) if ($i ~ /^'"$dl_re_id"'$/)
		if ($i ~ /^([on]ifs|word)$/)
		    ++ec
		else
		    printf "case ${%u+=} in =) %s=$%u;; *) unset %s;; esac\n",i+1,$i,i+1,$i
	}
	END {
	    if (ec) print "return 1"
	}
    ' <<EOF
$*
EOF`"
}

##----------------------------------------------------------------------------
##  dl_which(LIB)		Locate LIBrary on library search path
##----------------------------------------------------------------------------
dl_which() {
    case ${1+=} in			## Usage OK?
	=)  local ifs lib="$1" item ;;	## Yes, fetch LIB.
	*)  return 2		    ;;	## No, indicate abuse!
    esac; ifs=$IFS; IFS=:; set shiftee `sed '
	s/^/:/;s/$/:/;:1		## Let empty items explicitly refer
	s/::/:.:/g;t1			## to '.' on the combined library
	s/^://;s/:$//			## search path.
    ' <<EOF
$dl_libpath${PATH+:$PATH}
EOF`; shift; IFS=$ifs			## Split combined library search path.
    for item in ${1+"$@"}; do		## Locate library...
	test -f "$item/lib$lib.sh" && echo "$item/lib$lib.sh" && return
    done; return 127
}

##----------------------------------------------------------------------------
##  dl_atload(HOOK)		Register load-time hook
##----------------------------------------------------------------------------
dl_atload() {
    local hook

    case ${1+=} in			## Usage OK?
	=)  hook=`expr "_$1" : '_\('"$dl_re_id"'\)$'` || return 1
			;;		## Yes, try to validate HOOK.
	*)  return 2	;;		## No, indicate abuse!
    esac; case ${dl_atloads+=} in	## 1st invocation?
	=)  dl_atloads="$hook $DQ${DS}lib$DQ && $dl_atloads"
	    ;;				## No, register load-time hook.
	*)  dl_atloads="$hook $DQ${DS}lib$DQ || dl_exit 127"
					## Yes, register load-time hook with
					## failure handling and...
	    local lib=dl; eval "$dl_atloads"
	    ;;				## ...exercise it for this library.
    esac
}

##----------------------------------------------------------------------------
##  dl_load(LIB ...)		Load demanded libraries
##----------------------------------------------------------------------------
dl_load() {
    local lib needed path

    case ${1+=}${dl_needed+:$dl_needed} in
					## Usage OK/Augment path?
	=:) path=$PATH; PATH=$dl_libpath$PATH
	    ;;				## Yes/Yes: Save and augment path.
	=:*);;				## Yes/No.
	=)  return 3			## Yes, but $dl_needed unset...
	    ;;				## Indicate internal error!
	*)  return 2			## No...
	    ;;				## No, indicate abuse!
    esac; for lib in "$@"; do		## Foreach demanded LIBrary do...
	case $dl_loaded$dl_needed in	## Is it already loaded or needed?
	    *:$lib:*)			## Yes, skip it.
		;;
	    *)	needed=$dl_needed; dl_needed=$dl_needed$lib:
		. "lib$lib.sh" || dl_exit 127
		dl_needed=$needed; dl_loaded=:$lib$dl_loaded
		eval "${dl_atloads-:}"	## No, mark it as needed, load it,
		;;			## mark it as loaded, and invoke load-
	esac				## time hooks.
    done; case ${dl_needed+:$dl_needed} in
	:)  PATH=$path	;;		## Restore path when necessary.
    esac
}

##----------------------------------------------------------------------------
##  dl_atexit(HOOK)		Register exit-time hook
##----------------------------------------------------------------------------
dl_atexit() {
    local hook

    case ${1+=} in			## Usage OK?
	=)  hook=`expr "_$1" : '_\('"$dl_re_id"'\)$'` || return 1
			;;		## Yes, try to validate HOOK.
	*)  return 2	;;		## No, indicate abuse!
    esac
    dl_atexits="$hook ${DS}status; $dl_atexits"
}					## Register exit-time hook.

##----------------------------------------------------------------------------
##  dl_exit([STATUS=$?])	Terminate program with STATUS
##----------------------------------------------------------------------------
dl_exit() {
    local status=`expr 0 + "${1-$?}" 2>/dev/null` || status=2
    set +eu; trap '' 0			## Fetch exit status ($dl_atexits re-
    eval "$dl_atexits"			## fers to it!), disable sh(1)'s err-
					## exit and nounset options, unregis-
					## ter exit trap, and invoke exit-time
}					## hooks.

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
dl_readonly dl api 1 && trap 'dl_exit $?' 0
					## Set sole API version once and
					## register exit trap.
