#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libdl.sh			- Demand-loading library
#
#   Copyright (C) 2013-2015 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-12
##  CHANGED BY:	ks	2015-04-23	Implement meta operations.
##					Lay session concept foundation.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
dl_api=1				## Define API version.
dl_libpath=`@bindir@/libdl-sh path` || exit 127
dl_atloads=:
dl_atexits='exit $status'
dl_session=
dl_loaded=:dl:
dl_needed=
readonly dl_api

##----------------------------------------------------------------------------
##  dl_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
dl_meta () {
    case $1-$2 in			## Which META operation?
	get-apis)			## Inquire APIs...
	    cat <<EOF
$dl_api:,meta,which,atload,load,atexit,exit,
EOF
	    ;;
	get-api|get-libpath|get-atloads|get-atexits|get-session|get-loaded)
					## Inquire internal variable...
	    eval 'echo "$dl_'"$2"'"'		;;
	pre-libpath)			## Prepend to library search path...
	    eval 'dl_'"$2"'=${3+$3:}$dl_'"$2"	;;
	set-session)			## Set session ID...
	    eval 'dl_'"$2"'=$3'			;;
	*)				## Anything else...
	    return 2			## Indicate usage error!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  dl_init(LIBPATH)		Prepend LIBPATH to library search path
##----------------------------------------------------------------------------
dl_init () {
    dl_meta pre libpath ${1+"$1"}
}

##----------------------------------------------------------------------------
##  dl_which(LIB)		Locate LIBrary on library search path
##----------------------------------------------------------------------------
dl_which () {
    local ifs lib="$1" item

    ifs=$IFS; IFS=:; set shiftee `sed '
	s/^/:/;s/$/:/;:1		## Let empty items explicitly refer
	s/::/:.:/g;t1			## to '.' on the combined library
	s/^://;s/:$//			## search path.
    ' <<EOF
$dl_libpath${PATH+:$PATH}
EOF`; shift; IFS=$ifs			## Split combined library search path.
    for item in ${1+"$@"}; do		## Locate library...
	test -f "$item/lib$lib.sh" && echo "$item/lib$lib.sh" && return
    done; return 127
}

##----------------------------------------------------------------------------
##  dl_atload(HOOK)		Register load-time hook
##----------------------------------------------------------------------------
dl_atload () {
    dl_atloads="${1-:} "'$lib'" && $dl_atloads"
}

##----------------------------------------------------------------------------
##  dl_load(LIB ...)		Load demanded libraries
##----------------------------------------------------------------------------
dl_load () {
    local lib needed path

    case $dl_needed in
	'') path=$PATH; PATH=$dl_libpath${PATH+:$PATH}	;;
    esac				## Augment path when necessary.
    for lib in ${1+"$@"}; do		## Foreach demanded library do...
	case $dl_loaded$dl_needed in	## Is it already loaded or needed?
	    *:$lib:*)			## Yes, skip it.
		;;
	    *)	needed=$dl_needed; dl_needed=$dl_needed$lib:
		. "lib$lib.sh" || dl_exit 127
		dl_needed=$needed; dl_loaded=:$lib$dl_loaded
		eval "$dl_atloads" || dl_exit $?
					## No, mark it as needed, load it,
		;;			## mark it as loaded, and invoke load-
	esac				## time hooks.
    done
    case $dl_needed in
	'') PATH=$path	;;		## Restore path when necessary.
    esac
}

##----------------------------------------------------------------------------
##  dl_atexit(HOOK)		Register exit-time hook
##----------------------------------------------------------------------------
dl_atexit () {
    dl_atexits="$1 "'$status'"; $dl_atexits"
}

##----------------------------------------------------------------------------
##  dl_exit([STATUS=$?])	Terminate program with STATUS
##----------------------------------------------------------------------------
dl_exit () {
    local status="${1-$?}"		## Fetch exit status ($dl_atexits re-
					## fers to it!), unregister exit trap,
    trap '' 0; eval "$dl_atexits"	## and invoke exit-time hooks.
}

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
trap 'dl_exit $?' 0
