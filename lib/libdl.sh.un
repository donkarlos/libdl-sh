#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libdl.sh			- Demand-loading library
#
#   Copyright Â© 2013-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-12
##  CHANGED BY:	ks	2015-04-23	Implement meta operations.
##					Lay session concept foundation.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-23	Add service function dl_warn().
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##					Make dl_warn() usable for other packa-
##					ges.
##		ks	2017-02-11	Canonify LSP items in 'pre libpath'
##					meta operation.
##		ks	2017-07-01	Add service function dl_dump().
##		ks	2017-07-08	Add service function dl_split().
##		ks	2018-02-26	Overhaul dl_split().
##		ks	2020-05-03	Add 'meta get-apis r/o'.
##		ks	2020-05-12	Become aware of relocated installa-
##					tions.
##					Limit valid 'meta session' operations.
##		ks	2021-05-01	'set -u'-harden dl_meta().
##		ks	2021-05-06	Make dl_warn() indicate usage errors.
##					'set -u'-harden dl_warn().
##					Work around nasty (GNU) sed(1) regres-
##					sion affecting dl_warn().
##		ks	2021-05-07	'set -u'-harden dl_split().
##					'set -u'-harden dl_dump().
##
##  NOTE:   (1)	To avoid cluttering code, this library is exempted from need-
##		ing namespace prefixes for its special character definitions.
##	    (2)	The below line assigning special characters MUST contain an
##		embedded \r (ASCII CR)! Because there are editors may get
##		wrong ideas about such content (like, e.g. KDE's Advanced Text
##		Editor kate(1)), the test suite checks for this. Should the
##		particular test fail while running the test suite, you need
##		to restore the embedded \r with a different editor (like,
##		e.g. vi(1)) and re-run the test suite.
##----------------------------------------------------------------------------
##  Define special characters:
##							  .- see note (2)
#---------------------------------------------------------v-------------------
BQ=\` DQ=\" SQ=\' BS=\\ CS=\# DS=\$ HS=\! QB=\` QE=\' CR='' NL='
'
readonly BQ DQ SQ BS CS DS HS QB QE CR NL

##----------------------------------------------------------------------------
##  Global variables:
##----------------------------------------------------------------------------
dl_cs_ul=ABCDEFGHIJKLMNOPQRSTUVWXYZ	## Define locale-independent character
dl_cs_ll=abcdefghijklmnopqrstuvwxyz	## sets for upper-/lower-case letters,
dl_cs_1d=123456789			## decimal digits, letters and alpha-
dl_cs_0d=0$dl_cs_1d			## numerics as well as unanchored REs
dl_cs_al=$dl_cs_ul$dl_cs_ll		## recognizing sh(1) special char.s/
dl_cs_an=$dl_cs_al$dl_cs_0d		## identifiers, and cardinal numbers.
dl_cs_sh=']({< 	'"$CR$BQ$DQ$SQ$BS$CS$DS$HS"'~?*|;&>})['
dl_re_id='[_'"$dl_cs_al"'][_'"$dl_cs_an"']*'
dl_re_1n='['"$dl_cs_1d"']['"$dl_cs_0d"']*'
dl_re_0n='['"$dl_cs_0d"']['"$dl_cs_0d"']*'
dl_package='@PACKAGE_TARNAME@'		## Define source package name/version.
dl_version='@PACKAGE_VERSION@'
dl_api=1				## Define API version.
dl_libpath=`libdl-sh path` || exit 127	## Determine LSP or abort!
dl_loaded=:dl:				## Register this library as loaded.
dl_needed=
dl_atexits='exit $status'		## Preset exit-hook's command.
readonly dl_cs_ul dl_cs_ll dl_cs_1d dl_cs_0d dl_cs_al dl_cs_an dl_re_id	\
	 dl_re_1n dl_re_0n dl_package dl_version dl_api
unset dl_destdir dl_atloads dl_session	## Discard spurious environment.

##----------------------------------------------------------------------------
##  dl_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
dl_meta() {
    local mp=dl_			## Set meta prefix.

    case ${2+=}${1+$1-}${2-} in		## Which META operation?
	=get-apis)			## Inquire APIs...
	    local sx ms=\;
	    local fa='/^a'"$ms"'/!d;s///' da=';s/([^)'"$ms"'(]*)//'	\
		  ff='/^F'"$ms"'/{;s///;t2;};/^f'"$ms"'/!d;s///'	\
		  fr='/^R'"$ms"'/{;s///;t2;};/^r'"$ms"'/!d;s///'	\
		  p2=';s/'"$ms"'/&'"$mp"'/;:2'
	    case ${3-api} in		## Which format?
		api)	sx="$fa"		;;
		full)   sx="$ff$p2${4+;$4}"	;;
		list)	sx="$ff$p2$da${4+;$4}"	;;
		r/o)	sx="$fr$p2${4+;$4}"	;;
		*)	return 1		;;
	    esac
	    sed "$sx" <<EOF
a${ms}$dl_api
f${ms}$dl_api${ms}meta(META [ARG ...])${ms}2-
f${ms}$dl_api${ms}warn(WHAT INVO [ARG ...])${ms}2-5
f${ms}$dl_api${ms}dump(MP VS ...)${ms}2-
f${ms}$dl_api${ms}split(WORD IFS &FIELD ...)${ms}3-
f${ms}$dl_api${ms}which(LIB)${ms}1
f${ms}$dl_api${ms}atload(HOOK)${ms}1
f${ms}$dl_api${ms}load(LIB ...)${ms}1-
f${ms}$dl_api${ms}atexit(HOOK)${ms}1
f${ms}$dl_api${ms}exit([STATUS=\$?])${ms}0-1
R${ms}$dl_api${ms}BQ
R${ms}$dl_api${ms}DQ
R${ms}$dl_api${ms}SQ
R${ms}$dl_api${ms}BS
R${ms}$dl_api${ms}CS
R${ms}$dl_api${ms}DS
R${ms}$dl_api${ms}HS
R${ms}$dl_api${ms}QB
R${ms}$dl_api${ms}QE
R${ms}$dl_api${ms}CR
R${ms}$dl_api${ms}NL
r${ms}$dl_api${ms}cs_ul
r${ms}$dl_api${ms}cs_ll
r${ms}$dl_api${ms}cs_1d
r${ms}$dl_api${ms}cs_0d
r${ms}$dl_api${ms}cs_al
r${ms}$dl_api${ms}cs_an
r${ms}$dl_api${ms}re_id
r${ms}$dl_api${ms}re_1n
r${ms}$dl_api${ms}re_0n
EOF
	    ;;
	=get-package|=get-version|=get-api|=get-libpath|=get-loaded|	\
	=get-destdir|=get-session)	## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	=pre-libpath)			## Prepend to library search path...
	    case ${3+=} in		## One or more path items given?
		=)  local ifs vs=$2 items= item; shift 2
		    ifs=$IFS; IFS=:; set shiftee $*; shift; IFS=$ifs
		    for item in ${1+"$@"}; do
					## Yes, foreach item do...
			item=`cd "$item" 2>/dev/null && /bin/pwd` &&
			    items=$items$item:
		    done; eval "$mp$vs"'=$items$'"$mp$vs"
					## Canonify and prepend it to library
		    ;;			## search path if it does exist.
		*)  return 2		## No, indicate misuse!
		    ;;
	    esac
	    ;;
	=set-session)			## Set session ID...
	    case ${3+=} in		## Usage OK?
		=)  eval "$mp$2"'=$3'	## Yes, set session ID.
		    ;;
		*)  return 2		## No, indicate abuse!
		    ;;
	    esac
	    ;;
	=session-init|=session-load|=session-dump|=session-exit)
	    :				## Session init/load/dump/exit...
	    ;;				## ...is a no-op.
	*)  return 2			## Anything else...
	    ;;				## ...is abuse!
    esac
}

##----------------------------------------------------------------------------
##  dl_warn(WHAT INVO [ARG ...])
##				Warn user about deprecated and/or withdrawn
##				features and abort application if necessary
##----------------------------------------------------------------------------
dl_warn() {
    case ${6+6}${2+2} in		## Usage OK?
	2)  local lib invo package  ;;	## Yes, declare local variables.
	*)  return 2		    ;;	## No, indicate abuse!
    esac; eval "`sed '
	:0'"$NL"'$!{;N;b0'"$NL"'}
	s/'"$BS$NL"'/'"$BS$BS"'n/g
	s/'"$SQ"'/&'"$BS$BS"'&&/g
	/^'"$dl_re_id"';/{
	    s/^\([^;]*\);\(.*\)$/lib=\1 invo='"$SQ"'\1\2'"$SQ"' package='"$BQ"'\1_meta get package || echo PACKAGE'"$BQ"'/;bp
	};s/^/lib=LIB invo='"$SQ"'/;s/$/'"$SQ"' package=PACKAGE/;:p
    ' <<EOF
$2
EOF`"					## If possible, derive library and
					## package from INVOcation.
    case $1 in				## Warn user about WHAT?
	rel-req-set-api)		## Release requires set API version...
	    cat >&2 <<EOF		## [WREL CREL]
$invo; CAUTION!
Function invoked without API version of lib$lib.sh being selected before,
which is required since release ${3-WREL}. I presume the application still wants
to use a withdrawn API version. To prevent serious damage, the application
is terminated now!

Downgrade package $package to release ${4-CREL} to make the application
work again.
EOF
	    exit 127
	    ;;
	rel-dpr-func)			## Release deprecated function...
	    cat >&2 <<EOF		## [DREL WREL CREL]
$invo; WARNING:
Function deprecated since release ${3-DREL}, to be withdrawn by release ${4-WREL}.
See lib$lib(3SH) for suggestions on how to migrate your application or
downgrade package $package to release ${5-CREL}.
EOF
	    return 0
	    ;;
	api-wdr-func)			## API version withdrew function...
	    cat >&2 <<EOF		## [WAPI CAPI]
$invo; WARNING:
Function withdrawn from API version ${3-WAPI} of lib$lib.sh.
See lib$lib(3SH) for suggestions on how to migrate your application or
stay with (probably deprecated) API version ${4-CAPI} for the time being.
EOF
	    ;;
	rel-wdr-meta)			## Release withdrew meta operation...
	    cat >&2 <<EOF		## [WREL CREL]
$invo; WARNING:
Meta operation withdrawn since release ${3-WREL}.
See lib$lib(3SH) for suggestions on how to migrate your application or
downgrade package $package to release ${4-CREL}.
EOF
	    ;;
	*)				## Catch-all...
	    echo "$*; OOPS!" >&2
	    ;;
    esac; return 1
}

##----------------------------------------------------------------------------
##  dl_dump(MP VS ...)		Dump library's variables
##
##  NOTE:   (1)	The invoker is responsible for redirecting standard output!
##----------------------------------------------------------------------------
dl_dump() {
    case ${2+=}${1-} in			## Usage OK/meta prefix basically OK?
	=?*_)	local mp="$1" vs;;	## Y/Y: Fetch meta prefix.
	=*)	return 1	;;	## Y/N: Indicate failure!
	*)	return 2	;;	## N/?: Indicate abuse!
    esac

    local sx0=':0'"$NL"'$!{;N;b0'"$NL"'};s/'"$SQ"'/&'"$BS$BS"'&&/g;s/^/'\
	  sx1='='"$SQ"'/;s/$/'"$SQ"'/'
					## Fetch meta prefix.
    shift; for vs in ${1+"$@"}; do	## Foreach stem do...
	eval 'case ${'"$mp$vs"'+=} in
	    =)	sed "$sx0$mp$vs$sx1" <<EOF
$'"$mp$vs"'
EOF
		;;
	    *)	echo unset '"$mp$vs"'
		;;
	esac'
    done
}

##----------------------------------------------------------------------------
##  dl_split(WORD IFS &FIELD ...)
##				Split WORD by IFS into FIELDs
##----------------------------------------------------------------------------
dl_split() {
    case ${3+=} in			## At least one &FIELD given?
	=)  local word="$1" nifs="$2" oifs
	    shift 2	;;		## Yes, fetch WORD and IFS.
	*)  return 2	;;		## No, indicate abuse!
    esac; eval "`awk '
	BEGIN {
	    print "oifs=$IFS; IFS=$nifs; set shiftee $word; IFS=$oifs"
	}
	{
	    while (++i <= NF) if ($i ~ /^'"$dl_re_id"'$/)
		if ($i ~ /^([on]ifs|word)$/)
		    ++ec
		else
		    printf "case ${%u+=} in =) %s=$%u;; *) unset %s;; esac\n",i+1,$i,i+1,$i
	}
	END {
	    if (ec) print "return 1"
	}
    ' <<EOF
$*
EOF`"
}

##----------------------------------------------------------------------------
##  dl_which(LIB)		Locate LIBrary on library search path
##----------------------------------------------------------------------------
dl_which() {
    local ifs lib="$1" item

    ifs=$IFS; IFS=:; set shiftee `sed '
	s/^/:/;s/$/:/;:1		## Let empty items explicitly refer
	s/::/:.:/g;t1			## to '.' on the combined library
	s/^://;s/:$//			## search path.
    ' <<EOF
$dl_libpath${PATH+:$PATH}
EOF`; shift; IFS=$ifs			## Split combined library search path.
    for item in ${1+"$@"}; do		## Locate library...
	test -f "$item/lib$lib.sh" && echo "$item/lib$lib.sh" && return
    done; return 127
}

##----------------------------------------------------------------------------
##  dl_atload(HOOK)		Register load-time hook
##----------------------------------------------------------------------------
dl_atload() {
    local hook

    case ${1+=} in			## Usage OK?
	=)  hook=`expr "_$1" : '_\('"$dl_re_id"'\)$'` || return 1
			;;		## Yes, try to validate HOOK.
	*)  return 2	;;		## No, indicate abuse!
    esac; case ${dl_atloads+=} in	## 1st invocation?
	=)  dl_atloads="$hook $DQ${DS}lib$DQ && $dl_atloads"
	    ;;				## No, register load-time hook.
	*)  dl_atloads="$hook $DQ${DS}lib$DQ || dl_exit 127"
					## Yes, register load-time hook with
					## failure handling and...
	    local lib=dl; eval "$dl_atloads"
	    ;;				## ...exercise it for this library.
    esac
}

##----------------------------------------------------------------------------
##  dl_load(LIB ...)		Load demanded libraries
##----------------------------------------------------------------------------
dl_load() {
    local lib needed path

    case ${1+=}${dl_needed+:$dl_needed} in
					## Usage OK/Augment path?
	=:) path=$PATH; PATH=$dl_libpath$PATH
	    ;;				## Yes/Yes: Save and augment path.
	=:*);;				## Yes/No.
	=)  return 3			## Yes, but $dl_needed unset...
	    ;;				## Indicate internal error!
	*)  return 2			## No...
	    ;;				## No, indicate abuse!
    esac; for lib in "$@"; do		## Foreach demanded LIBrary do...
	case $dl_loaded$dl_needed in	## Is it already loaded or needed?
	    *:$lib:*)			## Yes, skip it.
		;;
	    *)	needed=$dl_needed; dl_needed=$dl_needed$lib:
		. "lib$lib.sh" || dl_exit 127
		dl_needed=$needed; dl_loaded=:$lib$dl_loaded
		eval "${dl_atloads-:}"	## No, mark it as needed, load it,
		;;			## mark it as loaded, and invoke load-
	esac				## time hooks.
    done; case ${dl_needed+:$dl_needed} in
	:)  PATH=$path	;;		## Restore path when necessary.
    esac
}

##----------------------------------------------------------------------------
##  dl_atexit(HOOK)		Register exit-time hook
##----------------------------------------------------------------------------
dl_atexit() {
    local hook

    case ${1+=} in			## Usage OK?
	=)  hook=`expr "_$1" : '_\('"$dl_re_id"'\)$'` || return 1
			;;		## Yes, try to validate HOOK.
	*)  return 2	;;		## No, indicate abuse!
    esac
    dl_atexits="$hook ${DS}status; $dl_atexits"
}					## Register exit-time hook.

##----------------------------------------------------------------------------
##  dl_exit([STATUS=$?])	Terminate program with STATUS
##----------------------------------------------------------------------------
dl_exit() {
    local status=`expr 0 + "${1-$?}" 2>/dev/null` || status=2
    set +eu; trap '' 0			## Fetch exit status ($dl_atexits re-
    eval "$dl_atexits"			## fers to it!), disable sh(1)'s err-
					## exit and nounset options, unregis-
					## ter exit trap, and invoke exit-time
}					## hooks.

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
case ${LIBDL_SH_DESTDIR+=} in
    =)	dl_destdir=$LIBDL_SH_DESTDIR; readonly dl_destdir
	unset LIBDL_SH_DESTDIR		## Inherit LIBDL_SH_DESTDIR.
	;;
esac; trap 'dl_exit $?' 0		## Register exit trap.
