#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libdl.sh			- Demand-loading library
#
#   Copyright (C) 2013-2018 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-12
##  CHANGED BY:	ks	2015-04-23	Implement meta operations.
##					Lay session concept foundation.
##		ks	2016-05-19	Use meta prefix.
##		ks	2016-05-23	Add service function dl_warn().
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##					Make dl_warn() usable for other packa-
##					ges.
##		ks	2017-02-11	Canonify LSP items in 'pre libpath'
##					meta operation.
##		ks	2017-07-01	Add service function dl_dump().
##		ks	2017-07-08	Add service function dl_split().
##
##  NOTE:   (1)	To avoid cluttering code, this library is exempted from need-
##		ing namespace prefixes for its special character definitions.
##----------------------------------------------------------------------------
##  Define special characters:
#-----------------------------------------------------------------------------
BQ=\` DQ=\" SQ=\' BS=\\ CS='#' DS=\$ HS=\! QB=\` QE=\' CR=`printf '\r'` NL='
'
readonly BQ DQ SQ BS CS DS HS QB QE CR NL

##----------------------------------------------------------------------------
##  Global variables:
##----------------------------------------------------------------------------
dl_cs_ul=ABCDEFGHIJKLMNOPQRSTUVWXYZ	## Define locale-independent character
dl_cs_ll=abcdefghijklmnopqrstuvwxyz	## sets for upper-/lower-case letters,
dl_cs_1d=123456789			## decimal digits, letters and alpha-
dl_cs_0d=0$dl_cs_1d			## numerics as well as unanchored REs
dl_cs_al=$dl_cs_ul$dl_cs_ll		## recognizing sh(1) special char.s/
dl_cs_an=$dl_cs_al$dl_cs_0d		## identifiers, and cardinal numbers.
dl_cs_sh=']({< 	'"$CR$BQ$DQ$SQ$BS$CS$DS$HS"'~?*|;&>})['
dl_re_id='[_'"$dl_cs_al"'][_'"$dl_cs_an"']*'
dl_re_1n='['"$dl_cs_1d"']['"$dl_cs_0d"']*'
dl_re_0n='['"$dl_cs_0d"']['"$dl_cs_0d"']*'
dl_package='@PACKAGE_TARNAME@'		## Define source package name/version.
dl_version='@PACKAGE_VERSION@'
dl_api=1				## Define API version.
dl_libpath=`libdl-sh path` || exit 127
dl_loaded=:dl:
dl_needed=
dl_atexits='exit $status'
readonly dl_cs_ul dl_cs_ll dl_cs_1d dl_cs_0d dl_cs_al dl_cs_an dl_re_id	\
	 dl_re_1n dl_re_0n dl_package dl_version dl_api
unset dl_atloads dl_session		## Discard spurious environment.

##----------------------------------------------------------------------------
##  dl_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
dl_meta() {
    local mp=dl_			## Set meta prefix.

    case $1-$2 in			## Which META operation?
	get-apis)			## Inquire APIs...
	    local sx ms=\;
	    local fa='/^a'"$ms"'/!d;s///'   ff='/^f'"$ms"'/!d;s///'	\
		  da=';s/([^)'"$ms"'(]*)//' p2=';s/'"$ms"'/&'"$mp"'/;s/_(/(/'
	    case ${3-api} in		## Which format?
		api)	sx="$fa"		;;
		full)   sx="$ff$p2${4+;$4}"	;;
		list)	sx="$ff$p2$da${4+;$4}"	;;
		*)	return 1		;;
	    esac
	    sed "$sx" <<EOF
a${ms}$dl_api
f${ms}$dl_api${ms}meta(META [ARG ...])${ms}2-
f${ms}$dl_api${ms}warn(WHAT INVO [ARG ...])${ms}2-
f${ms}$dl_api${ms}dump(MP VS ...)${ms}2-
f${ms}$dl_api${ms}split(WORD IFS &FIELD ...)${ms}3-
f${ms}$dl_api${ms}which(LIB)${ms}1
f${ms}$dl_api${ms}atload(HOOK)${ms}1
f${ms}$dl_api${ms}load(LIB ...)${ms}1-
f${ms}$dl_api${ms}atexit(HOOK)${ms}1
f${ms}$dl_api${ms}exit([STATUS=\$?])${ms}0-1
EOF
	    ;;
	get-package|get-version|get-api|get-libpath|get-loaded|get-session)
					## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	pre-libpath)			## Prepend to library search path...
	    case ${3+=} in		## One or more path items given?
		=)  local ifs vs=$2 items= item; shift 2
		    ifs=$IFS; IFS=:; set shiftee $*; shift; IFS=$ifs
		    for item in ${1+"$@"}; do
					## Yes, foreach item do...
			item=`cd "$item" 2>/dev/null && /bin/pwd` &&
			    items=$items$item:
		    done; eval "$mp$vs"'=$items$'"$mp$vs"
					## Canonify and prepend it to library
		    ;;			## search path if it does exist.
		*)  return 2		## No, indicate misusage!
		    ;;
	    esac
	    ;;
	set-session)			## Set session ID...
	    eval "$mp$2"'=$3'
	    ;;
	session-*)  :			## Session init/dump/load/exit...
	    ;;
	*)  return 2			## Anything else...
	    ;;				## Indicate misusage!
    esac
}

##----------------------------------------------------------------------------
##  dl_warn(WHAT INVO [ARG ...])
##				Warn user about deprecated and/or withdrawn
##				features and abort application if necessary
##----------------------------------------------------------------------------
dl_warn() {
    eval "`sed '
	:0
	$!{
	    N;s/'"$BS$NL"'/'"$BS$BS"'n/;b0
	};s/'"$SQ"'/&'"$BS$BS"'&&/g;/^\('"$dl_re_id"'\);/{
	    s//local lib=\1 invo='"$SQ"'\1/
	    s/$/'"$SQ"' package='"$DQ$BQ"'\1_meta get package'"$BQ$DQ"'/;bp
	};s/^/local lib=LIB invo='"$SQ"'/;s/$/'"$SQ"' package=PACKAGE/;:p
    ' <<EOF
$2
EOF`"					## If possible, derive library and
					## package from INVOcation.
    case $1 in				## Warn user about WHAT?
	rel-req-set-api)		## Release requires set API version...
	    cat >&2 <<EOF		## [WREL CREL]
$invo; CAUTION!
Function invoked without API version of lib$lib.sh being selected before,
which is required since release $3. I presume the application still wants
to use a withdrawn API version. To prevent serious damage, the application
is terminated now!

Downgrade package $package to release $4 to make the application
work again.
EOF
	    exit 127
	    ;;
	rel-dpr-func)			## Release deprecated function...
	    cat >&2 <<EOF		## [DREL WREL CREL]
$invo; WARNING:
Function deprecated since release $3, to be withdrawn by release $4.
See lib$lib(3SH) for suggestions on how to migrate your application or
downgrade package $package to release $5.
EOF
	    return 0
	    ;;
	api-wdr-func)			## API version withdrew function...
	    cat >&2 <<EOF		## [WAPI CAPI]
$invo; WARNING:
Function withdrawn from API version $3 of lib$lib.sh.
See lib$lib(3SH) for suggestions on how to migrate your application or
stay with (probably deprecated) API version $4 for the time being.
EOF
	    ;;
	rel-wdr-meta)			## Release withdrew meta operation...
	    cat >&2 <<EOF		## [WREL CREL]
$invo; WARNING:
Meta operation withdrawn since release $3.
See lib$lib(3SH) for suggestions on how to migrate your application or
downgrade package $package to release $4.
EOF
	    ;;
	*)				## Catch-all...
	    echo "$*; OOPS!" >&2
	    ;;
    esac; return 1
}

##----------------------------------------------------------------------------
##  dl_dump(MP VS ...)		Dump library's variables
##
##  NOTE:   (1)	The invoker is responsible for redirecting standard output!
##----------------------------------------------------------------------------
dl_dump() {
    local sx0=':0'"$NL"'$!{;N;b0'"$NL"'};s/'"$SQ"'/&'"$BS$BS"'&&/g;s/^/'\
	  sx1='='"$SQ"'/;s/$/'"$SQ"'/' mp="$1" vs; shift
					## Fetch meta prefix.
    for vs in ${1+"$@"}; do		## Foreach stem do...
	eval 'case ${'"$mp$vs"'+=} in
	    =)	sed "$sx0$mp$vs$sx1" <<EOF
$'"$mp$vs"'
EOF
		;;
	    *)	echo unset '"$mp$vs"'
		;;
	esac'
    done
}

##----------------------------------------------------------------------------
##  dl_split(WORD IFS &FIELD ...)
##				Split WORD by IFS into FIELDs
##----------------------------------------------------------------------------
dl_split() {
    local word="$1" nifs="$2" oifs

    case ${3+=} in			## At least one &FIELD given?
	=)  shift 2	;;		## Yes, drop WORD and IFS.
	*)  return 2	;;		## No, indicate usage error.
    esac; eval "`awk '
	BEGIN {
	    print "oifs=$IFS; IFS=$nifs; set shiftee $word; IFS=$oifs"
	}
	{
	    for (i = 2; i <= NF; ++i) if ($i ~ /^([on]ifs|word)$/)
		++ec
	    else
		printf "%s=$%u%s",$i,i,((i < NF) ? " " : "\n")
	}
	END {
	    if (ec) print "return 1"
	}
    ' <<EOF
skippee $*
EOF`"
}

##----------------------------------------------------------------------------
##  dl_which(LIB)		Locate LIBrary on library search path
##----------------------------------------------------------------------------
dl_which() {
    local ifs lib="$1" item

    ifs=$IFS; IFS=:; set shiftee `sed '
	s/^/:/;s/$/:/;:1		## Let empty items explicitly refer
	s/::/:.:/g;t1			## to '.' on the combined library
	s/^://;s/:$//			## search path.
    ' <<EOF
$dl_libpath${PATH+:$PATH}
EOF`; shift; IFS=$ifs			## Split combined library search path.
    for item in ${1+"$@"}; do		## Locate library...
	test -f "$item/lib$lib.sh" && echo "$item/lib$lib.sh" && return
    done; return 127
}

##----------------------------------------------------------------------------
##  dl_atload(HOOK)		Register load-time hook
##----------------------------------------------------------------------------
dl_atload() {
    expr "_$1" : '_'"$dl_re_id"'$' >/dev/null &&
	dl_atloads="$1"' "$lib"'"${dl_atloads+ && $dl_atloads}"
}

##----------------------------------------------------------------------------
##  dl_load(LIB ...)		Load demanded libraries
##----------------------------------------------------------------------------
dl_load() {
    local lib needed path

    case $dl_needed in
	'') path=$PATH; PATH=$dl_libpath$PATH	;;
    esac				## Augment path when necessary.
    for lib in ${1+"$@"}; do		## Foreach demanded library do...
	case $dl_loaded$dl_needed in	## Is it already loaded or needed?
	    *:$lib:*)			## Yes, skip it.
		;;
	    *)	needed=$dl_needed; dl_needed=$dl_needed$lib:
		. "lib$lib.sh" || dl_exit 127
		dl_needed=$needed; dl_loaded=:$lib$dl_loaded
		eval "${dl_atloads-:}" || dl_exit $?
					## No, mark it as needed, load it,
		;;			## mark it as loaded, and invoke load-
	esac				## time hooks.
    done
    case $dl_needed in
	'') PATH=$path	;;		## Restore path when necessary.
    esac
}

##----------------------------------------------------------------------------
##  dl_atexit(HOOK)		Register exit-time hook
##----------------------------------------------------------------------------
dl_atexit() {
    expr "_$1" : '_'"$dl_re_id"'$' >/dev/null &&
	dl_atexits="$1"' $status; '"$dl_atexits"
}

##----------------------------------------------------------------------------
##  dl_exit([STATUS=$?])	Terminate program with STATUS
##----------------------------------------------------------------------------
dl_exit() {
    local status=`expr 0 + "${1-$?}" 2>/dev/null` || status=2
					## Fetch exit status ($dl_atexits re-
					## fers to it!), unregister exit trap,
    trap '' 0; eval "$dl_atexits"	## and invoke exit-time hooks.
}

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
trap 'dl_exit $?' 0
