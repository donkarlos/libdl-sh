#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libsafe.sh			- Safe directory/file operations library
#
#   Copyright (C) 2013-2016 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-14
##  CHANGED BY:	ks	2016-05-19	Use meta prefix.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
safe_api=0				## Define API version.
safe_tmpdir=
safe_suffix=$$
safe_tarid=0
safe_locks=
safe_exit0=
readonly safe_api

##----------------------------------------------------------------------------
##  safe_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
safe_meta () {
    local mp=safe_			## Set meta prefix.
    local sx sxb='/^b:/!d;s///' sxf='/^f:/!d;s///'
    local sx1='s/:.*$//' sx2='s/:/:'"$mp"'/' sx3='s/([^):(]*):/:/'

    case $1-$2 in			## Which META operation?
	get-apis)			## Inquire APIs...
	    case ${3-brief} in		## Which format?
		api)	sx="$sxb;$sx1"			;;
		brief)	sx="$sxb"';s/:/:,/;s/$/,/'	;;
		full)   sx="$sxf;$sx2${4+;$4}"		;;
		list)	sx="$sxf;$sx2;$sx3${4+;$4}"	;;
		*)	return 1			;;
	    esac
	    sed "$sx" <<EOF
b:$safe_api:meta,init,mktmpdir,mkdir,chdir,touch,save,rename,remove,umask,unlock,lock,wait
f:$safe_api:meta(META [ARG ...]):2-
f:$safe_api:init(TAG):1
f:$safe_api:mktmpdir(&DPN [DRN]):1-2
f:$safe_api:mkdir(DPN ...):1-
f:$safe_api:chdir(DPN):1
f:$safe_api:touch(FPN ...):1-
f:$safe_api:save(FPN):1
f:$safe_api:rename(OLDPN NEWPN):2
f:$safe_api:remove(PN ...):1-
f:$safe_api:umask(UMASK COMMAND [ARGUMENT ...]):2-
f:$safe_api:unlock(PN):1
f:$safe_api:lock(PN):1
f:$safe_api:wait(PN [SECONDS=30]):1-2
EOF
	    ;;
	get-api)			## Inquire internal variable...
	    eval 'echo "$'"$mp$2"'"'	;;
	*)				## Anything else...
	    return 2			;;
    esac				## Indicate usage error!
}

##----------------------------------------------------------------------------
##  safe_init(TAG)		Set cleanups tag for successful exit
##----------------------------------------------------------------------------
safe_init () {
    undo_init "$1" && safe_exit0=$1
}

##----------------------------------------------------------------------------
##  safe_mktmpdir(&DPN [DRN])	Safely make temporary directory
##----------------------------------------------------------------------------
safe_mktmpdir () {
    test -n "$safe_tmpdir" || {		## Temporary directory made?
	safe_tmpdir=`mktemp -d` || return 1
					## No, try to make it once and for all.
	undo_push $safe_exit0 'rm -rf' "$safe_tmpdir"
    }

    case $# in				## Optional relative name supplied?
	2)  mkdir -p "$safe_tmpdir/$2" && eval "$1"'=$safe_tmpdir/$2'
	    ;;				## Yes, try to make it and pass it on.
	1)  eval "$1"'=$safe_tmpdir'	## No, just pass it on.
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_mkdir(DPN ...)		Safely make directories
##----------------------------------------------------------------------------
safe_mkdir () {
    local dpn

    for dpn in ${1+"$@"}; do		## Foreach directory do...
	test -d "$dpn" || {		## Does it already exist?
	    safe_mkdir "`dirname "$dpn"`" && mkdir "$dpn" || break
	    undo_push rmdir "$dpn" '2>/dev/null'
	}				## No, try to make it recursively.
    done
}

##----------------------------------------------------------------------------
##  safe_chdir(DPN)		Safely change directory
##----------------------------------------------------------------------------
safe_chdir () {
    local d="`pwd`"; cd "$1" && undo_push cd "$d" '2>/dev/null'
}

##----------------------------------------------------------------------------
##  safe_touch(FPN ...)		Safely touch file(s) into existence
##----------------------------------------------------------------------------
safe_touch () {
    local fpn

    for fpn in ${1+"$@"}; do		## Foreach file do...
	test -f "$fpn" || {		## Does it already exist?
	    safe_mkdir "`dirname "$fpn"`" && touch "$fpn" || break
	    undo_push 'rm -f' "$fpn"
	}				## No, try to make it recursively.
    done
}

##----------------------------------------------------------------------------
##  safe_save(FPN)		Safely save existing file
##----------------------------------------------------------------------------
safe_save () {
    test -f "$1~B$safe_suffix" || {	## File has already been saved?
	cp -p "$1" "$1~B$safe_suffix" && {
	    undo_push $safe_exit0 'rm -f' "$1~B$safe_suffix"
	    undo_push mv "$1~B$safe_suffix" "$1"
	}				## No, try to save it.
    }
}

##----------------------------------------------------------------------------
##  safe_rename(OLDPN NEWPN)	Safely rename file
##----------------------------------------------------------------------------
safe_rename () {
    test -e "$1" || return 1
    test -e "$2" && return 1
    mv "$1" "$2" && undo_push mv "$2" "$1"
}

##----------------------------------------------------------------------------
##  safe_remove(PN ...)		Safely remove directory tree(s)/file(s)
##----------------------------------------------------------------------------
safe_remove () {
    local tmpdn tarpn pn

    safe_mktmpdir tmpdn safe && {	## Make temporary directory.
	safe_tarid=`expr $safe_tarid + 1`
	tarpn=$tmpdn/$safe_tarid.tar	## Construct backup archive's name.
	for pn in ${1+"$@"}; do		## Foreach removee do...
	    test -e "$pn" && {		## Append it to backup archive.
		tar rPf "$tarpn" "$pn" || return 1
	    }
	done
	if test -e "$tarpn"; then
	    undo_push 'tar xPf' "$tarpn" '2>/dev/null' && rm -rf "$@"
	else
	    :
	fi
    }
}

##----------------------------------------------------------------------------
##  safe_umask(UMASK COMMAND [ARGUMENT ...])
##				Invoke COMMAND with umask UMASK
##----------------------------------------------------------------------------
safe_umask () {
    local umask=`umask` status		## Save umask.

    umask $1; shift			## Adjust umask.
    ${1+"$@"}				## Invoke command.
    status=$?; umask $umask		## Save status and restore umask.

    return $status			## Indicate status.
}

##----------------------------------------------------------------------------
##  safe_unlock(PN)		Safely unlock directory or file PN
##----------------------------------------------------------------------------
safe_unlock () {
    echo "$safe_locks" | fgrep -qxe "$1" && rmdir "$1~lock" && {
	safe_locks="`echo "$safe_locks" | fgrep -vxe "$1"`" || :
    }
}

##----------------------------------------------------------------------------
##  safe_lock(PN)		Safely try locking directory or file PN
##----------------------------------------------------------------------------
safe_lock () {
    echo "$safe_locks" | fgrep -qxe "$1" || {
	safe_mkdir "`dirname "$1"`" &&
	    safe_umask 277 mkdir "$1~lock" 2>/dev/null &&
	    undo_push $safe_exit0 safe_unlock "$1" &&
	    safe_locks="$safe_locks$1$NL"
    }
}

##----------------------------------------------------------------------------
##  safe_wait(PN [SECONDS=30])	Try locking PN within SECONDS seconds
##----------------------------------------------------------------------------
safe_wait () {
    local seconds="${2-30}"

    until safe_lock "$1"; do		## Until we lock map file do...
	test -d "$1~lock" || return 1	## Cond. indic. failure to lock at all.
	sleep 1; seconds=`expr $seconds - 1`
	test $seconds -gt 0 || return 2	## Cond. indicate timeout.
    done
}

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
dl_load undo
