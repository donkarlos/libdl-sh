#! /bin/sh ##
#-----------------------------------------------------------------------------
#   libsafe.sh			- Safe directory/file operations library
#
#   Copyright Â© 2013-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2013-02-14
##  CHANGED BY:	ks	2016-05-19	Use meta prefix.
##		ks	2016-05-24	Add 'meta get package/version'.
##					Use 'meta get apis' separator ';'.
##		ks	2017-01-15	Update copyright.
##					Add 'meta session *'.
##					Add 'meta get/set 0tag' as substitute
##					for safe_init().
##		ks	2020-05-12	Limit valid 'meta session' operations.
##					Make 'meta get apis FORMAT' properly
##					handle namespace rule-exempted names.
##		ks	2021-05-01	'set -u'-harden safe_meta().
##		ks	2021-05-08	Make 'safe_meta get apis' sed(1) expr.
##					labels portable.
##		ks	2021-05-15	Prepare for multiple API versions.
##					Deprecate/Withdraw safe_init().
##					'set -u'-harden safe_init(), safe_-
##					mktmpdir(), safe_mkdir(), safe_-
##					chdir(), safe_touch(), safe_save(),
##					safe_rename(), safe_remove(), safe_-
##					umask(), safe_unlock(), safe_lock(),
##					and safe_wait().
##					Prepare API version 1.
##					Use dl_readonly() to freeze variables.
##					Activate API version 1.
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
safe_package=@PACKAGE_TARNAME@		## Define source package name
safe_version=@PACKAGE_VERSION@		## and version.
safe_api=0				## Preset default API version.
safe_suffix=$$
safe_tarid=0
safe_locks=
readonly safe_package safe_version; unset safe_ro safe_0tag safe_tmpdir
					## Discard spurious environment.

##----------------------------------------------------------------------------
##  safe_meta(META [ARG ...])	Perform META operation (with ARGs)
##----------------------------------------------------------------------------
safe_meta() {
    local mp=safe_			## Set meta prefix.

    case ${2+=}${1+$1-}${2-} in		## Which META operation?
	=get-apis)			## Inquire APIs...
	    local sx ms=\;
	    local fa='/^a'"$ms"'/!d;s///' da='s/([^)'"$ms"'(]*)//'	\
		  ff='/^F'"$ms"'/{;s///;t2'"$NL"'};/^f'"$ms"'/!d;s///'	\
		  fr='/^R'"$ms"'/{;s///;t2'"$NL"'};/^r'"$ms"'/!d;s///'	\
		  p2=';s/'"$ms"'/&'"$mp"'/;:2'
	    case ${3-api} in		## Which format?
		api)	sx="$fa"			;;
		full)	sx="$ff$p2${4+$NL$4}"		;;
		list)	sx="$ff$p2$NL$da${4+;$4}"	;;
		r/o)	sx="$fr$p2${4+$NL$4}"		;;
		*)	return 1			;;
	    esac
	    sed "$sx" <<EOF
a${ms}0
f${ms}0${ms}meta(META [ARG ...])${ms}2-4
f${ms}0${ms}init(TAG)${ms}1
f${ms}0${ms}mktmpdir(&DPN [DRN])${ms}1-2
f${ms}0${ms}mkdir(DPN ...)${ms}1-
f${ms}0${ms}chdir(DPN)${ms}1
f${ms}0${ms}touch(FPN ...)${ms}1-
f${ms}0${ms}save(FPN)${ms}1
f${ms}0${ms}rename(OLDPN NEWPN)${ms}2
f${ms}0${ms}remove(PN ...)${ms}1-
f${ms}0${ms}umask(UMASK COMMAND [ARGUMENT ...])${ms}2-
f${ms}0${ms}unlock(PN)${ms}1
f${ms}0${ms}lock(PN)${ms}1
f${ms}0${ms}wait(PN [SECONDS=30])${ms}1-2
a${ms}1
f${ms}1${ms}meta(META [ARG ...])${ms}2-4
f${ms}1${ms}mktmpdir(&DPN [DRN])${ms}1-2
f${ms}1${ms}mkdir(DPN ...)${ms}1-
f${ms}1${ms}chdir(DPN)${ms}1
f${ms}1${ms}touch(FPN ...)${ms}1-
f${ms}1${ms}save(FPN)${ms}1
f${ms}1${ms}rename(OLDPN NEWPN)${ms}2
f${ms}1${ms}remove(PN ...)${ms}1-
f${ms}1${ms}umask(UMASK COMMAND [ARGUMENT ...])${ms}2-
f${ms}1${ms}unlock(PN)${ms}1
f${ms}1${ms}lock(PN)${ms}1
f${ms}1${ms}wait(PN [SECONDS=30])${ms}1-2
EOF
	    ;;
	=get-package|=get-version|=get-api|=get-0tag)
					## Inquire internal variable...
	    eval 'case ${'"$mp$2"'+=} in
		=)  echo "$'"$mp$2"'"	;;
		*)  return 1		;;
	    esac'
	    ;;
	=set-*)				## Set internal variable once...
	    case ${4+4}${3+=}$2 in	## Usage OK?
		=api)	${mp}meta get apis | fgrep -qxe "$3"
			;;		## Yes, try to validate API version.
		=0tag)	undo_meta ${1+"$@"}
			;;		## Yes, try to validate tag.
		*)	return 2	## No, indicate abuse!
			;;
	    esac && dl_readonly safe "$2" "$3"
	    ;;
	=session-init|=session-load|=session-dump|=session-exit)
	    :				## Session init/load/dump/exit...
	    ;;				## ...is a no-op.
	*)  return 2			## Anything else...
	    ;;				## ...is abuse!
    esac
}

##----------------------------------------------------------------------------
##  safe_init(TAG)		Set cleanups tag for successful exit
##----------------------------------------------------------------------------
safe_init() {
    case ${safe_api--} in
	1)  dl_warn api-wdr-func "safe;_init([$#]$*)" 1 0		;;
	*)  dl_warn rel-dpr-func "safe;_init([$#]$*)" 0.4 0.5 0.3.6	;;
    esac && safe_meta set 0tag ${1+"$1"}
}

##----------------------------------------------------------------------------
##  safe_mktmpdir(&DPN [DRN])	Safely make temporary directory
##----------------------------------------------------------------------------
safe_mktmpdir() {
    case ${3+3}${2+=}${1+=}${safe_ro-,} in
					## Usage OK?/Temp. directory made?
	=*,tmpdir,*)			## Y/Y.
	    ;;
	=*)				## Y/N: Try to make it once and for all.
	    safe_tmpdir=`mktemp -d` &&
		undo_push ${safe_0tag+"$safe_0tag"} 'rm -rf' "$safe_tmpdir" &&
		dl_readonly safe tmpdir
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac && case $# in			## DRN passed?
	2)  mkdir -p "$safe_tmpdir/$2" && eval "$1"'=$safe_tmpdir/$2'
	    ;;				## Yes, try to make it and pass it on.
	1)  eval "$1"'=$safe_tmpdir'	## No, just pass it on.
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_mkdir(DPN ...)		Safely make directories
##----------------------------------------------------------------------------
safe_mkdir() {
    case ${1+=} in			## Usage OK?
	=)  local dpn; for dpn in "$@"; do
					## Yes, foreach directory do...
		test -d "$dpn" || {	## Does it already exist?
		    safe_mkdir "`dirname "$dpn"`" && mkdir "$dpn" &&
			undo_push rmdir "$dpn" || break
		}			## No, try to make it recursively,
	    done			## pushing undos along the way...
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_chdir(DPN)		Safely change directory
##----------------------------------------------------------------------------
safe_chdir() {
    case ${2+2}${1+=} in		## Usage OK?
	=)  local cwd="`pwd`"; cd "$1" &&
		undo_push ${safe_0tag+"$safe_0tag"} cd "$cwd"
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_touch(FPN ...)		Safely touch file(s) into existence
##----------------------------------------------------------------------------
safe_touch() {
    case ${1+=} in			## Usage OK?
	=)  local fpn; for fpn in "$@"; do
					## Yes, foreach file do...
		test -f "$fpn" || {	## Does it already exist?
		    safe_mkdir "`dirname "$fpn"`" && touch "$fpn" &&
			undo_push 'rm -f' "$fpn" || break
		}			## No, try to make it recursively,
	    done			## pushing undos along the way...
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_save(FPN)		Safely save existing file
##----------------------------------------------------------------------------
safe_save() {
    case ${2+2}${1+=} in		## Usage OK?
	=)  local fpn="$1" bpn="$1~B$safe_suffix"
	    test -f "$fpn" && {		## Yes, and file exists?
		test -f "$bpn" || {	## Yes, and file had been saved?
		    cp -p "$fpn" "$bpn" &&
			undo_push ${safe_0tag+"$safe_0tag"} 'rm -f' "$bpn" &&
			undo_push mv "$bpn" "$fpn"
		}			## No, try to save it.
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_rename(OLDPN NEWPN)	Safely rename file
##----------------------------------------------------------------------------
safe_rename() {
    case ${3+3}${2+=} in		## Usage OK?
	=)  test -e "$1" && {
		test -e "$2" || {
		    mv "$1" "$2" && undo_push mv "$2" "$1"
		}
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_remove(PN ...)		Safely remove directory tree(s)/file(s)
##----------------------------------------------------------------------------
safe_remove() {
    case ${1+=} in			## Usage OK?
	=)  local tmpdn tarpn; safe_mktmpdir tmpdn safe && {
					## Yes, temporary directory made?
		safe_tarid=`expr ${safe_tarid-0} + 1` && {
		    tarpn=$tmpdn/$safe_tarid.tar
					## Yes, construct archive name.
		    tar cPf "$tarpn" "$@" &&
			undo_push 'tar xPf' "$tarpn" &&
			rm -rf "$@"
		}
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_umask(UMASK COMMAND [ARGUMENT ...])
##				Invoke COMMAND with umask UMASK
##----------------------------------------------------------------------------
safe_umask() {
    case ${2+=} in			## Usage OK?
	=)  local umask=`umask` status	## Yes, save umask.
	    umask "$1" && {		## Successfully adjusted umask?
		shift; "$@"; status=$?	## Yes, invoke command, collect sta-
		umask $umask		## tus, restore umask, and return
		return $status		## collected status.
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_unlock(PN)		Safely unlock directory or file PN
##----------------------------------------------------------------------------
safe_unlock() {
    case ${2+2}${1+=} in		## Usage OK?
	=)				## Yes, try to unlock PN.
	    echo "$safe_locks" | fgrep -qxe "$1" && rmdir "$1~lock" && {
		safe_locks="`echo "$safe_locks" | fgrep -vxe "$1"`" || :
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_lock(PN)		Safely try locking directory or file PN
##----------------------------------------------------------------------------
safe_lock() {
    case ${2+2}${1+=} in		## Usage OK?
	=)				## Yes, try to lock PN.
	    echo "$safe_locks" | fgrep -qxe "$1" || {
		safe_mkdir "`dirname "$1"`" &&
		    safe_umask 277 mkdir "$1~lock" &&
		    undo_push ${safe_0tag+"$safe_0tag"} safe_unlock "$1" &&
		    safe_locks="$safe_locks$1$NL"
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  safe_wait(PN [SECONDS=30])	Try locking PN within SECONDS seconds
##----------------------------------------------------------------------------
safe_wait() {
    case ${3+3}${2+=}${1+=} in		## Usage OK?
	=*) local seconds="${2-30}"; test 0 -lt "$seconds" 2>/dev/null && {
					## Positive number of seconds passed?
		until safe_lock "$1"; do
					## Until we lock map file do...
		    test -d "$1~lock" || return 1
					## Indicate failure unless lock was
					## made.
		    sleep 1; seconds=`expr $seconds - 1`
					## Wait a second...
		    test $seconds -gt 0 || return 2
					## Indicate timeout unless timer is
		done			## still running.
	    }
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  Initialization:
##----------------------------------------------------------------------------
dl_load undo
