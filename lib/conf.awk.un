#! /usr/bin/awk -f ##
#-----------------------------------------------------------------------------
#   conf.awk			- libconf.sh GIT-style config. file processor
#
#   Copyright (C) 2013 Karl Schmitz
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <carolus.faber@gmail.com>
##
##  WRITTEN BY:	ks	2013-02-14
##  CHANGED BY:	ks	2013-03-06	Attribute this to `libconf.sh'.
##		ks	2013-03-11	Work around mawk(1)'s misfeature of
##					aborting on nonexisting input files.
##----------------------------------------------------------------------------
##  Initialization:
#-----------------------------------------------------------------------------
BEGIN {
    ai = 0; ac = ARGC - 2		## Foreach pathname argument do...
    while (++ai <= ac) {		## Create AV <-> AI mappings and
	ai2av[ai] = av = ARGV[ai]; av2ai[av] = ai; gsub("'", "&\\\\&&", av)
	if (system("test -f '" av "'")) delete ARGV[ai]
					## delete ARGV[ai] if it doesn't
    }					## exist.

    re_ind	= "[ \t]*"		## Define RE building blocks for in-
    re_fld	= "[^ \t]+"		## dent, field (separator), comment,
    re_sep	= "[ \t]+"		## section header (with subsection),
    re_com	= "([#;].*)?"		## and variable name.
    re_sec	= "\\[[^] \"[]+\\]"
    re_sub	= "\\[[^] \"[]+ \"[^\"]+\"\\]"
    re_var	= "[^ \t.=]+"
    re_sk0	= "^" re_ind
    re_sk1	= re_sk0 re_fld re_sep

    re_l_com	= re_sk0 re_com "$"	## Define corresponding syntax REs.
    re_l_sec	= re_sk0 re_sec re_ind re_com "$"
    re_l_sub	= re_sk0 re_sub re_ind re_com "$"
    re_l_set	= re_sk0 re_var re_ind "="

    ec = mc = sc = si = ai = 0		## Reset error/modif./section counts
}					## and section/argument indexes.

##----------------------------------------------------------------------------
##  has_si(SI)			Section index SI is alive?
##
##  NOTE:   (1)	si2vc[SI] is a section's VC, which may be deleted to kill it
##		(whereas its SN <-> SI map entries remain so that it may be
##		reborn under its former index).
##----------------------------------------------------------------------------
function has_si(si) {
    return (si in si2vc)
}

##----------------------------------------------------------------------------
##  get_si(SN)			Map section name SN to live SI (or 0), setting
##				`si'as a side-effect.
##----------------------------------------------------------------------------
function get_si(sn) {
    return ((si = sn2si[sn]) in si2vc)
}

##----------------------------------------------------------------------------
##  set_si(SN)			Map section name SN to (new) SI, setting
##				`si' as a side-effect.
##----------------------------------------------------------------------------
function set_si(sn) {
    if (!(si = sn2si[sn])) {		## SN not mapped yet?
	si = sn2si[sn] = ++sc; si2sn[si] = sn
	si2vc[si] = 0; si2ai[si] = ai	## Create SN <-> SI mappings, bear the
					## section by clearing its VC, and
					## update section's AI.
    } else if (!(si in si2vc)) {	## SN not alive?
	si2vc[si] = 0; si2ai[si] = ai	## Rebear it.
    }
}

##----------------------------------------------------------------------------
##  has_vi(SI,VI)		Variable (SI,VI) is alive?
##
##  NOTE:   (1)	sivi2vv[SI,VI] is the variable's VV, which may be deleted to
##		unset a variable.
##----------------------------------------------------------------------------
function has_vi(si,vi) {
    return ((si,vi) in sivi2vv)
}

##----------------------------------------------------------------------------
##  get_vi(SI,VN)		Map variable name VN to live VI within SI,
##				setting `vi' as a side-effect.
##----------------------------------------------------------------------------
function get_vi(si,vn) {
    return ((si,vi = sivn2vi[si,vn]) in sivi2vv)
}

##----------------------------------------------------------------------------
##  set_vi(SI,VN)		Map variable name VN to (new) VI within SI,
##				setting `vi' as a side-effect.
##----------------------------------------------------------------------------
function set_vi(si,vn) {
    if (!(vi = sivn2vi[si,vn]) || (vi > si2vc[si])) {
					## VN not mapped in SI yet?
	vi = sivn2vi[si,vn] = ++si2vc[si]; sivi2vn[si,vi] = vn
	sivi2ai[si,vi] = ai		## Create VN <-> VI mappings and
    }					## update variable's AI.
}

##----------------------------------------------------------------------------
##  has_vc(SI)			Section index SI contains variables?
##----------------------------------------------------------------------------
function has_vc(si ,vi) {
    for (vi = 1; vi <= si2vc[si]; ++vi) if (has_vi(si,vi)) return 1
    return 0
}

##----------------------------------------------------------------------------
##  get_sn_vn_vv(ITEM)		Split `SECTION.VARIABLE[=VALUE]' string ITEM,
##				setting `sn', `vn', and `vv' as a side-effect
##				and return the number of recognized parts.
##----------------------------------------------------------------------------
function get_sn_vn_vv(item) {
    if (match(item, "^([^.=]+\\.)+")) {	## ITEM has `SECTION.' part?
	sn = substr(item, 1, RLENGTH - 1)
					## Extract `SECTION' to sn.
	if (match(item, "\\.[^.=]+=")) {
					## ITEM has `.VARIABLE=VALUE' part?
	    vn = substr(item, RSTART + 1, RLENGTH - 2)
	    vv = substr(item, RSTART + RLENGTH)
					## Extract `VARIABLE'/`VALUE' to vn/vv
	    return 3			## and indicate three parts.
	}
	if (match(item, "\\.[^.=]+$")) {
					## ITEM has `.VARIABLE' part instead?
	    vn = substr(item, RSTART + 1, RLENGTH - 1)
					## Extract `VARIABLE' to vn
	    return 2			## and indicate two parts.
	}
	return 1
    }
    return 0
}

##----------------------------------------------------------------------------
##  Actions:
##----------------------------------------------------------------------------
(FNR == 1) {				## First line of input file!
    mc = 0; ai = (FILENAME in av2ai) ? av2ai[FILENAME] : ac
					## Clear modification count and map
}					## pathname -> AI.

($0 ~ re_l_com) {			## Empty or comment line!
    next				## Skip it.
}

($0 ~ re_l_sub) {			## Section header with subsection!
    if (match($0, re_sub)) {		## Line contains proper header?
	sn = substr($0, RSTART + 1, RLENGTH - 3)
	sub(" \"", ".", sn); set_si(sn)	## Map SN -> SI.
    } else {
	++ec				## Count error.
    }
    next
}

($0 ~ re_l_sec) {			## Section header!
    if (match($0, re_sec)) {		## Line contains proper header?
	sn = substr($0, RSTART + 1, RLENGTH - 2)
	set_si(sn)			## Map SN -> SI.
    } else {
	++ec				## Count error.
    }
    next
}

($0 ~ re_l_set) {			## Variable setting!
    if (!si) {				## Out-of-section?
	++ec				## Count error.
    } else {
	sub(re_sk0, ""); if (match($0, "[ \t]*=[ \t]*")) {
	    vn = substr($0, 1, RSTART - 1); vv = substr($0, RSTART + RLENGTH)
	    set_vi(si, vn); sivi2vv[si,vi] = vv
					## Split undented line into VN and VV,
	}				## map VN -> VI, and set value.
    }
    next
}

($1 == "has") {				## `has' instruction!
    sub(re_sk1, "")
    ((get_sn_vn_vv($0) > 1) && get_si(sn) && get_vi(si, vn)) || ++ec
    next
}

($1 == "get") {				## `get' instruction!
    sub(re_sk1, ""); dc = 0
    if ((nf = get_sn_vn_vv($0)) > 1) {	## Item split into SN and VN?
	if (sn != "*") {		## SN is specific?
	    if (get_si(sn) && get_vi(si, vn)) {
		print sivi2vv[si,vi]; ++dc
					## Print VV if SN -> SI and VN -> VI.
	    } else if (nf > 2) {
		print vv; ++dc		## Print default VV if not.
	    }
	} else for (si = 1; si <= sc; ++si) {
					## Foreach SI do...
	    if (has_si(si) && get_vi(si, vn)) {
		print sivi2vv[si,vi]; ++dc
	    }				## Print VV if VN -> VI within SI.
	}
    }
    dc || ++ec
    next
}

($1 == "put") {				## `put' instruction!
    sub(re_sk1, "")
    if ((nf = get_sn_vn_vv($0)) < 2) {	## Item not split?
	++ec				## Count error.
    } else if (nf > 2) {		## Item split into SN, VN, and VV?
	set_si(sn); set_vi(si, vn)	## Map SN -> SI, VN -> VI,
	sivi2vv[si,vi] = vv		## and set value.
	++mc				## Count modification.
    } else if (get_si(sn) && get_vi(si, vn) && (sivi2ai[si,vi] >= ac)) {
	delete sivi2vv[si,vi]		## Unset VV if SN -> SI and VN -> VI.
	++mc				## Count modification.
    }
    next
}

{					## None of the above!
    ++ec				## Count error.
    next
}

END {					## Finally!
    if (ec) exit 1			## Exit prematurely on errors.
    if (mc) for (si = 1; si <= sc; ++si)
	if (has_si(si) && (si2ai[si] >= ac) && has_vc(si)) {
		sn = si2sn[si]; sub("\\.", " \"", sn) && sub("$", "\"", sn)
		printf("[%s]\n", sn) > ai2av[ac]
		for (vi = 1; vi <= si2vc[si]; ++vi)
		    if (has_vi(si,vi) && (sivi2ai[si,vi] >= ac))
			printf("\t%s = %s\n", sivi2vn[si,vi], sivi2vv[si,vi]) > ai2av[ac]
	}
}
