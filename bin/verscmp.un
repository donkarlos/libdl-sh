#! /bin/sh
#-----------------------------------------------------------------------------
#   verscmp			- Compare version strings
#
#   Copyright © 2016-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2016-05-17
##  CHANGED BY:	ks	2018-02-27	Suppress leading zeros in numeric
##					parts and use ' ' as end-of-part
##					marker.
##		ks	2020-05-27	Instantiate demand-loading and use
##					libdl.sh's CS/RE definitions.
##		ks	2021-04-21	Warn about use of obsolete operators.
##					Alias obsolete operators '<'/'>' with
##					'<='/'>=', respectively.
##					Simplify "-nl" variant processing.
##					Treat missing VERSION2 as empty.
##		ks	2021-04-23	Catch internal errors.
##					Rename to `verscmp'.
##----------------------------------------------------------------------------
##  Initialization:
#-----------------------------------------------------------------------------
LC_ALL=C; export LC_ALL			## Avoid locale insanities.
command=`basename "$0"`; readonly command
					## Determine command name.
unset GETOPT_COMPATIBLE POSIXLY_CORRECT	## Make modern getopt(1) behave.

##----------------------------------------------------------------------------
##  verscmp_syntax(WHAT [ARG ...)	~~~~
##
##  Non-local variables:
##	- command	(R) command name
##	- &WHAT		(W) canonical WHAT
##----------------------------------------------------------------------------
verscmp_syntax() {
    case ${1+=} in
	=)  local what="$1" fs='#' vs=, sx obsolete; shift	;;
	*)  return 2						;;
    esac; case $#:$what in
	1:frontend)			## frontend FRONTEND...
	    sx='/^#f'"$fs"'[^'"$fs"']*'"$vs$1$vs"'/{
		s/^#.'"$fs$vs/$what"'=/;s/'"$vs"'.*$//;q
	    };$!d;s/^.*$/test/'
	    ;;
	1:backend)			## backend BACKEND...
	    sx='/^#b'"$fs"'[^'"$fs"']*'"$vs$1$vs"'/{
		s/^#.'"$fs$vs/$what"'=/;s/'"$vs"'.*$//;q
	    };$!d;s/^.*$/test/'
	    ;;
	*)				## Anything else...
	    return 2			## is abuse!
	    ;;
    esac; eval "`sed "$sx" <<EOF
#f${fs}${vs}dpkg${vs}deb${vs}
#b${fs}${vs}t{}${vs}test${vs}
EOF`" || case $what in
    frontend|backend)
	echo "$command: $1: no such $what!" >&2; return 1
	;;
esac
}

##----------------------------------------------------------------------------
##  verscmp_collate_dpkg(VERSION)
##				Collate valid dpkg(1) VERSION
##
##  NOTE:   (1)	Invoker must set "BorF=F" for "*-nl" operators (see dpkg(1))
##		to correctly collate an empty VERSION!
##	    (2)	Though technically the leading '#' sentinel isn't necessary,
##		it enables tracing intermediate substitutions done by sed(1),
##		as the surrounding "eval `...`" perceives them as comments.
##		Substitution tracing is enabled when "set -x" is in effect.
##	    (3)	Though technically not necessary, UVs are forced to start with
##		a number (to stay compatible to dpkg(1)'s notion of UVs).
##
##  Non-local variables:
##	- p		(R) 's///' print modifier for sed(1) tracing
##	- BorF		(R) see describtion below
##	- re_ED		(R) unanchored with-EP/with-DR version RE
##	- re_E_		(R) unanchored with-EP/sans-DR version RE
##	- re__D		(R) unanchored sans-EP/with-DR version RE
##	- re___		(R) unanchored sans-EP/sans-DR version RE
##	- dl_re_1n	(R) unanchored non-zero cardinal  RE
##	- dl_cs_0d	(R) (unbracketed) decimal digits character set
##	- dl_cs_al	(R) (unbracketed) ASCII letters  character set
##
##  The transformation is done in three stages:
##   1.	Validation:
##	 a) An empty VERSION is weighted B or F by the 1st sed(1) expr.
##	 b) The four VERSION syntax variants are validated by the 2nd to 5th
##	    sed(1) expr.s, prepending "#B#" (i.e., an empty string weighted B
##	    (and the default EP "0:" iff VERSION is sans-EP), so that the 2nd
##	    '#' sentinel is before the epoch number.
##	 c) A malformed VERSION is rejected by the 6th sed(1) expr.
##   2.	Collation (":1"..."t1" loop):
##	 a) Numeric parts have leading zero digits stripped and are ' '-sepa-
##	    rated from non-numeric parts by the 7th and 8th sed(1) expr.s (the
##	    latter being a special case for zero), advancing the 2nd sentinel
##	    before the following non-numeric part.
##	 b) Non-numeric parts are collated into lexicographic order character-
##	    by-character (advancing the 2nd sentinel) by the 9th..13th sed(1)
##	    expr.s as follows:
##	     * '~' is weighted A (thus << anything, even the empty string),
##	     * the empty string is weighted B (thus >> '~')
##	     * '-' is weighted C iff it separates UV from DR (thus << any let-
##		   ter and esp. << '+' in this case!),
##	     * any letter is weighted D, and
##	     * '+', '-', '.', or ':' are weighted E (thus >> letters).
##	 c) Collation ends when the 2nd sentinel has been advanced to EOL.
##   3. Emission:
##	The resulting transformed VERSION (between '#' sentinels) is compiled
##	into an echo(1) command by the final sed(1) expr. (which ultimately
##	emits the result when eval(1)uated).
##
##  By transforming VERSION in this fashion, neither special handling of empty
##  VERSIONs nor separate processing of EPs and/or DRs is necessary; just go
##  with the flow of the alternating parts, comparing
##    *	non-numeric parts lexicographically and
##    *	    numeric parts numerically.
##  Et voilà!
##----------------------------------------------------------------------------
verscmp_collate_dpkg() {
    case ${BorF-B} in			## $BorF must be 'B' or 'F' (got it?).
	B|F)		;;
	*)  return 2	;;
    esac

    eval "`sed '
	s/^$/#'"${BorF-B}"'#/'"$p"';t1
	s/^'"$re_ED"'$/#B#&/'"$p"';t1
	s/^'"$re_E_"'$/#B#&/'"$p"';t1
	s/^'"$re__D"'$/#B#0:&/'"$p"';t1
	s/^'"$re___"'$/#B#0:&/'"$p"';t1
	s/^.*$/test/;q;:1
	s/\([^#]\)#0*\('"$dl_re_1n"'\)\([^'"$dl_cs_0d"']*\)/\1 \2 #\3 /'"$p"';t1
	s/\([^#]\)#0*0\([^'"$dl_cs_0d"']*\)/\1 0 #\2 /'"$p"';t1
	s/\([^#]\)#~/\1A~#/'"$p"';t1
	s/\([^#]\)# /\1B#/'"$p"';t1
	s/\([^#]\)#-\([^-]*\)$/\1C-#\2/'"$p"';t1
	s/\([^#]\)#\(['"$dl_cs_al"']\)/\1D\2#/'"$p"';t1
	s/\([^#]\)#\(.\)/\1E\2#/'"$p"';t1
	s/^#/echo '"$SQ"'/;s/#$/'"$SQ"'/;q
    ' <<EOF
$1
EOF`"
}

##----------------------------------------------------------------------------
##  compare_versions(VERSION1 OP VERSION2)
##				Compare dpkg(1) versions VERSION1 and VERSION2
##				with comparison OPerator and return status re-
##				presenting comparison result
##
##  NOTE:   (1)	Shield from broken Solaris sed(1) by placing labels at EOL!
##	    (2)	Though technically the leading '#' sentinel isn't necessary,
##		it enables tracing intermediate substitutions done by sed(1),
##		as the surrounding "eval `...`" perceives them as comments.
##		Substitution tracing is enabled when "set -x" is in effect.
##----------------------------------------------------------------------------
compare_versions() {
    local eqn=-eq eqs== nes="$BS$BS"'!=' a='\&\&' o='||'		\
	  tv1 op tv2 BorF=B form opn ops

    case $# in				## Usage OK?
	[23])				## Yes,...
	    op=`expr "_$2" : '^_\(['"$dl_cs_ll]"'*\)-nl$'` && BorF=F || op=$2
					## Make empty VERSIONs >> any non-
					## empty version if OPerator is
					## "*-nl" variant.
	    case $op in			## Obsolete OPerator?
		'<'|'>')		## Yes, issue warning.
		    echo "$command: Used with obsolete relation operator $BQ$op$SQ." >&2
		    ;;
	    esac; case $op in		## Choose OPerator's compilation form
					## and (escaped) test(1) operators...
		lt|'<<')	form=va opn=-lt  ops="$BS$BS"'<';;
		le|'<='|'<')	form=vo opn=-lt  ops="$BS$BS"'<';;
		eq|'=='|'=')	form=-a opn=$eqn ops=$eqs	;;
		ne|'!='|'<>')	form=-o opn=-ne  ops=$nes	;;
		ge|'>='|'>')	form=vo opn=-gt  ops="$BS$BS"'>';;
		gt|'>>')	form=va opn=-gt  ops="$BS$BS"'>';;
		*)		return 3			;;
	    esac			## ...or reject unknown OPerator!

	    tv1=`verscmp_collate_dpkg "$1"` || return 4
					## Try to collate VERSION1.
	    tv2=`verscmp_collate_dpkg "${3-}"` || return 5
	    ;;				## Try to collate VERSION2.
	*)  return 2			## No, indicate misusage!
	    ;;
    esac

    ##------------------------------------------------------------------------
    ##	While compiling the comparison into a test(1) sequence, sed(1)'s pat-
    ##	tern space generally has the form
    ##	  "#"<FO>"#"<DE>"#"<TV1>"#"<TV2>"#"<AS>
    ##	where
    ##	  * <FO> is the chosen compilation form, i.e.
    ##	    "-a" for linear '&&' form (OPerator  "eq"),
    ##	    "-o" for linear '||' form (OPerator  "ne"),
    ##	    "va" for valley '&&' form (OPerators "lt"/"gt"), and
    ##	    "vo" for valley '||' form (OPerators "le"/"ge"),
    ##	  * <DE> is the DEscending test(1) sequence compiled so far,
    ##	  * <TV1> and <TV2> are the transformed versions' parts not compiled
    ##	    so far (in particular
    ##	      <TV1_Si>=<1Si>[" "<1Ni+1>" "<1Si+1>...] and
    ##	      <TV2_Si>=<2Si>[" "<2Ni+1>" "<2Si+1>...]
    ##	    when compiling the i-th string (non-numeric) part), or
    ##	      <TV1_Ni>=<1Ni>" "<1Si>[" "<1Ni+1>" "<1Si+1>...] and
    ##	      <TV2_Ni>=<2Ni>" "<2Si>[" "<2Ni+1>" "<2Si+1>...]
    ##      when compiling the i-th numeric part, and finally
    ##	  * <AS> is the AScending test(1) sequence compiled so far.
    ##	Initially (i=0), the pattern space (except for empty VERSIONs, see
    ##	below) is
    ##	  "#"<FO>"#"<DE_N0>"#"<TV1_N0>"#"<TV2_N1>"#"<AS_N0>,
    ##	with <DE_N0>=<AS_N0>="", so the non-numeric part pair <1S0>/<2S0>
    ##	is compiled first.
    ##
    ##	A numeric part pair <1Ni>/<2Ni> is compiled according to chosen form:
    ##	  * For linear '&&' form (OP "eq") in particular,
    ##	    <DE_Si>=<DE_Ni>"test "<1Ni>" $opn "<2Ni>" $a " and
    ##	    <AS_Si>=<AS_Ni>="".
    ##	  * For linear '||' form (OP "ne") in particular,
    ##	    <DE_Si>=<DE_Ni>"test "<1Ni>" $opn "<2Ni>" $o " and
    ##	    <AS_Si>=<AS_Ni>="".
    ##	  * For both valley forms (OPs "lt"/"le"/"ge"/"gt") in particular,
    ##	    <DE_Si>=<DE_Ni>"test "<1Ni>" $eqn "<2Ni>" $a { " and
    ##	    <AS_Si>="; } $o test "<1Ni>" $opn "<2Ni><AS_Ni>.
    ##	Field pair <1Ni>/<2Ni> is consumed, so the pattern space becomes
    ##	  "#"<FO>"#"<DE_Si>"#"<TV1_Si>"#"<TV2_Si>"#"<AS_Si>.
    ##
    ##	If both <1Si> and <2Si> are followed by
    ##	<1Ni+1>" "<1Si+1> and <2Ni+1>" "<2Si+1> respectively, the string
    ##	part pair <1Si>/<2Si> is compiled analoguous to numeric part pairs:
    ##	  * For linear '&&' form (OP "eq") in particular,
    ##	    <DE_Ni+1>=<DE_Si>"test "<1Si>" $ops "<2Si>" $a " and
    ##	    <AS_Ni+1>=<AS_Si>="".
    ##	  * For linear '||' form (OP "ne") in particular,
    ##	    <DE_Ni+1>=<DE_Si>"test "<1Si>" $ops "<2Si>" $o " and
    ##	    <AS_Ni+1>=<AS_Si>="".
    ##	  * For both valley forms (OPs "lt"/"le"/"ge"/"gt") in particular,
    ##	    <DE_Ni+1>=<DE_Si>"test "<1Si>" $eqs "<2Si>" $a { " and
    ##	    <AS_Ni+1>="; } $o test "<1Si>" $ops "<2Si><AS_Si>.
    ##	Again, the part pair is consumed, so the pattern space becomes
    ##	  "#"<FO>"#"<DE_Ni+1>"#"<TV1_Ni+1>"#"<TV2_Ni+1>"#"<AS_Ni+1>
    ##	and compilation continues with numeric part pair <1Ni+1>/<2Ni+1>.
    ##
    ##	Otherwise (<1Ni+1> not following or <2Ni+1> not following), the string
    ##	tail pair <TV1_Si>/<TV2_Si> is compiled by different rules:
    ##	  * For linear forms (OPs "eq"/"ne") in particular,
    ##	    <DE_Ni+1>=<DE_Si>"test $SQ"<TV1_Si>"$SQ $ops $SQ"<TV2_Si>"$SQ"
    ##	    and
    ##	    <AS_Ni+1>=<AS_Si>="".
    ##	  * For valley '&&' form (OPs "lt"/"gt") in particular,
    ##	    <DE_Ni+1>=<DE_Si>"test $SQ"<TV1_Si>"$SQ $nes $SQ"<TV2_Si>"$SQ $a "
    ##	    and
    ##	    <AS_Ni+1>="test $SQ"<TV1_Si>"$SQ $ops $SQ"<TV2_Si>"$SQ"<AS_Si>.
    ##	  * For valley '||' form (OPs "le"/"ge") in particular,
    ##	    <DE_Ni+1>=<DE_Si>"test $SQ"<TV1_Si>"$SQ $eqs $SQ"<TV2_Si>"$SQ $o "
    ##	    and
    ##	    <AS_Ni+1>="test "<TV1_Si>" $ops "<TV2_Si><AS_Si>.
    ##	Since what remains of both transformed versions is consumed now, the
    ##	3rd to 5th '#' separators are also consumed (glueing the <DE> and <AS>
    ##	parts together), so the pattern space becomes:
    ##	  "#"<FO>"#"<DE_Ni+1><AS_Ni+1>.
    ##  Finally stripping the leading "#"<FO>"" yields the test(1) sequence
    ##  that gets evaluated.
    ##
    ##	EXAMPLE:
    ##
    ##	compare_versions '0+0' lt '0-0'
    ##	  * transforms versions '0+0' and '0-0' into
    ##	    tv1=`verscmp_collate_dpkg 0+0`, i.e. tv1='B 0 E:B 0 E+B 0 B' and
    ##	    tv2=`verscmp_collate_dpkg 0-0`, i.e. tv2='B 0 E:B 0 C-B 0 B', then
    ##	  * compiles "#va##B 0 E:B 0 E+B 0 B#B 0 E:B 0 C-B 0 B#" into the
    ##	    test(1) sequence depicted (neatly folded to illustrate that in-
    ##      deed we must descend into, then ascend out of a valley) below:
    ##
    ##	  --.			     SHORTCUT			       .->
    ##	   T \ test B = B     && {    TAKEN     } || test B \< B;     / F
    ##	    T \ test 0 -eq 0   && {	|      } || test 0 -lt 0;    / F
    ##	     T \ test E:B = E:B && {	|     } || test E:B \< E:B; / F
    ##	      T \ test 0 -eq 0   && {	v    } || test 0 -lt 0;    / F
    ##	       F \ test E+B = C-B && { ---> } || test E+B \< C-B; / F
    ##		  \ test 0 -eq 0   && {    } || test 0 -lt 0;    /
    ##		   \ test 'B' \!= 'B'   &&  test 'B' \< 'B';    /
    ##		    `------------------------------------------´
    ##	  (<-- DEscending sequence -->)    (<--- AScending sequence ---->)
    ##	       ought to ensure "ne"		ought to ensure "lt"
    ##		   and does so			  but can't do so
    ##------------------------------------------------------------------------
    eval "`sed '
	:s
	s/^\(#-a#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1test \2 '"$ops"' \4 '"$a"' #\3#\5#/'"$p"';tn
	s/^\(#-o#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1test \2 '"$ops"' \4 '"$o"' #\3#\5#/'"$p"';tn
	s/^\(#v.#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1test \2 '"$eqs"' \4 '"$a"' { #\3#\5#; } '"$o"' test \2 '"$ops"' \4/'"$p"';tn
	s/^\(#-.#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1test '"$SQ"'\2'"$SQ $ops $SQ"'\3'"$SQ"'/'"$p"';tp
	s/^\(#va#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1test '"$SQ"'\2'"$SQ $nes $SQ"'\3'"$SQ"' '"$a"' test '"$SQ"'\2'"$SQ $ops $SQ"'\3'"$SQ"'/'"$p"';tp
	s/^\(#vo#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1test '"$SQ"'\2'"$SQ $eqs $SQ"'\3'"$SQ"' '"$o"' test '"$SQ"'\2'"$SQ $ops $SQ"'\3'"$SQ"'/'"$p"';tp
	s/^.*$/return 6/;q
	:n
	s/^\(#-a#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1test \2 '"$opn"' \4 '"$a"' #\3#\5#/'"$p"';ts
	s/^\(#-o#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1test \2 '"$opn"' \4 '"$o"' #\3#\5#/'"$p"';ts
	s/^\(#v.#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1test \2 '"$eqn"' \4 '"$a"' { #\3#\5#; } '"$o"' test \2 '"$opn"' \4/'"$p"';ts
	s/^.*$/return 6/;q
	:p
	s/^#..#//
	' <<EOF
#$form##$tv1#$tv2#
EOF`"
}

##----------------------------------------------------------------------------
##  verscmp_help()		Show help
##
##  Non-local variables:
##	- command	(R) command name
##----------------------------------------------------------------------------
verscmp_help() {
    cat <<EOF
Usage: $command [OPTION ...] VERSION1 OP VERSION2
	Compare version strings.

Valid options are:
 -h, --help		Show help
 -V, --version		Show version information
 -v, --verbose		Be verbose
 -m, --mode, --frontend=FRONTEND
			Collate VERSIONs with FRONTEND
EOF
}

##----------------------------------------------------------------------------
##  verscmp_version()		Show version and license information
##
##  Non-local variables:
##	- command	(R) command name
##----------------------------------------------------------------------------
verscmp_version() {
    cat <<EOF
$command (@PACKAGE_NAME@) @PACKAGE_VERSION@
Copyright © 2016-2021 Das Computerlabor
License GPLv2: GNU GPL version 2 or later
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please send bug reports to <@PACKAGE_BUGREPORT@>.
EOF
}

##----------------------------------------------------------------------------
##  Main program:
##----------------------------------------------------------------------------
(getopt -T) >/dev/null 2>&1 && {	## What getopt(1) are dealing with?
    echo "$command: Legacy getopt(1) found!" >&2; exit 2
					## Legacy; complain and abort!
} || case $? in
    4)	optstring=hVvm:
	longopts=trace,help,version,verbose,mode:,frontend:
					## Modern; preset short and long
	;;				## option lists.
    *)	echo "$command: Missing getopt(1)!" >&2
	exit 2				## None at all; complain and abort!
	;;
esac
args=`getopt -n"$command" -o"$optstring" -l"$longopts" -- ${1+"$@"}` || {
					## Options parsed?
    verscmp_help >&2; exit 2		## No, show help and abort!
}
eval set shiftee "$args"; unset optstring longopts args
unset TRACE action verbose frontend backend
while shift; do				## Process parsed options...
    case $1 in
	--trace)	TRACE='set -x'		;;
	-h|--help)	action=help		;;
	-V|--version)	action=version		;;
	-v|--verbose)	verbose=y		;;
	-m|--mode|--frontend)
			shift; frontend=$1	;;
	--)		shift; break		;;
    esac
done; case ${action-} in
    help)	verscmp_help   ; exit 0	;;
    version)	verscmp_version; exit 0	;;
esac

eval "`libdl-sh load`"			## Instantiate demand-loading, defin-
					## ing libdl.sh's CS/RE constants.
cr_ED='[-:+.~'"$dl_cs_an]"		## Construct with-EP/with-DR, with-EP/
cr_E_='[:+.~'"$dl_cs_an]"		## sans-DR, sans-EP/with-DR, and
cr__D='[-+.~'"$dl_cs_an]"		## sans-EP/sans-DR upstream version
cr___='[+.~'"$dl_cs_an]"		## (UV) character ranges as well as
cr_0d="[$dl_cs_0d]"			## decimal digit character range
readonly cr_ED cr_E_ cr__D cr___ cr_0d	## constants.

re_D="-$cr___*"				## Construct unanchored Debian revi-
re_ED="$dl_re_0n:$cr_0d$cr_ED*$re_D"	## sion (DR) as well as with-EP/with-
re_E_="$dl_re_0n:$cr_0d$cr_E_*"		## DR, with-EP/sans-DR, sans-EP/with-
re__D="$cr_0d$cr__D*$re_D"		## DR, and sans-EP/sans-DR Debian ver-
re___="$cr_0d$cr___*"			## sion RE constants.
readonly re_D re_ED re_E_ re__D re___

${TRACE-}				## Start tracing if requested.
case $- in *x*) p=p;; *) p=;; esac	## Prepare sed(1) tracing.

verscmp_syntax frontend "${frontend-dpkg}"				&&
verscmp_syntax backend "${backend-test}" || exit 2
					## Validate (and canonify) front- and
					## backend or die.
compare_versions ${1+"$@"} || case $? in
    1)							 exit 1	;;
    2)	echo "Usage: $command VERSION1 OP VERSION2" >&2; exit 2	;;
    3)	echo "$command: Unknown operator $QB$2$QE!" >&2; exit 2	;;
    4)	echo "$command: Invalid version $QB$1$QE!"  >&2; exit 2	;;
    5)	echo "$command: Invalid version $QB$3$QE!"  >&2; exit 2	;;
    6)	echo "$command: Internal error!"	    >&2; exit 2	;;
esac; case ${verbose-n} in
    y)	echo "$1 $2 $3"
esac
