#! /bin/sh
#-----------------------------------------------------------------------------
#   verscmp			- Compare version strings
#
#   Copyright Â© 2016-2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2016-05-17
##  CHANGED BY:	ks	2018-02-27	Suppress leading zeros in numeric
##					parts and use ' ' as end-of-part
##					marker.
##		ks	2020-05-27	Instantiate demand-loading and use
##					libdl.sh's CS/RE definitions.
##		ks	2021-04-21	Warn about use of obsolete operators.
##					Alias obsolete operators '<'/'>' with
##					'<='/'>=', respectively.
##					Treat missing VERSION2 as empty.
##		ks	2021-04-23	Catch internal errors.
##					Rename to `verscmp'.
##		ks	2021-04-25	Use table-driven implementation.
##		ks	2021-06-01	Spread sed(1) tracing preparation.
##----------------------------------------------------------------------------
##  Initialization:
#-----------------------------------------------------------------------------
LC_ALL=C; export LC_ALL			## Avoid locale insanities.
command=`basename "$0"`; readonly command
					## Determine command name.
unset GETOPT_COMPATIBLE POSIXLY_CORRECT	## Make modern getopt(1) behave.

eval "`libdl-sh load`"			## Instantiate demand-loading, defin-
					## ing libdl.sh's CS/RE constants.
cr_ED='[-:+.~'"$dl_cs_an]"		## Construct with-EP/with-DR, with-EP/
cr_E_='[:+.~'"$dl_cs_an]"		## sans-DR, sans-EP/with-DR, and
cr__D='[-+.~'"$dl_cs_an]"		## sans-EP/sans-DR upstream version
cr___='[+.~'"$dl_cs_an]"		## (UV) character ranges as well as
cr_0d="[$dl_cs_0d]"			## decimal digit character range
readonly cr_ED cr_E_ cr__D cr___ cr_0d	## constants.

re_D="-$cr___*"				## Construct unanchored Debian revi-
re_ED="$dl_re_0n:$cr_0d$cr_ED*$re_D"	## sion (DR) as well as with-EP/with-
re_E_="$dl_re_0n:$cr_0d$cr_E_*"		## DR, with-EP/sans-DR, sans-EP/with-
re__D="$cr_0d$cr__D*$re_D"		## DR, and sans-EP/sans-DR Debian ver-
re___="$cr_0d$cr___*"			## sion RE constants.
readonly re_D re_ED re_E_ re__D re___

shbc="$BS&$BS&"	  shbd='||'	 shlb='{'	shrb='}'
exbc="$BS$BS$BS&" exbd="$BS$BS|" exlb="$BS$BS("	exrb="$BS$BS)"
readonly shbc shbd shlb shrb exbc exbd exlb exrb
					## Preset string, numeric, and boolean
					## operators as well as left and right
					## braces (as if they'd been quoted
					## with 'quote_rs').
slt="$BS$BS"'<'	sle="$BS$BS"'<=' seq='='
sgt="$BS$BS"'>'	sge="$BS$BS"'>=' sne="$BS$BS"'!='
nlt=-lt		nle=-le		 neq=-eq
ngt=-gt		nge=-ge		 nne=-ne
readonly slt sle seq sgt sge sne nlt nle neq ngt nge nne
					## Preset string and numeric compari-
					## son operators (as if they'd been
					## quoted with 'quote sh rs /').
default_frontend=simple default_backend=fast
readonly default_frontend default_backend
					## Define default front- and backend.

##----------------------------------------------------------------------------
##  verscmp_syntax(WHAT [ARG ...])	Do syntax table lookup
##
##  Non-local variables:
##	- command	(R) command name
##	- &WHAT		(W) canonical WHAT
##----------------------------------------------------------------------------
verscmp_syntax() {
    local p= fs='%' vs=, obsolete	## Preset field/variant separators.
    case $- in *x*) p=p;; esac		## Prepare sed(1) tracing.

    case $#${1+=$1} in			## Usage OK?/WHAT [ARG ...]?
	[12]=list-frontends)		## Y/list-frontends [DEFAULT]:
	    sed '/^#f'"$fs"'[^'"$fs$vs"']*'"$vs"'\([^'"$fs"']*\)'"$fs"'.*$/{
		s//\1/;s/[ 	]*$//;H
	    };$!d;g;s/'"$BS$NL"'//g;s/^/ /;s/'"$vs"'/& /g'${2+';s/ \('"$2"'\),/ \1 (default),/'}';s/^ //;s/, *$//'
	    ;;
	2=frontend)			## Y/frontend FRONTEND:
	    eval "`sed '/^#f'"$fs"'[^'"$fs"']*'"$vs$2$vs"'/{'"${p:+;$p}"'
		s/'"$SQ"'/&'"$BS$BS"'&&/g'"$p"'
		s/^#.'"$fs$vs/#$1=$SQ"'/'"$p"'
		s/'"$vs"'[^'"$fs"']*'"$fs"'/'"$SQ"' ftag='"$SQ"'/'"$p"'
		s/'"$fs"'.*$//'"$p"';s/$/'"$SQ"'; readonly ftag/'"$p"'
		s/^#//;q
	    };$!d;s/^.*$/test/'`"
	    ;;
	[12]=list-backends)		## Y/list-backends [DEFAULT]:
	    sed '/^#b'"$fs"'[^'"$fs$vs"']*'"$vs"'\([^'"$fs"']*\)'"$fs"'.*$/{
		s//\1/;s/[ 	]*$//;H
	    };$!d;g;s/'"$BS$NL"'//g;s/^/ /;s/'"$vs"'/& /g'${2+';s/ \('"$2"'\),/ \1 (default),/'}';s/^ //;s/, *$//'
	    ;;
	2=backend)			## Y/backend BACKEND:
	    eval "`sed '/^#b'"$fs"'[^'"$fs"']*'"$vs$2$vs"'/{'"${p:+;$p}"'
		s/'"$SQ"'/&'"$BS$BS"'&&/g'"$p"'
		s/^#.'"$fs$vs/#$1=$SQ"'/'"$p"'
		s/'"$vs"'[^'"$fs"']*'"$fs"'/'"$SQ"' tnl='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' lh0='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' lh1='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' bh1='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' rh1='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' rh0='"$SQ"'/'"$p"'
		s/'"$fs"'.*$//'"$p"';s/$/'"$SQ"'; readonly tnl lh0 lh1 bh1 rh1 rh0/'"$p"'
		s/^#//;q
	    };$!d;s/^.*$/test/'`"
	    ;;
	4=operator)			## Y/operator FRONTEND BACKEND OP:
	    eval "`sed '/^#o'"$fs"'[^'"$fs"']*'"$vs$2$vs"'[^'"$fs"']*'"$fs"'[^'"$fs"']*'"$vs$3$vs"'[^'"$fs"']*'"$fs"'[^'"$fs"']*'"$vs$4$vs"'/{'"${p:+;$p}"'
		s/'"$SQ"'/&'"$BS$BS"'&&/g'"$p"'
		s/^#.'"$fs"'[^'"$fs"']*'"$fs"'[^'"$fs"']*'"$fs$vs/#$1=$SQ"'/'"$p"'
		s/'"$vs"'[^'"$fs"']*'"$fs"'/'"$SQ"' form='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' sop='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' nop='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' BorF='"$SQ"'/'"$p"'
		s/'"$fs"'/'"$SQ"' obsolete='"$SQ"'/'"$p"'
		s/'"$fs"'.*$//'"$p"';s/$/'"$SQ"'; readonly form sop nop/'"$p"'
		s/^#//;q
	    };$!d;s/^.*$/test/'`"
	    ;;
	*)  return 2			## N/?: Indicate abuse!
	    ;;
    esac <<EOF
#f${fs}${vs}dpkg${vs}deb${vs}	${fs}d
#f${fs}${vs}stow${vs}simple${vs}${fs}s
#b${fs}${vs}test${vs}${fs}${fs}test ${fs} $shbc $shlb test ${fs} $shbd test ${fs}; $shrb $shbd test ${fs}
#b${fs}${vs}expr${vs}${fs}s${fs}expr ${fs} >$BS/dev$BS/null $shbc $shlb expr ${fs}${fs} >$BS/dev$BS/null; $shrb $shbd expr ${fs} >/dev/null
#b${fs}${vs}fast${vs}${fs}s${fs}expr ${fs} $exbc $exlb ${fs}${fs} $exrb $exbd ${fs} >/dev/null
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}lt${vs}<<${vs}		   ${fs}tb-${fs}$slt${fs}$nlt
#o${fs}${vs}stow${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}lt${vs}<${vs}		   ${fs}tb-${fs}$slt${fs}$nlt
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}test${vs}	  ${fs}${vs}lt-nl${vs}			   ${fs}tb-${fs}$slt${fs}$nlt${fs}F
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}test${vs}	  ${fs}${vs}le${vs}<=${vs}		   ${fs}tbd${fs}$slt${fs}$nlt
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}test${vs}	  ${fs}${vs}le-nl${vs}			   ${fs}tbd${fs}$slt${fs}$nlt${fs}F
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}le${vs}<${vs}		   ${fs}tbd${fs}$slt${fs}$nlt${fs}${fs}y
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}eq${vs}eq-nl${vs}==${vs}=${vs} ${fs}t--${fs}$seq${fs}$neq
#o${fs}${vs}stow${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}eq${vs}eq-nl${vs}==${vs}	   ${fs}t--${fs}$seq${fs}$neq
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}ne${vs}ne-nl${vs}!=${vs}<>${vs}${fs}t--${fs}$sne${fs}$nne
#o${fs}${vs}stow${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}ne${vs}ne-nl${vs}!=${vs}	   ${fs}t--${fs}$sne${fs}$nne
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}test${vs}	  ${fs}${vs}ge${vs}>=${vs}		   ${fs}tbd${fs}$sgt${fs}$ngt
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}test${vs}	  ${fs}${vs}ge-nl${vs}			   ${fs}tbd${fs}$sgt${fs}$ngt${fs}F
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}ge${vs}>${vs}		   ${fs}tbd${fs}$sgt${fs}$ngt${fs}${fs}y
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}gt${vs}>>${vs}		   ${fs}tb-${fs}$sgt${fs}$ngt
#o${fs}${vs}stow${vs}	      ${fs}${vs}test${vs}	  ${fs}${vs}gt${vs}>${vs}		   ${fs}tb-${fs}$sgt${fs}$ngt
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}test${vs}	  ${fs}${vs}gt-nl${vs}			   ${fs}tb-${fs}$sgt${fs}$ngt${fs}F
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}lt${vs}<<${vs}		   ${fs}eb-${fs}$slt${fs}$slt
#o${fs}${vs}stow${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}lt${vs}<${vs}		   ${fs}eb-${fs}$slt${fs}$slt
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}expr${vs}fast${vs}${fs}${vs}lt-nl${vs}			   ${fs}eb-${fs}$slt${fs}$slt${fs}F
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}expr${vs}fast${vs}${fs}${vs}le${vs}<=${vs}		   ${fs}eb-${fs}$slt${fs}$sle
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}expr${vs}fast${vs}${fs}${vs}le-nl${vs}			   ${fs}eb-${fs}$slt${fs}$sle${fs}F
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}le${vs}<${vs}		   ${fs}eb-${fs}$slt${fs}$sle${fs}${fs}y
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}eq${vs}eq-nl${vs}==${vs}=${vs} ${fs}e--${fs}$seq${fs}$seq
#o${fs}${vs}stow${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}eq${vs}eq-nl${vs}==${vs}	   ${fs}e--${fs}$seq${fs}$seq
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}ne${vs}ne-nl${vs}!=${vs}<>${vs}${fs}e--${fs}$sne${fs}$sne
#o${fs}${vs}stow${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}ne${vs}ne-nl${vs}!=${vs}	   ${fs}e--${fs}$sne${fs}$sne
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}expr${vs}fast${vs}${fs}${vs}ge${vs}>=${vs}		   ${fs}eb-${fs}$sgt${fs}$sge
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}expr${vs}fast${vs}${fs}${vs}ge-nl${vs}			   ${fs}eb-${fs}$sgt${fs}$sge${fs}F
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}ge${vs}>${vs}		   ${fs}eb-${fs}$sgt${fs}$sge${fs}${fs}y
#o${fs}${vs}dpkg${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}gt${vs}>>${vs}		   ${fs}eb-${fs}$sgt${fs}$sgt
#o${fs}${vs}stow${vs}	      ${fs}${vs}expr${vs}fast${vs}${fs}${vs}gt${vs}>${vs}		   ${fs}eb-${fs}$sgt${fs}$sgt
#o${fs}${vs}dpkg${vs}stow${vs}${fs}${vs}expr${vs}fast${vs}${fs}${vs}gt-nl${vs}			   ${fs}eb-${fs}$sgt${fs}$sgt${fs}F
EOF
    case $?:$1:${obsolete-} in		## What's the lookup's outcome?
	1:frontend:|1:backend:)		## Unknown front-/backend:
	    echo "$command: $2: no such $1!" >&2; return 1
	    ;;				## Complain and indicate failure!
	1:operator:*)			## Unknown operator:
	    echo "$command: $4: no such $1!" >&2; return 1
	    ;;				## Complain and indicate failure!
	0:operator:y)			## Obsolete operator:
	    echo "$command: $4: obsolete relational operator (use $QB$operator$QE instead)." >&2
	    ;;				## Issue warning.
    esac
}

##----------------------------------------------------------------------------
##  verscmp_collate_version(VERSION)
##				Validate and collate version for frontends
##				"dpkg" and "stow"
##
##  NOTE:   (1)	The invoker must set "BorF=F" for "*-nl" operators (see
##		verscmp_syntax() above) to correctly collate empty versions!
##	    (2)	The invoker must set "ftag=d" or "ftag=s" for frontends
##		"dpkg" or "stow", respectively!
##	    (3)	Though technically the leading '#' sentinel isn't necessary,
##		it enables tracing intermediate substitutions done by sed(1),
##		as the surrounding "eval `...`" perceives them as comments.
##		Substitution tracing is enabled when "set -x" is in effect.
##	    (4)	Though technically not necessary, UVs are forced to start with
##		a number (to stay compatible to dpkg(1)'s notion of UVs).
##
##  Non-local variables:
##	- BorF		(R) see note (1)
##	- ftag		(R) see note (2)
##	- re_ED		(R) unanchored with-EP/with-DR version RE
##	- re_E_		(R) unanchored with-EP/sans-DR version RE
##	- re__D		(R) unanchored sans-EP/with-DR version RE
##	- re___		(R) unanchored sans-EP/sans-DR version RE
##	- dl_re_1n	(R) unanchored cardinal number RE
##	- dl_cs_0d	(R) (unbracketed) decimal digits character set
##	- dl_cs_al	(R) (unbracketed) ASCII letters  character set
##
##  VERSION is collated in three stages:
##   1.	Validation:
##	 a) An empty VERSION is weighted B or F by the 1st sed(1) expr.
##	 b) The four VERSION syntax variants are validated by the 2nd to 5th
##	    sed(1) expr.s, prepending "#B#" (i.e., an empty string weighted B
##	    (and the default EP "0:" iff VERSION is sans-EP), so that the 2nd
##	    '#' sentinel is before the epoch number.
##	 c) A malformed VERSION is rejected by the 6th sed(1) expr.
##   2.	Collation (":1"..."t1" loop):
##	 a) Numeric parts have leading zero digits stripped and are ' '-sepa-
##	    rated from non-numeric parts by the 7th and 8th sed(1) expr.s (the
##	    latter being a special case for zero), advancing the 2nd sentinel
##	    before the following non-numeric part.
##	 b) Non-numeric parts are collated into lexicographic order character-
##	    by-character (advancing the 2nd sentinel) by the 9th..13th sed(1)
##	    expr.s as follows:
##	     * '~' is weighted A (thus << anything, even the empty string),
##	     * the empty string is weighted B (thus >> '~')
##	     * '-' is weighted C iff it separates UV from DR (thus << any let-
##		   ter and esp. << '+' in this case!),
##	     * any letter is weighted D, and
##	     * '+', '-', '.', or ':' are weighted E (thus >> letters).
##	 c) Collation ends when the 2nd sentinel has been advanced to EOL.
##   3. Emission:
##	The resulting transformed VERSION (between '#' sentinels) is compiled
##	into an echo(1) command by the final sed(1) expr. (which ultimately
##	emits the result when eval(1)uated).
##
##  The collated VERSION emitted has the following properties:
##  (1) It's a space-separated sequence of alternating (collated) non-numeric
##	and numeric (with leading zero digits removed) parts
##  (2) whose first part is always non-nuemric part, i.e. it matches the RE
##	"<STR>[ <NUM> <STR>]*".
##
##  Consequently, neither
##    â¢	special handling of empty VERSIONs nor
##    â¢	special handling of EPs and/or DRs is necessary; the comparison is
##  simply done part-by-part, comparing
##    â¢	non-numeric parts lexicographically and
##    â¢	    numeric parts numerically.
##  Et voilÃ !
##----------------------------------------------------------------------------
verscmp_collate_version() {
    local p=; case $- in *x*) p=p;; esac
					## Prepare sed(1) tracing.
    case ${2+2}${1+=}/${BorF:=B}/${ftag+=$ftag} in
					## Usage OK?
	=/[BF]/=[ds])	;;		## Yes.
	*)  return 2	;;		## No, indicate abuse!
    esac; eval "`sed '
	s/^#[ds]#$/#'"$BorF"'#/'"$p"';t1
	s/^#d#\('"$re_ED"'\)$/#B#\1/'"$p"';t1
	s/^#d#\('"$re_E_"'\)$/#B#\1/'"$p"';t1
	s/^#d#\('"$re__D"'\)$/#B#0:\1/'"$p"';t1
	s/^#d#\('"$re___"'\)$/#B#0:\1/'"$p"';t1
	s/^#s#\('"$re___"'\)$/#B#\1/'"$p"';t1
	s/^.*$/test/;q;:1
	s/\([^#]\)#0*\('"$dl_re_1n"'\)\([^'"$dl_cs_0d"']*\)/\1 \2 #\3 /'"$p"';t1
	s/\([^#]\)#0*0\([^'"$dl_cs_0d"']*\)/\1 0 #\2 /'"$p"';t1
	s/\([^#]\)#~/\1A~#/'"$p"';t1
	s/\([^#]\)# /\1B#/'"$p"';t1
	s/\([^#]\)#-\([^-]*\)$/\1C-#\2/'"$p"';t1
	s/\([^#]\)#\(['"$dl_cs_al"']\)/\1D\2#/'"$p"';t1
	s/\([^#]\)#\(.\)/\1E\2#/'"$p"';t1
	s/^#/echo '"$SQ"'/;s/#$/'"$SQ"'/;q
    ' <<EOF
#$ftag#$1
EOF`"
}

##----------------------------------------------------------------------------
##  verscmp_help()		Show help
##
##  Non-local variables:
##	- command	(R) command name
##----------------------------------------------------------------------------
verscmp_help() {
    cat <<EOF
Usage: $command [OPTION ...] VERSION1 OP VERSION2
	Compare version strings.

Valid options are:
 -h, --help		Show help
 -V, --version		Show version information
 -v, --verbose		Be verbose
 -m, --mode, --frontend=FRONTEND
			Collate VERSIONs with FRONTEND
     --target, --backend=BACKEND
			Compile with BACKEND

Valid frontends are: `verscmp_syntax list-frontends $default_frontend`
Valid backends  are: `verscmp_syntax list-backends  $default_backend`
EOF
}

##----------------------------------------------------------------------------
##  verscmp_version()		Show version and license information
##
##  Non-local variables:
##	- command	(R) command name
##----------------------------------------------------------------------------
verscmp_version() {
    cat <<EOF
$command (@PACKAGE_NAME@) @PACKAGE_VERSION@
Copyright Â© 2016-2021 Das Computerlabor
License GPLv2: GNU GPL version 2 or later
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please send bug reports to <@PACKAGE_BUGREPORT@>.
EOF
}

##----------------------------------------------------------------------------
##  Main program:
##----------------------------------------------------------------------------
(getopt -T) >/dev/null 2>&1 && {	## What getopt(1) are dealing with?
    echo "$command: Legacy getopt(1) found!" >&2; exit 2
					## Legacy; complain and abort!
} || case $? in
    4)	optstring=hVvm:
	longopts=trace,help,version,verbose,mode:,frontend:
	longopts=$longopts,target:,backend:
					## Modern; preset short and long
	;;				## option lists.
    *)	echo "$command: Missing getopt(1)!" >&2
	exit 2				## None at all; complain and abort!
	;;
esac
args=`getopt -n"$command" -o"$optstring" -l"$longopts" -- ${1+"$@"}` || {
					## Options parsed?
    verscmp_help >&2; exit 2		## No, show help and abort!
}
eval set shiftee "$args"; unset optstring longopts args
frontend=$default_frontend backend=$default_backend
					## Preset front- and backend from
unset TRACE status action verbose	## defaults.
while shift; do				## Process parsed options...
    case $1 in
	--trace)	TRACE='set -x'		;;
	-h|--help)	action=help		;;
	-V|--version)	action=version		;;
	-v|--verbose)	verbose=y		;;
	-m|--mode|--frontend)
			shift; frontend=$1	;;
	--target|--backend)
			shift; backend=$1	;;
	--)		shift; break		;;
    esac
done; unset ftag lh0 lh1 bh1 rh1 rh0 operator form sop nop BorF
verscmp_syntax frontend "$frontend" && verscmp_syntax backend  "$backend" || {
    exit 2				## Validate (and canonify) front- and
}					## backend or die.
case ${action-} in			## Perform which action?
    help)	    verscmp_help   ; exit 0	;;
    version)	    verscmp_version; exit 0	;;
esac
${TRACE-}				## Start tracing if requested.
case ${4+4}${3+=}${2+=} in		## Usage OK?
    =*)					## Yes,...
	verscmp_syntax operator "$frontend" "$backend" "$2" || exit 2
					## Validate (and canonify) operator
					## or die.
	tv1=`verscmp_collate_version "$1"` || {
	    echo "$command: Invalid version $QB$1$QE!" >&2; exit 2
	}				## Collate VERSION1 or die.
	tv2=`verscmp_collate_version "${3-}"` || {
	    echo "$command: Invalid version $QB${3-}$QE!" >&2; exit 2
	}				## Collate VERSION2 or die.
	;;
    *)  verscmp_help >&2; exit 2	## No, indicate abuse!
	;;
esac

p=; case $- in *x*) p=p;; esac		## Prepare sed(1) tracing.
eval "`sed "$p"'
    :s
    s/^\(#.--#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1'"$SQ"'\2'"$SQ $sop $SQ"'\3'"$SQ"'/'"$p"';tp
					## Compile equivalence relation.
    s/^\(#.b.#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1\2 '"$seq"' \4'"$lh1"'#\3#\5#'"$rh1"'\2 '"$sop"' \4/'"$p"';t'"${tnl:-n}"'
					## Compile order relation (with both
					## collated versions having more than
					## one part left).
    s/^\(#.bd#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1'"$SQ"'\2'"$SQ $seq $SQ"'\3'"$SQ$bh1$SQ"'\2'"$SQ $sop $SQ"'\3'"$SQ"'/'"$p"';tp
    s/^\(#eb-#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1'"$SQ"'\2'"$SQ $nop $SQ"'\3'"$SQ"'/'"$p"';tp
    s/^\(#tb-#[^#]*\)#\([^#]*\)#\([^#]*\)#/\1'"$SQ"'\2'"$SQ $sop $SQ"'\3'"$SQ"'/'"$p"';tp
					## Compile order relation (with at
					## least one collated version having
					## only one part left).
    s/^.*$/status=6; test/;q
    :n
    s/^\(#.b.#[^#]*\)#\([^ #]*\) \([^#]*\)#\([^ #]*\) \([^#]*\)#/\1\2 '"$neq"' \4'"$lh1"'#\3#\5#'"$rh1"'\2 '"$nop"' \4/'"$p"';ts
					## Compile order relation (with both
					## collated versions having more than
					## one part left).
    s/^.*$/status=6; test/;q
    :p
    s/^#[^#]*#//
' <<EOF
#$form#$lh0#$tv1#$tv2#$rh0
EOF`" || case $?:${status-0} in
    1:6)    echo "$command: Internal backend error!" >&2; exit 2;;
    *)	    exit $?						;;
esac; case ${verbose-n} in
    y)	echo "$1 $operator $3"
esac
