.\"								-*- nroff -*-
.\" libsafe.3sh			- libsafe(3sh) manual page
.\"
.\" Copyright (C) 2016 Das Computerlabor (DCl-M)
.\"
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public License
.\" as published by the Free Software Foundation; either
.\" version 2.1 of the License, or (at your option) any later version.
.\"
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public License
.\" along with this library; if not, write to the Free Software Founda-
.\" tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
.\"
.\# AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
.\#
.\# WRITTEN BY:	ks	2016-05-16
.\# CHANGED BY:	ks	2016-05-21	Withdraw 'safe_meta get apis' brief
.\#					format.
.\#		ks	2016-05-24	Add 'meta get package/version'.
.\#					Use 'meta get apis' separator ';'.
.\#
.\# NOTE: (1)	Please adjust below date whenever revising the manual page.
.\#		vvvvvv
.TH libsafe 3SH 2016-05-24 "@PACKAGE_TARNAME@ @PACKAGE_VERSION@" "Shell Programming"

.SH NAME
safe_init, safe_mktmpdir, safe_mkdir, safe_chdir, safe_touch, safe_save,
safe_rename, safe_remove, safe_umask, safe_unlock, safe_lock, safe_wait
safe_meta \- Safe directory and file operations

.SH SYNOPSIS
\fBdl_load safe\fP

\fBsafe_init\fP \fITAG\fP
.br
\fBsafe_mktmpdir\fP &\fIDPN\fP [\fIDRN\fP]
.br
\fBsafe_mkdir\fP \fIDPN\fP ...
.br
\fBsafe_chdir\fP \fIDPN\fP
.br
\fBsafe_touch\fP \fIFPN\fP ...
.br
\fBsafe_save\fP \fIFPN\fP
.br
\fBsafe_rename\fP \fIOLDPN\fP \fINEWPN\fP
.br
\fBsafe_remove\fP \fIPN\fP ...
.br
\fBsafe_umask\fP \fIUMASK\fP \fICOMMAND\fP [\fIARGUMENT\fP ...]
.br
\fBsafe_lock\fP \fIPN\fP
.br
\fBsafe_wait\fP \fIPN\fP [\fISECONDS\fP=30]
.br
\fBsafe_meta\fP \fIMETA\fP [\fIARG\fP ...]

.SH DESCRIPTION
The safe directory and file operations library \fBlibsafe.sh\fP exploits the
undo stack management library \fBlibundo\fP(3sh) to provide safe variants of
common operations like \fBmkdir\fP(1), \fBtouch\fP(1) file into existence,
etc. to applications and/or other libraries.

.SH FUNCTIONS
.TP 4
\fBsafe_init\fP \fITAG\fP
Register cleanup \fITAG\fP and pass it on to the undo stack management library
(with \fBundo_init\fP(3sh)).

.TP
\fBsafe_mktmpdir\fP &\fIDPN\fP [\fIDRN\fP]
Make a temporary directory and push a cleanup that removes it. If \fIDRN\fP is
specified, also make that subdirectory within the temporary directory. In
either case, assign the resulting directory's pathname to variable \fIDPN\fP.

Note that the temporary directory only will be made by the first invocation,
whereas new subdirectories may be made by subsequent invocations.

.TP
\fBsafe_mkdir\fP \fIDPN\fP ...
Unless they exist, recursively make directories \fIDPN\fP and their parent
directories, pushing undos for each directory made.

.TP
\fBsafe_chdir\fP \fIDPN\fP
Change to directory \fIDPN\fP and push an undo that, when pulled, changes back
to the current directory.

.TP
\fBsafe_touch\fP \fIFPN\fP ...
Unless they exist, touch files \fIFPN\fP into existence after recursively
making their parent directories, pushing undos for each file created and/or
directory made.

.TP
\fBsafe_save\fP \fIFPN\fP
Unless it had been backed up already, take a backup copy of file \fIFPN\fP,
push a cleanup removing the backup, and push an undo moving the backup back
to \fIFPN\fP.

.TP
\fBsafe_rename\fP \fIOLDPN\fP \fINEWPN\fP
If it's safe to move \fIOLDPN\fP to \fINEWPN\fP (i.e., \fIOLDPN\fP exists but
\fINEWPN\fP does not), move \fIOLDPN\fP to \fINEWPN\fP and push an undo moving
\fINEWPN\fP back to \fIOLDPN\fP.

.TP
\fBsafe_remove\fP \fIPN\fP ...
Backup directories and/or files \fIPN\fP into a \fBtar\fP(1) archive, remove
them and push an undo that restores the backed-up directories/files from the
archive.

.TP
\fBsafe_umask\fP \fIUMASK\fP \fICOMMAND\fP [\fIARGUMENT\fP ...]
Execute \fICOMMAND\fP [\fIARGUMENT\fP ...] with the umask temporarily set
to \fIUMASK\fP.

.TP
\fBsafe_lock\fP \fIPN\fP
Unless the application already locked \fIPN\fP, safely make \fIPN\fP's parent
directory (see \fBsafe_mkdir\fP above), then try to make lock directory
\fIPN\fP\fB~lock\fP (which is as atomic as possible for portable \fBsh\fP(1)
code), and if that succeeds, push a cleanup unlocking \fIPN\fP and remember
that \fIPN\fP has been locked, so that future invocations of
\fBsafe_lock\fP \fIPN\fP succeed immediately.

Note that \fIPN\fP itself doesn't need to exist for successfully locking it.

.TP
\fBsafe_wait\fP \fIPN\fP [\fISECONDS\fP=30]
Unless locking \fIPN\fP (with \fBsafe_lock\fP \fIPN\fP) succeeds, sleep for a
second, then retry for at most SECONDS times.

.TP
\fBsafe_meta\fP \fIMETA\fP [\fIARG\fP ...]
Perform one of \fBlibsafe.sh\fP's meta operations. These allow to inquire
certain library internals in a controlled manner. Currently, the following
meta operations are implemented:
.RS 4
.TP 4
\fBget package\fP|\fBversion\fP|\fBapi\fP
Inquire library's source package name (\fB@PACKAGE_TARNAME@\fP), version
(\fB@PACKAGE_VERSION@\fP), or selected API version and write it to standard
output.

.TP
\fBget apis\fP [\fIFORMAT\fP=api [\fISEDEX\fP]]
Inquire information about available API versions and write them to standard
output. The information written depends on the output \fIFORMAT\fP:
.RS 4
.IP \(em 2
\fBapi\fP (the default format) represents each API version by a line
containing \fIVERSION\fP.

.IP \(em
\fBfull\fP represents each function within each API version by a line of three
semicolon-separated fields: \fIVERSION\fP, \fISIGNATURE\fP, and \fIARGCS\fP,
where the second has the format \fINAME\fP\fB(\fP\fIARGS\fP\fB)\fP and the
latter is a (possibly open) range of valid $# values.

For example, for API 0, \fBsafe_mkdir\fP(3sh) and \fBsafe_chdir\fP(3sh) would
be represented by the following two lines:

.in +4
\fB0;safe_mkdir(DPN ...);1-\fP
.br
\fB0;safe_chdir(DPN);1\fP
.in -4

.IP \(em
\fBlist\fP is similar to \fBfull\fP, except that \fB(\fP\fIARGS\fP\fB)\fP in
the second field is omitted (i.e., just the function name is shown)
.RE

.RS 4
For output formats \fBfull\fP and \fBlist\fP, the resulting output format may
be further tailored by \fISEDEX\fP, a sequence of \fBsed\fP(1) commands. Thus,
if you want to know which API versions (analogous to output format \fBapi\fP)
of \fBlibsafe.sh\fP provide \fBsafe_wait\fP(3sh), you'd invoke:

.in +4
\fBsafe_meta get apis list '/;safe_wait;/!d;s/;.*$//'\fP
.in -4
.RE

.SH SEE ALSO
.BR dl_load (3sh),
.BR undo_init (3sh),
.BR undo_push (3sh).

.SH AUTHOR
Karl Schmitz <@PACKAGE_BUGREPORT@>
