.\"								-*- nroff -*-
.\" libdl.3sh			- libdl(3sh) manual page
.\"
.\" Copyright (C) 2013-2017 Das Computerlabor (DCl-M)
.\"
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public License
.\" as published by the Free Software Foundation; either
.\" version 2.1 of the License, or (at your option) any later version.
.\"
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public License
.\" along with this library; if not, write to the Free Software Founda-
.\" tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
.\"
.\# AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
.\#
.\# WRITTEN BY:	ks	2013-08-17
.\# CHANGED BY:	ks	2015-04-23	Implement meta operations.
.\#					Lay session concept foundation.
.\#		ks	2016-05-21	Withdraw 'dl_meta get apis' brief
.\#					format and dl_init().
.\#		ks      2016-05-23	Add service function dl_warn().
.\#		ks	2016-05-24	Add 'meta get package/version'.
.\#					Use 'meta get apis' separator ';'.
.\#		ks	2017-02-11	Update copyright.
.\#					Canonify LSP items in 'pre libpath'
.\#					meta operation.
.\#		ks	2017-07-01	Add service function dl_dump().
.\#
.\# NOTE: (1)	Please adjust below date whenever revising the manual page.
.\#		vvvvvv
.TH LIBDL 3SH 2017-07-01 "@PACKAGE_TARNAME@ @PACKAGE_VERSION@" "Shell Programming"

.SH NAME
dl_atload, dl_load, dl_atexit, dl_exit, dl_which, dl_dump, dl_meta
\- Demand-load POSIX shell libraries

.SH SYNOPSIS
\fBeval "`libdl-sh load`"\fP

\fBdl_atload\fP \fIHOOK\fP
.br
\fBdl_load\fP \fILIB\fP ...
.br
\fBdl_atexit\fP \fIHOOK\fP
.br
\fBdl_exit\fP [\fISTATUS\fP=$?]
.br
\fBdl_which\fP \fILIB\fP
.br
\fBdl_meta\fP \fIMETA\fP [\fIARG\fP ...]

.SH DESCRIPTION
The demand-loading library \fBlibdl.sh\fP and its helper \fBlibdl-sh\fP are the
core of @PACKAGE_TARNAME@'s shell library demand-loading mechanism. After the
demand-loading library itself has been loaded into the application with
\fBlibdl-sh\ load\fP (see \fBSYNOPSIS\fP above) and initialized the library
search path by parsing its configuration, more libraries may be loaded by
invoking \fBdl_load\fP.

Applications having private library directories may augment the library search
path by invoking \fBdl_meta pre libpath\fP before loading more libraries.

Applications and/or libraries may also register load-time hooks (i.e.,
functions invoked after successfully loading a library) as well as exit-time
hooks (i.e., functions invoked before ultimately terminating execution) with
\fBdl_atload\fP and \fBdl_atexit\fP, respectively.

Applications and/or libraries terminate execution by either \fBexit\fPing or
invoking \fBdl_exit\fP, thereby triggering invocation of registered exit-time
hooks.

Applications and/or libraries wishing to inquire or modify certain library
internals may do so by performing meta operations.

.SH FUNCTIONS
.TP 4
\fBdl_atload\fP \fIHOOK\fP
Register load-time \fIHOOK\fP by pushing it onto the stack of load-time hooks
maintained by \fBlibdl.sh\fP.

After \fBdl_load\fP successfully loads some library \fILIB\fP, all registered
load-time hooks are invoked in LRFI (last-registered first-invoked) order,
with \fILIB\fP as the only argument.

If some load-time hook fails (i.e., returns non-zero status), \fBdl_load\fP
terminates execution by invoking \fBdl_exit\fP with the status returned by the
failing hook.

.TP
\fBdl_load\fP \fILIB\fP ...
Demand-load each given shell library \fILIB\fP into the application by looking
for \fBlib\fP\fILIB\fP\fB.sh\fP along the library search path and sourcing the
first one found. If \fILIB\fP can't be loaded (either because it isn't found
or its initialization commands fail), the application is terminated with
\fBdl_exit\ 127\fP, thereby invoking registered exit-time hooks.

.TP +4
\fBdl_atexit\fP \fIHOOK\fP
Register exit-time \fIHOOK\fP by pushing it onto the stack of exit-time hooks
maintained by \fBlibdl.sh\fP.

.TP +4
\fBdl_exit\fP [\fISTATUS\fP=$?]
Terminate execution by invoking registered exit-time hooks and \fBexit\fPing
with \fISTATUS\fP. All registered exit-time hooks are invoked in LRFI
(last-registered first-invoked) order with \fISTATUS\fP as the only argument;
their return status is ignored by \fBdl_exit\fP.

.TP
\fBdl_which\fP \fILIB\fP
Try to locate shell library \fILIB\fP on the library search path and write its
absolute pathname to standard output if it's found. Otherwise, return status
\fB127\fP.

.TP
\fBdl_dump\fP \fIMP\fP \fIVS\fP ...
NOT DOCUMENTED YET

.TP
\fBdl_meta\fP \fIMETA\fP [\fIARG\fP ...]
Perform one of \fBlibdl.sh\fP's meta operations. These allow to inquire or
modify certain library internals in a controlled manner. Currently, the
following meta operations are implemented:
.RS 4
.TP 4
\fBget package\fP|\fBversion\fP|\fBapi\fP
Inquire library's source package name (\fB@PACKAGE_TARNAME@\fP), version
(\fB@PACKAGE_VERSION@\fP), or selected API version and write it to standard
output.

.TP
\fBget apis\fP [\fIFORMAT\fP=api [\fISEDEX\fP]]
Inquire information about available API versions and write them to standard
output. The information written depends on the output \fIFORMAT\fP:
.RS 4
.IP \(em 2
\fBapi\fP (the default format) represents each API version by a line
containing \fIVERSION\fP.

.IP \(em
\fBfull\fP represents each function within each API version by a line of three
semicolon-separated fields: \fIVERSION\fP, \fISIGNATURE\fP, and \fIARGCS\fP,
where the second has the format \fINAME\fP\fB(\fP\fIARGS\fP\fB)\fP and the
latter is a (possibly open) range of valid $# values.

For example, for API 1, \fBdl_atexit\fP(3sh) and \fBdl_exit\fP(3sh) would be
represented by the following two lines:

.in +4
\fB1;dl_atexit(HOOK);1\fP
.br
\fB1;dl_exit([STATUS=$?]);0-1\fP
.in -4

.IP \(em
\fBlist\fP is similar to \fBfull\fP, except that \fB(\fP\fIARGS\fP\fB)\fP in
the second field is omitted (i.e., just the function name is shown)
.RE

.RS 4
For output formats \fBfull\fP and \fBlist\fP, the resulting output format may
be further tailored by \fISEDEX\fP, a sequence of \fBsed\fP(1) commands. Thus,
if you want to know which API versions (analogous to output format \fBapi\fP)
of \fBlibdl.sh\fP provide \fBdl_atload\fP(3sh), you'd invoke:

.in +4
\fBdl_meta get apis list '/;dl_atload;/!d;s/;.*$//'\fP
.in -4
.RE

.TP
\fBpre libpath\fP \fILIBPATH\fP ...
Prepend \fILIBPATH\fP, a colon-separated list of library search path items
(i.e., directories containing demand-loadable libraries) to the library search
path (LSP) maintained by \fBlibdl.sh\fP. Nonexisting LSP items are silently
ignored, whereas existing LSP items get canonified (i.e., turned into absolute
pathnames free of symbolic link components) before being prepended.

Applications may invoke \fBdl_meta pre libpath\fP to augment the library
search path with private library directories. They should do so only once and
before invoking \fBdl_load\fP to load more libraries.

.TP
\fBget libpath\fP
Inquire current library search path (LSP) and write it to standard output.

.TP
\fBget loaded\fP
Inquire (denormalized colon-separated) list of loaded libraries and write it
to standard output.

.TP
\fBset session\fP \fIID\fP
Register an arbitrary session \fIID\fPentifier.

.TP
\fBget session\fP
Inquire registered session identifier and write it to standard output.
.RE

.SH SERVICE FUNCTIONS
The following functions are intended as a service to other demand-loadable
libraries. They shouldn't be invoked directly from applications.
.TP 4
\fBdl_warn\fP \fIWHAT\fP [\fIARG\fP ...]
Warn about deprecated and/or withdrawn features by writing an appropriate
message to standard error output and returning status \fB1\fP (unless noted
otherwise). Currently, \fIWHAT\fP may be one of the following (shown with
parameters needed to construct the message):
.RS 4
.TP 4
\fBrel-req-set-api\fP \fILIB\fP \fIINVO\fP \fIWREL\fP \fICREL\fP
State that since release \fIWREL\fP (the withdrawing release), \fILIB\fPrary
requires applications to select an API version
(e.g., with \fILIB\fP\fB_meta set api\fP \fIVERSION\fP) and that the
application will be terminated because it hadn't done so yet. Also state
that package \fB@PACKAGE_TARNAME@\fP may be downgraded to release \fICREL\fP
(the latest compatible release) to stay compatible with the application, then
exit the application with status \fB127\fP.

The parameter \fIINVO\fP should have format

.in +4
\fIFUNC\fP\fB([\fP$#\fB]\fP$*\fB)\fP
.in -4

to indicate which \fIFUNC\fPtion (without \fILIB\fP\fB_\fP prefix) invocation
raised the warning.

.TP
\fBrel-dpr-func\fP \fILIB\fP \fIINVO\fP \fIDREL\fP \fIWREL\fP \fICREL\fP
State that release \fIDREL\fP (the deprecating release) deprecated the
function represented by \fIINVO\fP (see \fBrel-req-set-api\fP above), that it
will be withdrawn by \fIWREL\fP, and that package \fB@PACKAGE_TARNAME@\fP may
be downgraded to release \fICREL\fP to stay compatible, then return status
\fB0\fP.

.TP
\fBapi-wdr-func\fP \fILIB\fP \fIINVO\fP \fIWAPI\fP \fICAPI\fP
State that API version \fIWAPI\fP (the withdrawing API) withdrew the function
represented by \fIINVO\fP (see \fBrel-req-set-api\fP above), but that you
instead may stay with API version  \fICAPI\fP (the latest compatible API)
for now.

.TP
\fBrel-wdr-meta\fB \fILIB\fP \fIARGS\fP \fIWREL\fP \fICREL\fP
State that release \fIWREL\fP withdrew the meta operation represented by
\fIARGS\fP (format: \fB[\fP$#\fB]\fP$*) and give the usual downgrade hint.
.RE

.SH TRAPS
In order to have "na√Øve" applications benefit from \fBlibdl.sh\fP's exit-time
hook mechanism, the demand-loading library changes the exit trap with

.in +4
\fBtrap 'dl_exit $?' 0\fP
.in -4

so that execution may be terminated with either \fBexit\fP or \fBdl_exit\fP.

Consequently, applications as well as demand-loadable libraries mustn't change
the exit trap and instead register appropriate exit-time hooks. Note, however,
that applications remain free to catch signals as they see fit.

.SH NAMING CONVENTIONS
In order to avoid confusion (e.g., spurious overloading of functions),
demand-loadable libraries ought to adhere to the following naming conventions:
.IP 1. 3
All symbols defined in the global scope (e.g., functions, global variables,
etc.) must match the modern RE \fB^\fP\fILIB\fP\fB(_[A-Za-z09-9_]+)?$\fP (see
.BR regex (7)
for further details). This naturally implies that \fILIB\fP itself must match
the modern RE \fB^[A-Za-z][A-Za-z0-9]*$\fP.
.IP 2.
Exceptions to the above rule ought to be rare and must be properly documented.
.IP 3.
No naming conventions are imposed on symbols defined in local scopes (e.g.,
local variables).

.SH SEE ALSO
.BR libdl-sh (1),
.BR libdl-sh.conf (5),
.BR regex (7).

.SH AUTHOR
Karl Schmitz <@PACKAGE_BUGREPORT@>
