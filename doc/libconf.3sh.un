.\"								-*- nroff -*-
.\" libconf.3sh			- libconf(3sh) manual page
.\"
.\" Copyright (C) 2014-2016 Das Computerlabor (DCl-M)
.\"
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public License
.\" as published by the Free Software Foundation; either
.\" version 2.1 of the License, or (at your option) any later version.
.\"
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public License
.\" along with this library; if not, write to the Free Software Founda-
.\" tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
.\"
.\# AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
.\#
.\# WRITTEN BY:	ks	2014-06-09
.\# CHANGED BY:	ks	2015-04-25	Implement meta operations.
.\#		ks	2015-12-18	Use numeric API versions.
.\#		ks	2016-05-21	Withdraw 'conf_meta get apis' brief
.\#					format and conf_init().
.\#
.\# NOTE: (1)	Please adjust below date whenever revising the manual page.
.\#		vvvvvv
.TH libconf 3SH 2016-05-21 "@PACKAGE_TARNAME@ @PACKAGE_VERSION@" "Shell Programming"

.SH NAME
conf_has, conf_get, conf_put, conf_getenv, conf_meta
\- Process configuration files

.SH API VERSIONS
Release 0.3 introduced stacked configuraton space, allowing applications to
process a hierarchical (e.g., site- and user-specific) set of configuration
files at once. This necessitated radical changes (most of them pertaining to
parameter order) to the library's API, lest applications be able to specify
multiple pathnames. Moreover, the functionality of \fBconf_set\fP(3sh) and
\fBconf_unset\fP(3sh) has been merged into \fBconf_put\fP(3sh).

Please note that starting with release 0.4, the application \fImust\fP select
an API version with \fBconf_meta set api\fP \fIVERSION\fP. Unless it hadn't
done so, the moment it tries to process configuration files it'll be aborted
(with a warning message shown) under the presumption that it still tries to
use withdrawn API version 0. You have been warned!

.SH SYNOPSIS (API 1)
\fBdl_load conf && conf_meta set api 1\fP

\fBconf_has\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
.br
\fBconf_get\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
.br
\fBconf_put\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
.br
\fBconf_getenv\fP \fIVARIABLE\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
.br
\fBconf_meta\fP \fIMETA\fP [\fIARG\fP ...]

.SH DESCRIPTION
The configuration file processing library \fBlibconf.sh\fP allows applications
to maintain persistent configuration in files with a format similar to that of
\fBgit-config\fP(1) by getting, setting, or unsetting configuration items.

.SH FUNCTIONS
The following paragraphs describe (the currently sole) API version 1.

.TP 4
\fBconf_has\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
Check if \fIITEM\fP exists in stacked configuration space created by file(s)
\fICFPN\fP. Return status \fB0\fP if it does or \fB1\fP otherwise.

.TP
\fBconf_get\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
Get value of \fIITEM\fP in stacked configuration space created by file(s)
\fICFPN\fP (or supply \fIVALUE\fP when given), write it to standard output,
and return status \fB0\fP. If no value was found or supplied, return status
\fB1\fP.

.TP
\fBconf_put\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
If \fIVALUE\fP is given, assign it to \fIITEM\fP (existing or created) in
the topmost file \fICFPN\fP of stacked configuration space, and update that
file if necessary. Otherwise, remove \fIITEM\fP from the topmost file
\fICFPN\fP and update that file if necessary. Return status \fB0\fP on success
or \fB1\fP on any failure.

Beware of the subtle difference between setting \fIITEM\fP to the empty value
and unsetting it:

.in +4
\fBconf_put\fP \fIITEM\fP\fB=\fP \fICFPN\fP
.in -4

does the first, whereas

.in +4
\fBconf_put\fP \fIITEM\fP \fICFPN\fP
.in -4

does the latter.

.TP
\fBconf_getenv\fP \fIVARIABLE\fP \fIITEM\fP[\fB=\fP\fIVALUE\fP] \fICFPN\fP ...
Unless (environment) \fIVARIABLE\fP is set, behave like \fBconf_get\fP.
Otherwise, write ${\fIVARIABLE\fP} to standard output, so that it essentially
overrides \fIITEM\fP's configured value.

.TP
\fBconf_meta\fP \fIMETA\fP [\fIARG\fP ...]
Perform one of \fBlibconf.sh\fP's meta operations. These allow to inquire or
modify certain library internals in a controlled manner. Currently, the
following meta operations are implemented:
.RS 4
.TP 4
\fBget apis\fP [\fIFORMAT\fP=api [\fISEDEX\fP]]
Inquire information about available API versions and write them to standard
output. The information written depends on the output \fIFORMAT\fP:
.RS 4
\fBapi\fP (the default format) represents each API version by a line
containing \fIVERSION\fP.

.IP \(em
\fBfull\fP represents each function within each API version by a line of three
colon-separated fields: \fIVERSION\fP, \fISIGNATURE\fP, and \fIARGCS\fP,
where the second has the format \fINAME\fP\fB(\fP\fIARGS\fP\fB)\fP and the
latter is a (possibly open) range of valid $# values.

For example, for APIs 0 and 1, \fBconf_get\fP(3sh) would be represented by the
following two lines:

.in +4
\fB0:conf_get(CFPN ITEM [VALUE]):2-3\fP
.br
\fB1:conf_get(ITEM[=VALUE] CFPN ...):2-\fP
.in -4

.IP \(em
\fBlist\fP is similar to \fBfull\fP, except that \fB(\fP\fIARGS\fP\fB)\fP in
the second field is omitted (i.e., just the function name is shown)
.RE

.RS 4
For output formats \fBfull\fP and \fBlist\fP, the resulting output format may
be further tailored by \fISEDEX\fP, a sequence of \fBsed\fP(1) commands. Thus,
if you want to know which API versions (analogous to output format \fBapi\fP)
of \fBlibconf.sh\fP provide \fBconf_put\fP(3sh), you'd invoke:

.in +4
\fBconf_meta get apis list '/:conf_put:/!d;s/:.*$//'\fP
.in -4
.RE

.TP
\fBget api\fP
Inquire selected API version and write it to standard output.

.TP
\fBset api\fP \fIVERSION\fP
Select API \fIVERSION\fP. This should be done right after demand-loading this
library and can (successfully) only be done once.

.TP
\fBget awk\fP
Inquire absolute pathname of 'workhorse' AWK script and write it to standard
output.
.RE

.SH SEE ALSO
.BR dl_load (3sh),
.BR git-config (1).

.SH AUTHOR
Karl Schmitz <@PACKAGE_BUGREPORT@>
