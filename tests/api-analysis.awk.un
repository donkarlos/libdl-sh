#! /usr/bin/awk -f
#-----------------------------------------------------------------------------
#   api-analysis.awk		- API analysis script
#
#   Copyright © 2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2021-05-26
##  CHANGED BY:	ks	2021-05-28	Allow to disable analysis passes.
##					Distinguish between unanchored and
##					anchored REs.
##					Account for library name.
##					Validate declarations more strictly.
##					Part function name and prototype in-
##					dependently (i.e., process raw
##					'get apis all' output).
##		ks	2021-05-29	Rename DEBUG to T.
##					Introduce concept of verbosity.
##					Move min-/maximal API version designa-
##					tion to analysis pass.
##					Determine per-function min-/maximal
##					API versions.
##					Conditionally skip function declara-
##					tions with API version '-'.
##					Generate "deprecated" and "withdrawn"
##					check lists.
##
##  Global constants and variables:
##	- T			Trace	  level	(set with '-vT=TLEVEL')
##	- V			Verbosity level	(set with '-vV=VLEVEL')
##	- U			Skip function decl.s with API version '-'?
##	- mode			Output mode	(set with '-vmode=MODE')
##	- lib			Library name	(set with '-vlib=LIB')
##	- FALSE/TRUE		Boolean constants
##	- bv2sy[BV]		Map boolean value -> symbol
##	- nesting		Nesting depth (for tracing)
##	- tn2ti[TN]		Map token index <- name
##	- ti2tn[TI]		Map token index -> name
##	- ti2mc[TI]		Map token index -> #mappings
##	- tc			#(Function index <-> name mappings)
##	- ti			Function index (set by set/map_ti())
##	- av2ai[AV]		Map API index <- API version
##	- ai2av[AI]		Map API index -> API version
##	- ai2mc[AI]		Map API index -> #mappings
##	- ai2nr[AI]		Map API index -> NR
##	- ac			#(API index <-> API version mappings)
##	- ai			API index (set by set/map_ai())
##	- minav			Minimal declared API version
##	- maxav			Maximal declared API version
##	- fn2fi[FN]		Map function index <- name
##	- fi2fn[FI]		Map function index -> name
##	- fi2mc[FI]		Map function index -> #mappings
##	- fc			#(Function index <-> name mappings)
##	- fi			Function index (set by set/map_fi())
##	- fi2dc[FI]		Map function index -> #(function declarations)
##	- fi2ac[FI]		Map function index -> #(API index references)
##	- fi2minav[FI]		Map function index -> minimal API version
##	- fi2maxav[FI]		Map function index -> maximal API version
##	- di			Function declaration index
##	- fidi2nr[FI,NR]	Per-function declaration NR
##	- fidi2ti[FI,DI]	Per-function declaration (AV,FN) token index
##	- fidi2av[FI,DI]	Per-function declaration API version
##	- fidi2pt[FI,DI]	Per-function declaration prototype
##	- fidi2rg[FI,DI]	Per-function declaration argument count range
##	- fidi2ai[FI,DI]	Per-function declaration API index
##	- pi2do[PI]		PI-th analysis pass enabled?
##	- ec			Total error count (auto-updated by error())
##----------------------------------------------------------------------------
##  Initialization:
#-----------------------------------------------------------------------------
BEGIN {
    bv2sy[FALSE	= 0	]	= "FALSE"
    bv2sy[TRUE	= !FALSE]	= "TRUE"
					## Define booleans.
    cs_ul = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    cs_ll = "abcdefghijklmnopqrstuvwxyz"
    cs_1d = "123456789"			## Define locale-independent character
    cs_0d = "0" cs_1d			## sets for upper-/lower-case letters,
    cs_al = cs_ul cs_ll			## decimal digits, letters and alpha-
    cs_an = cs_al cs_0d			## numerics as well as unanchored REs
    re_id = "[_" cs_al "][_" cs_an "]*"	## recognizing identifiers, non-nega-
    re_1n = "[" cs_1d "][" cs_0d "]*"	## tive/cardinal numbers, function
    re_0n = "[" cs_0d "]+"		## names, prototypes, and…
    re_fn = lib ? lib "(_[_" cs_an "]*)?" : re_id
    re_pt = "\\([^);(]*\\)"
    re_rg = re_0n "(-(" re_1n ")?)?"	## …argument count ranges.

    are_id = "^" re_id "$"		## Derive anchored REs recognizing
    are_0n = "^" re_0n "$"		## identifiers, non-negative numbers,
    are_fn = "^" re_fn "$"		## function names, prototypes, and
    are_pt = re_pt "$"			## argument count ranges.
    are_rg = "^" re_rg "$"

    ec = fc = ac = tc = 0		## Clear counters.
}

##----------------------------------------------------------------------------
##  enter(FN,FP)		Trace entry into function FN with sprintf()-
##				formatted parameter list FP to stderr and
##				increase nesting depth
##  Global variables:
##	- nesting	(W) Nesting depth
##  Local variables:
##	- fmt		(W) Format string
##	- msg		(W) Quoted message
##----------------------------------------------------------------------------
function enter(fn,fp ,fmt,msg) {
    fmt = sprintf("#%%%us%%s(%%s)",nesting++)
					## Construct format string.
    msg = sprintf(fmt,"",fn,fp); gsub(/'/,"&\\\\&&",msg)
					## Construct quoted message and
    system("echo '" msg "' >&2")	## emit it to stderr.
}

##----------------------------------------------------------------------------
##  trace(EX)			Trace sprintf()-formatted EXpression to stderr
##
##  Global variables:
##	- nesting	(R) Nesting depth
##  Local variables:
##	- fmt		(W) Format string
##	- msg		(W) Quoted message
##----------------------------------------------------------------------------
function trace(ex ,fmt,msg) {
    fmt = sprintf("#%%%us%%s",nesting)	## Construct format string.
    msg = sprintf(fmt,"",ex); gsub(/'/,"&\\\\&&",msg)
					## Construct quoted message and
    system("echo '" msg "' >&2")	## emit it to stderr.
}

##----------------------------------------------------------------------------
##  leave(RV)			Decrease nesting depth and trace leave from
##				function with sprintf()-formatted return value
##				RV to stderr
##  Global variables:
##	- nesting	(W) Nesting depth
##  Local variables:
##	- fmt		(W) Format string
##	- msg		(W) Quoted message
##----------------------------------------------------------------------------
function leave(rv ,fmt,msg) {
    fmt = rv ? sprintf("#%%%usreturn(%%s)",--nesting)		\
		: sprintf("#%%%usreturn%%s",  --nesting)
					## Construct format string.
    msg = sprintf(fmt,"",rv); gsub(/'/,"&\\\\&&",msg)
					## Construct quoted message and
    system("echo '" msg "' >&2")	## emit it to stderr.
}

##----------------------------------------------------------------------------
##  error(MSG)			Write sprintf()-formatted error message MSG
##				to stderr
##  Global variables:
##	- ec		(W) Total error count
##----------------------------------------------------------------------------
function error(msg) {
    ++ec; gsub(/'/,"&\\\\&&",msg)	## No, construct quoted message and
    system("echo '" msg "' >&2")	## write it to stderr.
}

##----------------------------------------------------------------------------
##  set_ti(TN)			Look token name TN's token index up, setting
##				»ti« as a side-effect.
##----------------------------------------------------------------------------
function set_ti(tn ,set) {
    if (T>1) enter("set_ti",sprintf("tn=\"%s\"",tn))
    set = ((ti = tn2ti[tn]) in ti2mc)
    if (T>0) trace(sprintf("ti=tn2ti[tn=\"%s\"]=%u",tn,ti))
    if (T>1) leave(bv2sy[set]); return set
}

##----------------------------------------------------------------------------
##  map_ti(TN)			Map token name TN to token index, setting
##				»ti« as a side-effect.
##----------------------------------------------------------------------------
function map_ti(tn ,set) {
    if (T>1) enter("map_ti",sprintf("tn=\"%s\"",tn))
    if (!(ti = tn2ti[tn])) {		## TN mapped?
	ti2tn[ti = tn2ti[tn] = ++tc] = tn
	if (T>0) trace(sprintf("ti2tn[ti=tn2ti[tn]=++tc=%u]=tn=\"%s\"",ti,tn))
    }					## No, create TI<->TN mapping.
    set = (ti in ti2mc); ++ti2mc[ti]	## Count TI<->TN mapping.
    if (T>0) trace(sprintf("++ti2mc[ti=%u]=%u",ti,ti2mc[ti]))
    if (T>1) leave(bv2sy[set]); return set
}

##----------------------------------------------------------------------------
##  set_ai(AV)			Look API version AV's API index up, setting
##				»ai« as a side-effect.
##----------------------------------------------------------------------------
function set_ai(av ,set) {
    if (T>1) enter("set_ai",sprintf("av=%d",av))
    set = ((ai = av2ai[av]) in ai2mc)
    if (T>0) trace(sprintf("ai=av2ai[av=%d]=%u",av,ai))
    if (T>1) leave(bv2sy[set]); return set
}

##----------------------------------------------------------------------------
##  map_ai(AV)			Map API version AV to API index, setting
##				»ai« as a side-effect.
##----------------------------------------------------------------------------
function map_ai(av ,set) {
    if (T>1) enter("map_ai",sprintf("av=%d",av))
    if (!(ai = av2ai[av])) {		## AV mapped?
	ai2av[ai = av2ai[av] = ++ac] = av
	if (T>0) trace(sprintf("ai2av[ai=av2ai[av]=++ac=%u]=av=%d",ai,av))
	ai2nr[ai] = NR; if (T>0) trace(sprintf("ai2nr[ai=%u]=%u",ai,NR))
    }					## No, create AI<->AV mapping.
    set = (ai in ai2mc); ++ai2mc[ai]	## Count API declaration.
    if (T>0) trace(sprintf("++ai2mc[ai=%u]=%u",ai,ai2mc[ai]))
    if (T>1) leave(bv2sy[set]); return set
}

##----------------------------------------------------------------------------
##  avfn2tn(AV,FN)		Determine (AV,FN) token name
##----------------------------------------------------------------------------
function avfn2tn(av,fn ,tn) {
    if (T>2) enter("avfn2tn",sprintf("av=%d,fn=\"%s\"",av,fn))
    tn = sprintf("%d;%s",av,fn)
    if (T>2) leave(sprintf("\"%s\"",tn)); return tn
}

##----------------------------------------------------------------------------
##  set_fi(FN)			Look function name FN's index up, setting
##				»fi« as a side-effect.
##----------------------------------------------------------------------------
function set_fi(fn ,set) {
    if (T>1) enter("set_fi",sprintf("fn=\"%s\"",fn))
    set = ((fi = fn2fi[fn]) in fi2mc)
    if (T>0) trace(sprintf("fi=fn2fi[fn=\"%s\"]=%u",fn,fi))
    if (T>1) leave(bv2sy[set]); return set
}

##----------------------------------------------------------------------------
##  map_fi(AV,FN,PT,RG)		Map function name FN to function index,
##				setting »fi« as a side-effect.
##----------------------------------------------------------------------------
function map_fi(av,fn,pt,rg ,set,tn,di) {
    if (T>1) enter("map_fi",sprintf("av=%d,fn=\"%s\",pt=\"%s\",rg=\"%s"	\
	"\"",av,fn,pt,rg))
    if (!(fi = fn2fi[fn])) {		## FN mapped?
	fi2fn[fi = fn2fi[fn] = ++fc] = fn
	if (T>0) trace(sprintf("fi2fn[fi=fn2fi[fn]=++fc=%u]=fn=\"%s\"",	\
	    fi,fn))
    }					## No, create FI<->FN mapping.
    set = (fi in fi2mc); ++fi2mc[fi]	## Count FI<->FN mapping.
    if (T>0) trace(sprintf("++fi2mc[fi=%u]=%u",fi,fi2mc[fi]))
    if (map_ti(tn = avfn2tn(av,fn))) {	## (AV,FN) token already mapped?
	error(sprintf("Line %u, 'f;%d;%s(%s);%s': Duplicate function "	\
	    "declaration! (see line %u)",NR,av,fn,pt,rg,fidi2nr[fi,di]))
					## Yes, show error message.
    } else {
	di = ++fi2dc[fi]; if (T>0) trace(sprintf("di=++fi2dc[fi=%u]=%u",\
	    fi,di))
	fidi2nr[fi,di] = NR		## No, count function declaration and
	fidi2ti[fi,di] = ti		## attach line number, (AV,FN) token
	fidi2av[fi,di] = av		## index, API version, prototype, as
	fidi2pt[fi,di] = pt		## well as argument count range to
	fidi2rg[fi,di] = rg		## function declaration.
	if (T>0) trace(sprintf("fidi2nr[fi=%u,di=%u]=%u,fidi2ti[fi,di]="\
	    "%u,fidi2av[fi,di]=%d,fidi2pt[fi,di]=\"%s\",fidi2rg[fi,di]="\
	    "\"%s\"",fi,di,NR,ti,av,pt,rg))
    }
    if (T>1) leave(bv2sy[set]); return set
}

##----------------------------------------------------------------------------
##  Main program:
##----------------------------------------------------------------------------
BEGIN {
    FS = ";"				## Fields are ';'-separated.
}

(NF == 2) && ($1 == "a") {		## Process API version declaration?
    if ($2 !~ are_0n) {			## Yes, is it valid?
	error(sprintf("Line %u, '%s': Invalid API version declaration!",NR,$0))
					## No, complain about it!
    } else if (map_ai($2)) {		## Yes, but is it unique?
	error(sprintf("Line %u, '%s': Duplicate API version declaration"\
	    "! (see line %u)",NR,$0,ai2nr[ai]))
    }					## No, complain about duplicate!
}

U && (NF == 4) && ($1 == "f") && ($2 == "-") {
    next				## Conditionally skip function decla-
}					## ration with special API version '-'.

(NF == 4) && ($1 == "f") {		## Process function declaration?
    if (($2 !~ are_0n) || (match($3,are_pt) < 2) ||			\
	((fn = substr($3,1,RSTART-1)) !~ are_fn) || ($4 !~ are_rg)) {
					## Yes, is it valid?
	error(sprintf("Line %u, '%s': Invalid function declaration!",NR,$0))
    } else {				## No, complain about it!
	map_fi($2,fn,substr($3,RSTART+1,RLENGTH-2),$4)
    }					## Yes, map it.
}

END {					## After declarations are gathered:
    pi2do[1] = pi2do[2] = pi2do[3] = TRUE
					## Enable all consistency checks.
    if (mode ~ /^(deprecated|withdrawn)$/) {
					## Mode is "deprecated or "withdrawn"?
	V = 0; pi2do[4] = TRUE		## Yes, silence consistency checks and
    }					## enable final pass.

    ##------------------------------------------------------------------------
    ##	Pass 1: Determine minimal and maximal API version
    ##------------------------------------------------------------------------
    if (pi2do[++pi]) {			## Enter pass?
	if (T>0) trace(sprintf("pi2do[pi=%u]=%s",pi,bv2sy[pi2do[pi]]))
	ai = 0; while (++ai <= ac) {	## Yes, foreach API index do…
	    av = ai2av[ai]		## Fetch API version.
	    if (ai > 1) {		## Update min-/maximal API version?
		if (minav > av) {	## Update minimal API version…
		    minav = av; if (T>0) trace(sprintf("minav=%d",av))
		}			## …if necessary.
		if (maxav < av) {	## Update maximal API version…
		    maxav = av; if (T>0) trace(sprintf("maxav=%d",av))
		}			## …if necessary.
	    } else {
		minav = maxav = av; if (T>0) trace(sprintf("minav=maxav=%d",av))
	    }				## No, initialize both.
	}
    }; end_ac = ac			## Save #(declared API versions).

    ##------------------------------------------------------------------------
    ##	Pass 2:	Establish and count [FI,DI]->[AI] references, retroactively
    ##		mapping undeclared API versions
    ##------------------------------------------------------------------------
    if (pi2do[++pi]) {			## Enter pass?
	if (T>0) trace(sprintf("pi2do[pi=%u]=%s",pi,bv2sy[pi2do[pi]]))
	fi = 0; while (++fi <= fc) {	## Yes, foreach function index do…
	    dc = fi2dc[fi]; di = 0; while (++di <= dc) {
					## Foreach attached declaration do…
		if (map_ai(av = fidi2av[fi,di]) && (ai <= end_ac)) {
					## Does it refer to decl. API version?
		    ++ai2fc[fidi2ai[fi,di] = ai]; ++fi2ac[fi]
		    if (T>0) trace(sprintf("++ai2fc[fidi2ai[fi=%u,"	\
			"di=%u]=ai=%u]=%u,++fi2ac[fi]=%u",fi,di,ai,	\
			ai2fc[ai],fi2ac[fi]))
		} else {		## Yes, count [FI,DI]->[AI] reference.
		    error(sprintf("Line %u, 'f;%d;%s(%s);%s' refers to "\
			"%s API version!",fidi2nr[fi,di],av,fi2fn[fi],	\
			fidi2pt[fi,di],fidi2rg[fi,di],(av < minav) ?	\
			"withdrawn" : (av <= maxav) ? "missing" :	\
			"undeclared"))	## No, complain about it!
		}
	    }
	}
    }

    ##------------------------------------------------------------------------
    ##	Pass 3: API version and function declarations consistent?
    ##------------------------------------------------------------------------
    if (pi2do[++pi]) {			## Enter pass?
	if (T>0) trace(sprintf("pi2do[pi=%u]=%s",pi,bv2sy[pi2do[pi]]))
	if (!end_ac) {			## Yes, API versions are declared?
	    error("No API versions declared!")
	} else if ((maxav - minav + 1) == end_ac) {
	    if (V>0) printf "Declared API versions: [%d;%d]\n",minav,maxav
	}
	for (av = 0; av <= maxav; ++av) {
					## Foreach API version do…
	    if (!set_ai(av)) {		## Is it mapped?
		if (av < minav) {	## No, is it withdrawn?
		    if (V>0) printf "API version %d completely withdrawn.\n",av
		} else {		## Yes, state that fact.
		    error(sprintf("API version %d completely missing!",av))
					## No, complain about missing API
		}			## version!
	    } else if (ai > end_ac) {	## API version mapped:
		error(sprintf("API version %d %s, but %u function decla"\
		    "rations refer to it!",av,(av < minav) ? "withdrawn"\
		    : "missing",ai2mc[ai]))
	    }				## Complain about inconsistency!
	}
	ai = 0; while (++ai <= ac) {	## Foreach API index do…
	    av = ai2av[ai]		## Fetch API version.
	    if (ai <= end_ac) {		## API version declared?
		if (!ai2fc[ai]) {	## Yes, and function declarations re-
					## fer to it?
		    error(sprintf("API version %d declared, but no func"\
			"tion declarations refer to it!",av))
		}			## No, complain!
	    } else if (av > maxav) {	## API version undeclared:
		error(sprintf("API version %d %s, but %u function decla"\
		    "rations refer to it!",av,"undeclared",ai2mc[ai]))
	    }				## Complain about inconsistency!
	}
    }

    ##------------------------------------------------------------------------
    ##	Pass 4:	Determine per-function API version range where necessary and
    ##		generate deprecated/withdrawn check lists
    ##------------------------------------------------------------------------
    if (pi2do[++pi] && !ec && lib) {	## Enter pass?
	if (T>0) trace(sprintf("pi2do[pi=%u]=%s",pi,bv2sy[pi2do[pi]]))
	fi = 0; while (++fi <= fc) {	## Yes, foreach function index do…
	    if (fi2ac[fi] < end_ac) {	## Function withdrawn from some API?
		fi2minav[fi] = maxav; fi2maxav[fi] = minav
					## Initialize with transposed mini-/
					## maximal API versions.
		if (T>0) trace(sprintf("fi2minav[fi=%u]=%d,fi2maxav[fi]"\
		    "=%d",fi,maxav,minav))
		dc = fi2dc[fi]; di = 0; while (++di <= dc) {
					## Foreach attached declaration do…
		    if (fidi2ai[fi,di]) {
					## Does it refer to decl. API version?
			av = fidi2av[fi,di]
					## Yes, fetch attached API version.
			if (fi2minav[fi] > av) {
					## Update per-function minimal API…
			    fi2minav[fi] = av; if (T>0) trace(sprintf(	\
				"fi2minav[fi=%u]=%d",fi,av))
			}		## …version if necessary.
			if (fi2maxav[fi] < av) {
					## Update per-function maximal API…
			    fi2maxav[fi] = av; if (T>0) trace(sprintf(	\
				"fi2maxav[fi=%u]=%d",fi,av))
			}		## …version if necessary.
		    }
		}
		for (av = fi2minav[fi]; av <= maxav; ++av) {
					## Foreach API version within per-
					## function minimal and overall maxi-
					## mal API version interval do…
		    if (av <= fi2maxav[fi]) {
					## Validate deprecation?
			if (mode == "deprecated") printf "%d %s\n",av,fi2fn[fi]
		    } else {		## Validate withdrawal!
			if (mode == "withdrawn") printf "%d %s\n",av,fi2fn[fi]
		    }
		}
	    }
	}
    }

    exit (ec > 0)			## Indicate success or failure.
}
