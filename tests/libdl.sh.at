dnl								-*-Autotest-*-
dnl libdl.sh.at			- libdl.sh tests
dnl
dnl Copyright Â© 2021 Das Computerlabor (DCl-M)
dnl
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Lesser General Public License
dnl as published by the Free Software Foundation; either
dnl version 2.1 of the License, or (at your option) any later version.
dnl
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this library; if not, write to the Free Software Founda-
dnl tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
dnl
dnl AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
dnl
dnl WRITTEN BY:	ks	2021-05-03
dnl CHANGED BY:	ks	2021-05-05	Add test group ['eval "`libdl-sh
dnl					load`"' catches EXIT?].
dnl					Enhance test group ['dl_meta get'
dnl					inquiries give expected results?].
dnl					Enhance test group ['dl_meta get apis'
dnl					honours 4th argument?].
dnl		ks	2021-05-06	Enhance test group ['dl_meta get apis
dnl					r/o' constants defined?].
dnl					Enhance test group ['dl_meta get apis
dnl					r/o' constants readonly?].
dnl					Add test group [libdl.sh's special
dnl					characters unharmed?].
dnl					Add test group [libdl.sh functions
dnl					indicate usage errors?].
dnl					Add test group [dl_atload() registers
dnl					load-time hook?].
dnl					Add test group [dl_atexit() registers
dnl					exit-time hook?].
dnl					Add test group [dl_exit() ignores EXIT
dnl					before hooks?].
dnl					'set -u'-harden dl_warn().
dnl					Add test group [dl_load() loads
dnl					another library?].
dnl		ks	2021-05-07	Always expect no error output.
dnl					'set -u'-harden dl_split(), dl_dump(),
dnl					and dl_which().
dnl		ks	2021-05-09	Export test group [dl_load() loads
dnl					another library?] to libquote.sh.at.
dnl
dnl Test group 'Demand-loading library libdl.sh'
dnl
AT_BANNER([Demand-loading library libdl.sh])

dnl
dnl Check if libdl.sh's initialization code catches "signal" 0/EXIT by
dnl appropriately invoking dl_exit().
dnl
AT_SETUP(['eval "`libdl-sh load`"' catches EXIT?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
trap | sed 's/ EXIT$/ 0/;/ 0$/!d;s/^\(trap\) --/\1/;'
					## Emit 0/EXIT trap setting (if any)
					## and demodernize it.
], 0, [dnl				## And the winner is...
trap 'dl_exit $?' 0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_meta() inquiries
dnl   -	get package
dnl   -	get version
dnl   -	get api
dnl   -	get apis
dnl   -	get loaded
dnl   -	get apis api
dnl   -	get apis full
dnl   -	get apis list
dnl   -	get apis r/o
dnl produce expected results.
dnl
dnl NOTE:   (1)	The first two of them can't be checked by the 'for' loop
dnl		because GNU Autotest implements any form of expected output
dnl		by means of quoted here scripts, thus making parameter
dnl		substitutions impossible! |-(
dnl	    (2)	As a side effect, this check also ensures that libdl.sh
dnl		supports only one API version which at the same time is
dnl		the default API version.
dnl	    (3)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP(['dl_meta get' inquiries give expected results?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
case `dl_meta get package`_`dl_meta get version` in
    ${PACKAGE_TARNAME}_${PACKAGE_VERSION})
	:	;;			## See note (1).
    *)	test	;;
esac && for meta in							\
    'get api' 'get apis' 'get loaded'					\
    'get apis api' 'get apis full' 'get apis list' 'get apis r/o'
do
    echo 'dl_meta '"$meta" && dl_meta $meta
					## Emit tag and inquiry result.
done
], 0, [dnl				## And the winner is...
dl_meta get api
1
dl_meta get apis
1
dl_meta get loaded
:dl:
dl_meta get apis api
1
dl_meta get apis full
1;dl_meta(META [[ARG ...]]);2-
1;dl_warn(WHAT INVO [[ARG ...]]);2-5
1;dl_dump(MP VS ...);2-
1;dl_split(WORD IFS &FIELD ...);3-
1;dl_which(LIB);1
1;dl_atload(HOOK);1
1;dl_load(LIB ...);1-
1;dl_atexit(HOOK);1
1;dl_exit([[STATUS=$?]]);0-1
dl_meta get apis list
1;dl_meta;2-
1;dl_warn;2-5
1;dl_dump;2-
1;dl_split;3-
1;dl_which;1
1;dl_atload;1
1;dl_load;1-
1;dl_atexit;1
1;dl_exit;0-1
dl_meta get apis r/o
1;BQ
1;DQ
1;SQ
1;BS
1;CS
1;DS
1;HS
1;QB
1;QE
1;CR
1;NL
1;dl_cs_ul
1;dl_cs_ll
1;dl_cs_1d
1;dl_cs_0d
1;dl_cs_al
1;dl_cs_an
1;dl_re_id
1;dl_re_1n
1;dl_re_0n
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_meta() inquiries
dnl   -	get apis full
dnl   -	get apis list
dnl   -	get apis r/o
dnl hounour (i.e., apply) the extra sed(1) expression passed as 4th argument.
dnl
AT_SETUP(['dl_meta get apis' honours 4th argument?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
api=`dl_meta get api`			## Inquire default API version.
for meta in 'get apis full' 'get apis list' 'get apis r/o'; do
    case $meta in
	*full)	sx='/;dl_atload(/!d;s/;.*$//'	;;
	*list)	sx='/;dl_atload;/!d;s/;.*$//'	;;
	*r/o)	sx='/^'"$api"';/!d;s///'	;;
    esac
    echo 'dl_meta '"$meta" && dl_meta $meta "$sx"
					## Emit tag and inquiry result.
done
], 0, [dnl				## And the winner is...
dl_meta get apis full
1
dl_meta get apis list
1
dl_meta get apis r/o
BQ
DQ
SQ
BS
CS
DS
HS
QB
QE
CR
NL
dl_cs_ul
dl_cs_ll
dl_cs_1d
dl_cs_0d
dl_cs_al
dl_cs_an
dl_re_id
dl_re_1n
dl_re_0n
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the constants reported by dl_meta() inquiry get apis r/o (for the
dnl default API version) are actually defined after loading libdl.sh.
dnl
AT_SETUP(['dl_meta get apis r/o' constants defined?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
status=0				## Assume success and inquire
api=`dl_meta get api`			## default API version.
for name in `dl_meta get apis r/o '/^'"$api"';/!d;s///'`; do
					## Foreach constant do...
    eval 'case ${'"$name"'+=} in
	=)  echo "$name";;
	*)  status=1	;;
    esac'				## Assume failure if it's unset. :-(
done; exit $status			## Indicate success or failure.
], 0, [dnl				## And the winner is...
BQ
DQ
SQ
BS
CS
DS
HS
QB
QE
CR
NL
dl_cs_ul
dl_cs_ll
dl_cs_1d
dl_cs_0d
dl_cs_al
dl_cs_an
dl_re_id
dl_re_1n
dl_re_0n
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the constants reported by dl_meta() inquiry get apis r/o (for the
dnl default API version) are actually readonly after loading libdl.sh by
dnl trying to set them in a subshell environment.
dnl
AT_SETUP(['dl_meta get apis r/o' constants readonly?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
status=0				## Assume success and inquire
api=`dl_meta get api`			## default API version.
for name in `dl_meta get apis r/o '/^'"$api"';/!d;s///'`; do
					## Foreach constant do...
    (eval "$name=" 2>/dev/null) && status=1 || echo "$name"
					## Assume failure if we set it in a
					## subshell environment. 8-O
done; exit $status
], 0, [dnl				## And the winner is...
BQ
DQ
SQ
BS
CS
DS
HS
QB
QE
CR
NL
dl_cs_ul
dl_cs_ll
dl_cs_1d
dl_cs_0d
dl_cs_al
dl_cs_an
dl_re_id
dl_re_1n
dl_re_0n
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the special characters reported by dl_meta() inquiry get apis r/o
dnl (for the default API version) get through to libdl.sh unharmed by stupid
dnl build tools, stupid editors, or layer 8 problems. ;-)
dnl
dnl NOTE:   (1)	The most likely candidate to get screwed up is CR, since it's
dnl		definition became pretty invisible now. That's why we check
dnl		against 'od -bc' reference output!
dnl
AT_SETUP([libdl.sh's special characters unharmed?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
api=`dl_meta get api`			## Inquire default API version.
specials=
for name in `dl_meta get apis r/o '/^'"$api"';\(..\)$/!d;s//\1/'`; do
					## Foreach special character do...
    eval 'specials=$specials${'"$name"'-.}'
done; od -bc <<EOF
$specials
EOF
], 0, [dnl				## And the winner is...
0000000 140 042 047 134 043 044 041 140 047 015 012 012
          `   "   '   \   #   $   !   `   '  \r  \n  \n
0000014
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the functions reported by dl_meta() inquiry get apis list (for
dnl the default API version) indicate usage errors (i.e., return 2) when in-
dnl voked with insufficient arguments.
dnl
dnl NOTE:   (1)	The test is driven by the inquiry's 3rd field reported,
dnl		which is parsed into $min and $max by the extra sed(1) ex-
dnl		pression with the alleged no-op 's/^//;t0;:0' making sure
dnl		that the following 'tp' statements actually distinguish be-
dnl		tween the 3rd field's three numeric range forms.
dnl	    (2)	Since up to this point load- and exit-time hooks hadn't been
dnl		tested, testing dl_exit() now would be pointless, wherefore
dnl		it'll stay exempted!
dnl
AT_SETUP([libdl.sh functions indicate usage errors?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
api=`dl_meta get api`			## Inquire default API version.
ifs=$IFS; IFS=$NL; set shiftee `dl_meta get apis list 's/^//;t0
	:0
        s/^'"$api"';\('"$dl_re_id"'\);\('"$dl_re_0n"'\)-\('"$dl_re_1n"'\)$/name=\1 min=\2 max=\3/;tp
        s/^'"$api"';\('"$dl_re_id"'\);\('"$dl_re_0n"'\)-$/name=\1 min=\2 max=/;tp
        s/^'"$api"';\('"$dl_re_id"'\);\('"$dl_re_0n"'\)$/name=\1 min=\2 max=\2/;tp
        s/^.*$/test/;:p
'`; shift; IFS=$ifs
for signature in ${1+"$@"}; do		## Foreach parsed signature (see note
					## (1)) do...
    echo "$signature" && eval "$signature" || exit 1
					## Emit signature and split it.
    case $name in			## Function exempted?
	dl_exit)			## Yes.
	    ;;
	*)				## No, make passes at function.
	    args= n=0; while test "$n" -lt "$min"; do
		$name $args && exit 1 || case $? in
		    2)		;;
		    *)  exit 1	;;
		esac
		n=`expr $n + 1`; args="$args $n"
	    done
	    ;;
    esac
done
], 0, [dnl				## And the winner is...
name=dl_meta min=2 max=
name=dl_warn min=2 max=5
name=dl_dump min=2 max=
name=dl_split min=3 max=
name=dl_which min=1 max=1
name=dl_atload min=1 max=1
name=dl_load min=1 max=
name=dl_atexit min=1 max=1
name=dl_exit min=0 max=1
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_atload() registers and triggers a load-time hook.
dnl
dnl NOTE:   (1)	This test exploits the fact that on its 1st succesful invoca-
dnl		tion, dl_atload() feigns libd.sh's "load time" and triggers
dnl		the just-registered HOOK. Hence this quality gets exercised,
dnl		too!
dnl
AT_SETUP([dl_atload() registers load-time hook?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atload_trace=:			## Initialize hook's trace.
test_atload() {
    test_atload_trace=$test_atload_trace$1:
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atload test_atload			## Register load-time hook.
echo "$test_atload_trace"		## Emit resulting trace.
], 0, [dnl				## And the winner is...
:dl:
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_atexit() registers an exit-time hook and if it's triggered by
dnl "signal" 0/EXIT's handler dl_exit().
dnl
AT_SETUP([dl_atexit() registers exit-time hook?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atexit() {
    echo "test_atexit($status)"
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atexit test_atexit			## Register exit-time hook.
], 0, [dnl				## And the winner is...
test_atexit(0)
], [dnl
])
AT_CLEANUP

dnl
dnl Check if EXIT trap handler dl_exit() arranges to ignore "signal" EXIT
dnl before triggering registered exit-time hooks.
dnl
AT_SETUP([dl_exit() ignores EXIT   before hooks?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atexit() {
    echo "test_atexit($status)"		## Emit exit-time hooks's trace and
					## demodernized EXIT trap setting.
    trap | sed 's/ EXIT$/ 0/;/ 0$/!d;s/^\(trap\) --/\1/;'
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atexit test_atexit			## Register exit-time hook.
], 0, [dnl				## And the winner is...
test_atexit(0)
trap '' 0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if EXIT trap handler dl_exit() relaxes execution environment by
dnl disabling sh(1) options errexit and nounset before triggering registered
dnl exit-time hooks.
dnl
dnl NOTE:   (1)	The double brackets within the exit-time hook guard against
dnl		m4(1)underquoting.
dnl
AT_SETUP([dl_exit() does 'set +eu' before hooks?])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atexit() {
    echo "test_atexit($status)"		## Emit exit-time hooks's trace and
					## extracted 'set -eu' setting.
    sed 's/[[^eu]]//g' <<EOF
$-
EOF
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	export LIBDL_SH_LIBRARY_PATH
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atexit test_atexit			## Register exit-time hook.
], 0, [dnl				## And the winner is...
test_atexit(0)

], [dnl
])
AT_CLEANUP
