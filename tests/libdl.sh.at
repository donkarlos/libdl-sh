dnl								-*-Autotest-*-
dnl libdl.sh.at			- libdl.sh tests
dnl
dnl Copyright Â© 2021 Das Computerlabor (DCl-M)
dnl
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Lesser General Public License
dnl as published by the Free Software Foundation; either
dnl version 2.1 of the License, or (at your option) any later version.
dnl
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this library; if not, write to the Free Software Founda-
dnl tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
dnl
dnl AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
dnl
dnl WRITTEN BY:	ks	2021-05-03
dnl CHANGED BY:	ks	2021-05-05	Add test group ['eval "`libdl-sh
dnl					load`"' catches EXIT?].
dnl					Enhance test group ['dl_meta get'
dnl					inquiries give expected results?].
dnl					Enhance test group ['dl_meta get apis'
dnl					honours 4th argument?].
dnl		ks	2021-05-06	Enhance test group ['dl_meta get apis
dnl					r/o' constants defined?].
dnl					Enhance test group ['dl_meta get apis
dnl					r/o' constants readonly?].
dnl					Add test group [libdl.sh's special
dnl					characters unharmed?].
dnl					Add test group [libdl.sh functions
dnl					indicate usage errors?].
dnl					Add test group [dl_atload() registers
dnl					load-time hook?].
dnl					Add test group [dl_atexit() registers
dnl					exit-time hook?].
dnl					Add test group [dl_exit() ignores EXIT
dnl					before hooks?].
dnl					'set -u'-harden dl_warn().
dnl					Add test group [dl_load() loads
dnl					another library?].
dnl		ks	2021-05-07	Always expect no error output.
dnl					'set -u'-harden dl_split(), dl_dump(),
dnl					and dl_which().
dnl		ks	2021-05-09	Export test group [dl_load() loads
dnl					another library?] to libquote.sh.at.
dnl		ks	2021-05-14	Prepare for multiple API versions.
dnl		ks	2021-05-16	Add dl_readonly() and dl_apis().
dnl		ks	2021-05-18	Add special characters '[' and ']'.
dnl		ks	2021-05-23	Use atlocal_check_meta_inquiries(),
dnl					atlocal_trace_invocation_set_output(),
dnl					atlocal_trace_invocation_raw_output(),
dnl					atlocal_check_constants(), and
dnl					atlocal_check_function_usage_errors().
dnl		ks	2021-05-25	Make constant's API table entries API
dnl					version-independent.
dnl
dnl Test group 'Demand-loading library libdl.sh'
dnl
AT_BANNER([Demand-loading library libdl.sh])

dnl
dnl Check if libdl.sh's initialization code catches "signal" 0/EXIT by
dnl appropriately invoking dl_exit().
dnl
AT_SETUP(['eval "`libdl-sh load`"' catches EXIT?])
AT_KEYWORDS([libdl.sh libdl load trap])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
trap | sed 's/ EXIT$/ 0/;/ 0$/!d;s/^\(trap\) --/\1/;'
					## Emit 0/EXIT trap setting (if any)
					## and demodernize it.
], 0, [dnl				## And the winner is...
trap 'dl_exit $?' 0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_meta() inquiries
dnl   -	get package
dnl   -	get version
dnl   -	get api
dnl   -	get apis
dnl   -	get apis api
dnl   -	get apis full
dnl   -	get apis list
dnl   -	get apis r/o
dnl   -	get loaded
dnl produce expected results.
dnl
dnl NOTE:   (1)	This is just a wrapper around atlocal_check_meta_inquiries()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP(['dl_meta get' inquiries give expected results?])
AT_KEYWORDS([libdl.sh libdl dl_meta])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
atlocal_check_meta_inquiries dl loaded	## Perform check for libdl.sh.
], 0, [dnl				## And the winner is...
dl_meta([[2]]get,package)=0
libdl-sh
dl_meta([[2]]get,version)=0
0.4~7
dl_meta([[2]]get,api)=0
1
dl_meta([[2]]get,apis)=0
1
dl_meta([[3]]get,apis,api)=0
1
dl_meta([[3]]get,apis,full)=0
1;dl_meta(META [[ARG ...]]);2-
1;dl_warn(WHAT INVO [[ARG ...]]);2-5
1;dl_apis([[FORMAT=api [SEDEX]]]);0-2
1;dl_dump(MP VS ...);2-
1;dl_readonly(LIB VS [[VALUE]]);2-3
1;dl_split(WORD IFS &FIELD ...);3-
1;dl_which(LIB);1
1;dl_atload(HOOK);1
1;dl_load(LIB ...);1-
1;dl_atexit(HOOK);1
1;dl_exit([[STATUS=$?]]);0-1
dl_meta([[3]]get,apis,list)=0
1;dl_meta;2-
1;dl_warn;2-5
1;dl_apis;0-2
1;dl_dump;2-
1;dl_readonly;2-3
1;dl_split;3-
1;dl_which;1
1;dl_atload;1
1;dl_load;1-
1;dl_atexit;1
1;dl_exit;0-1
dl_meta([[3]]get,apis,r/o)=0
BQ
DQ
SQ
BS
CS
DS
HS
QB
QE
CR
NL
LB
RB
dl_cs_ul
dl_cs_ll
dl_cs_1d
dl_cs_0d
dl_cs_al
dl_cs_an
dl_re_id
dl_re_1n
dl_re_0n
dl_meta([[2]]get,loaded)=0
:dl:
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_meta() inquiries
dnl   -	get apis full
dnl   -	get apis list
dnl   -	get apis r/o
dnl hounour (i.e., apply) the extra sed(1) expression passed as 4th argument.
dnl
dnl NOTE:   (1)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl	    (2)	The expected output contains one quadrigraph to account for
dnl		the unmatched '(' in "full" format's sed(1) expression!
dnl
AT_SETUP(['dl_meta get apis' honours 4th argument?])
AT_KEYWORDS([libdl.sh libdl dl_meta])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
lib=dl; get="${lib}_meta get" status=0	## Assume success.
for format in full list r/o; do		## Foreach format do...
    case $format in
	full)   sx='/;'"$lib"'_atload(/!d;s/;.*$//'	;;
	list)   sx='/;'"$lib"'_atload;/!d;s/;.*$//'	;;
	r/o)    sx='/^'"$lib"'_/!d;s///'		;;
    esac
    atlocal_trace_invocation_raw_output $get apis $format "$sx" || status=1
					## Trace invocation and result.
done; exit $status			## Indicate success or failure.
], 0, [dnl				## And the winner is...
dl_meta([[4]]get,apis,full,/;dl_atload@{:@/!d;s/;.*$//)=0
1
dl_meta([[4]]get,apis,list,/;dl_atload;/!d;s/;.*$//)=0
1
dl_meta([[4]]get,apis,r/o,/^dl_/!d;s///)=0
cs_ul
cs_ll
cs_1d
cs_0d
cs_al
cs_an
re_id
re_1n
re_0n
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the constants reported by 'dl_meta get apis r/o' (for the
dnl default API version) are defined and readonly after loading libdl.sh.
dnl
dnl NOTE:   (1)	This is just a wrapper around atlocal_check_constants()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP(['dl_meta get apis r/o' var.s set and readonly?])
AT_KEYWORDS([libdl.sh libdl dl_meta constants readonly])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
atlocal_check_constants dl		## Perform check for libdl.sh.
], 0, [dnl				## And the winner is...
BQ
DQ
SQ
BS
CS
DS
HS
QB
QE
CR
NL
LB
RB
dl_cs_ul
dl_cs_ll
dl_cs_1d
dl_cs_0d
dl_cs_al
dl_cs_an
dl_re_id
dl_re_1n
dl_re_0n
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the special characters reported by 'dl_meta get apis r/o' (for
dnl the default API version) make it through to libdl.sh unadulterated by
dnl stupid build tools, stupid editors, or layer 8 problems. ;-)
dnl
dnl NOTE:   (1)	The most likely candidate to get screwed up is CR, since it's
dnl		definition became pretty invisible now. That's why we check
dnl		against 'od -bc' reference output!
dnl
AT_SETUP([libdl.sh's special characters pristine?])
AT_KEYWORDS([libdl.sh libdl dl_meta specials pristine])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
specials=
for name in `dl_meta get apis r/o '/^dl_/d'`; do
					## Foreach special character do...
    eval 'specials=$specials${'"$name"'-.}'
done; od -bc <<EOF
$specials
EOF
], 0, [dnl				## And the winner is...
0000000 140 042 047 134 043 044 041 140 047 015 012 133 135 012
          `   "   '   \   #   $   !   `   '  \r  \n   [   ]  \n
0000016
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the functions reported by 'dl_meta get apis list' (for all API
dnl versions) indicate usage errors (i.e., return 2) when invoked with
dnl insufficient arguments.
dnl
dnl NOTE:   (1)	This is just a wrapper around atlocal_check_function_usage_-
dnl		errors()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP([libdl.sh functions indicate usage errors?])
AT_KEYWORDS([libdl.sh libdl usage])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
atlocal_check_function_usage_errors dl	## Perform check for libdl.sh.
], 0, [dnl				## And the winner is...
dl_meta([[3]]set,api,1)=0
dl_meta([[0]])=2
dl_meta([[1]]1)=2
dl_warn([[0]])=2
dl_warn([[1]]1)=2
dl_dump([[0]])=2
dl_dump([[1]]1)=2
dl_readonly([[0]])=2
dl_readonly([[1]]1)=2
dl_split([[0]])=2
dl_split([[1]]1)=2
dl_split([[2]]1,2)=2
dl_which([[0]])=2
dl_atload([[0]])=2
dl_load([[0]])=2
dl_atexit([[0]])=2
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_atload() registers and triggers a load-time hook.
dnl
dnl NOTE:   (1)	This test exploits the fact that on its 1st succesful invoca-
dnl		tion, dl_atload() feigns libd.sh's "load time" and triggers
dnl		the just-registered HOOK. Hence this quality gets exercised,
dnl		too!
dnl
AT_SETUP([dl_atload() registers load-time hook?])
AT_KEYWORDS([libdl.sh libdl dl_atload])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atload_trace=:			## Initialize hook's trace.
test_atload() {
    test_atload_trace=:$1$test_atload_trace
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atload test_atload			## Register load-time hook.
echo "$test_atload_trace"		## Emit resulting trace.
], 0, [dnl				## And the winner is...
:dl:
], [dnl
])
AT_CLEANUP

dnl
dnl Check if dl_atexit() registers an exit-time hook and if it's triggered by
dnl "signal" 0/EXIT's handler dl_exit().
dnl
AT_SETUP([dl_atexit() registers exit-time hook?])
AT_KEYWORDS([libdl.sh libdl dl_atexit])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atexit() {
    echo "test_atexit($status)"
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atexit test_atexit			## Register exit-time hook.
], 0, [dnl				## And the winner is...
test_atexit(0)
], [dnl
])
AT_CLEANUP

dnl
dnl Check if EXIT trap handler dl_exit() arranges to ignore "signal" EXIT
dnl before triggering registered exit-time hooks.
dnl
AT_SETUP([dl_exit() ignores EXIT   before hooks?])
AT_KEYWORDS([libdl.sh libdl dl_exit])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atexit() {
    echo "test_atexit($status)"		## Emit exit-time hooks's trace and
					## demodernized EXIT trap setting.
    trap | sed 's/ EXIT$/ 0/;/ 0$/!d;s/^\(trap\) --/\1/;'
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atexit test_atexit			## Register exit-time hook.
], 0, [dnl				## And the winner is...
test_atexit(0)
trap '' 0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if EXIT trap handler dl_exit() relaxes execution environment by
dnl disabling sh(1) options errexit and nounset before triggering registered
dnl exit-time hooks.
dnl
AT_SETUP([dl_exit() does 'set +eu' before hooks?])
AT_KEYWORDS([libdl.sh libdl dl_exit])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atexit() {
    echo "test_atexit($status)"		## Emit exit-time hooks's trace and
					## extracted 'set -eu' setting.
    sed 's/[[^eu]]//g' <<EOF
$-
EOF
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atexit test_atexit			## Register exit-time hook.
], 0, [dnl				## And the winner is...
test_atexit(0)

], [dnl
])
AT_CLEANUP
