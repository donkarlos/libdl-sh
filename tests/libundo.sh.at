dnl								-*-Autotest-*-
dnl libundo.sh.at		- libundo.sh tests
dnl
dnl Copyright Â© 2021 Das Computerlabor (DCl-M)
dnl
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Lesser General Public License
dnl as published by the Free Software Foundation; either
dnl version 2.1 of the License, or (at your option) any later version.
dnl
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public License
dnl along with this library; if not, write to the Free Software Founda-
dnl tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
dnl
dnl AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
dnl
dnl WRITTEN BY:	ks	2021-05-13
dnl CHANGED BY:	ks	2021-05-16	undo_meta(): Bound argument count
dnl					range above 4.
dnl CHANGED BY:	ks	2021-05-20	dl_warn(): Suppress warnings for pre-
dnl					releases.
dnl					Add test group [libundo.sh functions
dnl					are propely withdrawn?].
dnl		ks	2021-05-21	Add test group [libundo.sh functions
dnl					are propely deprecated?].
dnl		ks	2021-05-23	Use atlocal_trace_invocation() and
dnl					atlocal_trace_invocation_returns().
dnl					Simplify embedded dl_warn(),
dnl					atlocal_function_deprecated(), and
dnl					atlocal_function_withdrawn().
dnl					Add test groups ['undo_meta set 0tag'
dnl					works as expected?] and [undo_init()
dnl					works as expected?].
dnl		ks	2021-05-24	Use atlocal_check_meta_inquiries(),
dnl					atlocal_trace_invocation_set_output(),
dnl					atlocal_trace_invocation_raw_output(),
dnl					atlocal_check_constants(), and
dnl					atlocal_check_function_usage_errors().
dnl
dnl Test group 'Undo stack management library libundo.sh'
dnl		ks	2021-05-25	Make constant's API table entries API
dnl					version-independent.
dnl					Use atlocal_check_meta_get_apis_hon-
dnl					ours_4th().
dnl
AT_BANNER([Undo stack management library libundo.sh])

dnl
dnl Check if 'dl_load undo' loads libundo.sh
dnl
AT_SETUP(['dl_load undo' loads libundo.sh?])
AT_KEYWORDS([libundo.sh libundo dl_load])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
test_atload_trace=:			## Initialize load-time hook's trace.
test_atload() {				## Declare load-time hook.
    test_atload_trace=:$1$test_atload_trace
}

test_atexit() {				## Declare exit-time hook.
    echo "test_atexit($status)"
    echo "$test_atload_trace"
}

case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"			## Load libdl.sh or die.
dl_atload test_atload && dl_atexit test_atexit
dl_load undo				## Register hooks and load
					## libundo.sh.
], 0, [dnl				## And the winner is...
test_atexit(0)
:undo:quote:dl:
], [dnl
])
AT_CLEANUP

dnl
dnl Check if undo_meta() inquiries
dnl   -	get package
dnl   -	get version
dnl   -	get api
dnl   -	get apis
dnl   -	get apis api
dnl   -	get apis full
dnl   -	get apis list
dnl   -	get apis r/o
dnl produce expected results.
dnl
dnl NOTE:   (1)	This test wraps around atlocal_check_meta_inquiries()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP(['undo_meta get' inquiries give expected results?])
AT_KEYWORDS([libundo.sh libundo undo_meta])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
atlocal_check_meta_inquiries undo	## Perform check for libundo.sh.
], 0, [dnl				## And the winner is...
undo_meta([[2]]get,package)=0
libdl-sh
undo_meta([[2]]get,version)=0
0.4~7
undo_meta([[2]]get,api)=0
1
undo_meta([[2]]get,apis)=0
0
1
2
undo_meta([[3]]get,apis,api)=0
0
1
2
undo_meta([[3]]get,apis,full)=0
0;undo_meta(META [[ARG ...]]);2-4
0;undo_init(TAG);1
0;undo_mark(MARK);1
0;undo_push([[TAG] COMMAND [ARGUMENT|REDIRECTION ...]]);1-
0;undo_pull(MARK [[TAG] | TAG | [COUNT=1]]);0-2
0;undo_drop(MARK [[TAG] | TAG | [COUNT=1]]);0-2
0;undo_keep(MARK [[TAG] | TAG | [COUNT=1]]);0-2
1;undo_meta(META [[ARG ...]]);2-4
1;undo_mark(MARK);1
1;undo_push([[TAG] COMMAND [ARGUMENT|REDIRECTION ...]]);1-
1;undo_pull(MARK [[TAG] | TAG | [COUNT=1]]);0-2
1;undo_drop(MARK [[TAG] | TAG | [COUNT=1]]);0-2
2;undo_meta(META [[ARG ...]]);2-4
2;undo_push(MARK|[[TAG] COMMAND [ARGUMENT|REDIRECTION ...]]);1-
2;undo_pull(MARK [[TAG] | TAG | [COUNT=1]]);0-2
2;undo_drop(MARK [[TAG] | TAG | [COUNT=1]]);0-2
undo_meta([[3]]get,apis,list)=0
0;undo_meta;2-4
0;undo_init;1
0;undo_mark;1
0;undo_push;1-
0;undo_pull;0-2
0;undo_drop;0-2
0;undo_keep;0-2
1;undo_meta;2-4
1;undo_mark;1
1;undo_push;1-
1;undo_pull;0-2
1;undo_drop;0-2
2;undo_meta;2-4
2;undo_push;1-
2;undo_pull;0-2
2;undo_drop;0-2
undo_meta([[3]]get,apis,r/o)=0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if undo_meta() inquiries
dnl   -	get apis full
dnl   -	get apis list
dnl   -	get apis r/o
dnl hounour (i.e., apply) the extra sed(1) expression passed as 4th argument.
dnl
dnl NOTE:   (1)	This test wraps around atlocal_check_meta_get_apis_honours_-
dnl		4th()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl	    (3)	The expected output contains one quadrigraph to account for
dnl		the unmatched '(' in "full" format's sed(1) expression!
dnl
AT_SETUP(['undo_meta get apis' honours 4th argument?])
AT_KEYWORDS([libundo.sh libundo undo_meta])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
atlocal_check_meta_get_apis_honours_4th undo undo_push
					## Perform check for libundo.sh.
], 0, [dnl				## And the winner is...
undo_meta([[4]]get,apis,full,/;undo_push@{:@/!d;s/;.*$//)=0
0
1
2
undo_meta([[4]]get,apis,list,/;undo_push;/!d;s/;.*$//)=0
0
1
2
undo_meta([[4]]get,apis,r/o,/^undo_/!d;s///)=0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the constants reported by 'undo_meta get apis r/o (for the
dnl default API version) are defined and readonly after loading libundo.sh.
dnl
dnl NOTE:   (1)	This test wraps around atlocal_check_constants()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP(['undo_meta get apis r/o' var.s set and readonly?])
AT_KEYWORDS([libundo.sh libundo undo_meta constants readonly])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
atlocal_check_constants undo		## Perform check for libundo.sh.
], 0, [dnl				## And the winner is...
], [dnl
])
AT_CLEANUP

dnl
dnl Check if libundo.sh functions are properly deprecated.
dnl
dnl NOTE:   (1)	This test wraps around atlocal_function_deprecated()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP([libundo.sh functions are propely deprecated?])
AT_KEYWORDS([libundo.sh libundo deprecated])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
lib=undo; status=0			## Assume success.
atlocal_function_deprecated $lib 0 ${lib}_init :TAG	|| status=1
atlocal_function_deprecated $lib 0 ${lib}_keep :TAG	|| status=1
atlocal_function_deprecated $lib 0 ${lib}_mark ::MARK	|| status=1
atlocal_function_deprecated $lib 1 ${lib}_mark ::MARK	|| status=1
exit $status				## Indicate success or failure.
], 0, [dnl				## And the winner is...
undo_meta([[3]]set,api,0)=0
undo_init([[1]]:TAG)=126
undo_meta([[3]]set,api,0)=0
undo_keep([[1]]:TAG)=126
undo_meta([[3]]set,api,0)=0
undo_mark([[1]]::MARK)=126
undo_meta([[3]]set,api,1)=0
undo_mark([[1]]::MARK)=126
], [dnl
])
AT_CLEANUP

dnl
dnl Check if libundo.sh functions are properly withdrawn.
dnl
dnl NOTE:   (1)	This test wraps around atlocal_function_withdrawn()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP([libundo.sh functions are propely withdrawn?])
AT_KEYWORDS([libundo.sh libundo withdrawn])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
lib=undo; status=0			## Assume success.
atlocal_function_withdrawn $lib 1 ${lib}_init :TAG	|| status=1
atlocal_function_withdrawn $lib 1 ${lib}_keep :TAG	|| status=1
atlocal_function_withdrawn $lib 2 ${lib}_init :TAG	|| status=1
atlocal_function_withdrawn $lib 2 ${lib}_mark ::MARK	|| status=1
atlocal_function_withdrawn $lib 2 ${lib}_keep :TAG	|| status=1
exit $status				## Indicate success or failure.
], 0, [dnl				## And the winner is...
undo_meta([[3]]set,api,1)=0
undo_init([[1]]:TAG)=127
undo_meta([[3]]set,api,1)=0
undo_keep([[1]]:TAG)=127
undo_meta([[3]]set,api,2)=0
undo_init([[1]]:TAG)=127
undo_meta([[3]]set,api,2)=0
undo_mark([[1]]::MARK)=127
undo_meta([[3]]set,api,2)=0
undo_keep([[1]]:TAG)=127
], [dnl
])
AT_CLEANUP

dnl
dnl Check if the functions reported by 'undo_meta get apis list' (for all
dnl API versions) indicate usage errors (i.e., return 2) when invoked with
dnl insufficient arguments.
dnl
dnl NOTE:   (1)	This test wraps around atlocal_check_function_usage_errors()!
dnl	    (2)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP([libundo.sh functions indicate usage errors?])
AT_KEYWORDS([libundo.sh libundo usage])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
atlocal_check_function_usage_errors undo
					## Perform check for libundo.sh.
], 0, [dnl				## And the winner is...
undo_meta([[3]]set,api,0)=0
undo_meta([[0]])=2
undo_meta([[1]]1)=2
undo_init([[0]])=2
undo_mark([[0]])=2
undo_push([[0]])=2
undo_meta([[3]]set,api,1)=0
undo_meta([[0]])=2
undo_meta([[1]]1)=2
undo_mark([[0]])=2
undo_push([[0]])=2
undo_meta([[3]]set,api,2)=0
undo_meta([[0]])=2
undo_meta([[1]]1)=2
undo_push([[0]])=2
], [dnl
])
AT_CLEANUP

dnl
dnl Check if 'undo_meta set 0tag' works as expected.
dnl
dnl NOTE:   (1)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP(['undo_meta set 0tag' works as expected?])
AT_KEYWORDS([libundo.sh libundo undo_meta cleanups])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
status=0				## Assume success.
atlocal_trace_variable undo_0tag
atlocal_trace_invocation undo_meta set 0tag :0	|| status=1
atlocal_trace_variable undo_0tag
atlocal_trace_invocation undo_meta set 0tag :0	|| status=1
atlocal_trace_variable undo_0tag
atlocal_trace_invocation undo_meta set 0tag :1	&& status=1
atlocal_trace_variable undo_0tag
exit $status				## Indicate success or failure.
], 0, [dnl				## And the winner is...
unset undo_0tag
undo_meta([[3]]set,0tag,:0)=0
undo_0tag=:0
undo_meta([[3]]set,0tag,:0)=0
undo_0tag=:0
undo_meta([[3]]set,0tag,:1)=1
undo_0tag=:0
], [dnl
])
AT_CLEANUP

dnl
dnl Check if undo_init() works as expected.
dnl
dnl NOTE:   (1)	The double brackets within the expected output provide "just
dnl		the right amount" of m4(1) quoting.
dnl
AT_SETUP([undo_init() works as expected?])
AT_KEYWORDS([libundo.sh libundo undo_init cleanups])
AT_CHECK([dnl
set -eu					## Employ strict execution environment
					## to ensure 'set -u' resilience.
case :$PATH: in				## Triggered by 'check-local:'?
    *:$abs_top_builddir/bin:*)		## Yes, export suitable LSP.
	LIBDL_SH_LIBRARY_PATH=$abs_top_builddir/lib
	LIBDL_SH_LIBEXECDIR=$abs_top_builddir/libexec
	export LIBDL_SH_LIBRARY_PATH LIBDL_SH_LIBEXECDIR
	;;
esac
eval "`libdl-sh load`"; dl_load undo	## Load libdl.sh and libundo.sh or die.
status=0				## Assume success.
atlocal_trace_invocation undo_meta set api 0	|| status=1
atlocal_trace_variable undo_0tag
atlocal_trace_invocation undo_init :0		|| status=1
atlocal_trace_variable undo_0tag
atlocal_trace_invocation undo_init :0		|| status=1
atlocal_trace_variable undo_0tag
atlocal_trace_invocation undo_init :1		&& status=1
atlocal_trace_variable undo_0tag
exit $status				## Indicate success or failure.
], 0, [dnl				## And the winner is...
undo_meta([[3]]set,api,0)=0
unset undo_0tag
undo_init([[1]]:0)=0
undo_0tag=:0
undo_init([[1]]:0)=0
undo_0tag=:0
undo_init([[1]]:1)=1
undo_0tag=:0
], [dnl
])
AT_CLEANUP
