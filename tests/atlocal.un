#! /bin/sh ##
#-----------------------------------------------------------------------------
#   atlocal			- Test suite's local definitions
#
#   Copyright Â© 2021 Das Computerlabor (DCl-M)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public License
#   as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this library; if not, write to the Free Software Founda-
#   tion, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2021-04-28
##  CHANGED BY:	ks	2021-05-03	Define PACKAGE_TARNAME, PACKAGE_-
##					VERSION, and installation directories.
##		ks	2021-05-18	Declare global variables readonly.
##					Add atlocal_get_special_cs()
##					and atlocal_set_special_cs().
##		ks	2021-05-20	Add atlocal_function_withdrawn().
##		ks	2021-05-21	Add atlocal_function_deprecated().
##		ks	2021-05-23	Add atlocal_trace_variable(),
##					atlocal_trace_invocation(), and
##					atlocal_trace_invocation_returns().
##					Simplify embedded dl_warn(),
##					atlocal_function_deprecated(), and
##					atlocal_function_withdrawn().
##					Add atlocal_trace_invocation_raw_out-
##					put(), atlocal_trace_invocation_set_-
##					output(), atlocal_check_meta_in-
##					quiries(), atlocal_check_constants(),
##					and atlocal_check_function_usage_-
##					errors().
##		ks	2021-05-25	Make constant's API table entries API
##					version-independent.
##					Add atlocal_check_meta_get_apis_hon-
##					ours_4th().
##		ks	2021-05-26	Add service function dl_inform().
##----------------------------------------------------------------------------
##  Global variables:
#-----------------------------------------------------------------------------
PACKAGE_TARNAME=@PACKAGE_TARNAME@
PACKAGE_VERSION=@PACKAGE_VERSION@
bindir=@bindir@
libdir=@shlibdir@
pkgdatadir=@pkgdatadir@
sysconfdir=@sysconfdir@
readonly PACKAGE_TARNAME PACKAGE_VERSION bindir libdir pkgdatadir sysconfdir

##----------------------------------------------------------------------------
##  atlocal_trace_variable(NAME)
##				Trace assignment to NAME if it's set or just
##				'unset NAME' otherwise
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- CR		(R) A carriage return.	(ASCII <CR>)
##	- BS		(R) A backslash.	(\\)
##----------------------------------------------------------------------------
atlocal_trace_variable() {
    expr "${1+_$1}" : "_$dl_re_id" >/dev/null || return 2
    local sx='
	:N'"$NL"'$!{;N;bN'"$NL"'}
	s/'"$BS$NL"'/<NL>/g;s/'"$CR"'/<CR>/g;s/	/<HT>/g;s/ /<SP>/g
    '; eval 'case ${'"$1"'+=} in
	=)  sed "$sx" <<EOF
'"$1"'=`quote_sh "$'"$1"'"`
EOF
	    ;;
	*)	echo unset '"$1"'
	    ;;
    esac'
}

##----------------------------------------------------------------------------
##  atlocal_trace_invocation(FUNC [ARG ...])
##				Invoke FUNC, capture returned status and trace
##				invocation with status
##
##  NOTE:   (1)	Temporarily disables sh(1) option errexit to avoid triggering
##		EXIT trap if FUNC's invocation fails!
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- CR		(R) A carriage return.	(ASCII <CR>)
##	- BS		(R) A backslash.	(\\)
##----------------------------------------------------------------------------
atlocal_trace_invocation() {
    expr "${1+_$1}" : "_$dl_re_id" >/dev/null || return 2
					## Indicate abuse if necesssary.
    local func="$1" flags ifs args returned; shift; case $- in
	*e*)	flags=${flags-}e;;
    esac; ifs=$IFS; IFS=,; args=$*; IFS=$ifs
    ${flags+set +$flags}
    $func ${1+"$@"}; returned=$?
    ${flags+set -$flags}
    sed '
	:N'"$NL"'$!{;N;bN'"$NL"'}
	s/'"$BS$NL"'/<NL>/g;s/'"$CR"'/<CR>/g;s/	/<HT>/g;s/ /<SP>/g
    ' <<EOF
$func([$#]$args)=$returned
EOF
    return $returned
}

##----------------------------------------------------------------------------
##  atlocal_trace_invocation_returns(STATUS FUNC [ARG ...])
##				Invoke FUNC, capture returned status, trace
##				invocation with status, and check if FUNC's
##				invocation returned STATUS
##----------------------------------------------------------------------------
atlocal_trace_invocation_returns() {
    expr "${2+_$2}" : "_$dl_re_id" >/dev/null || return 2
					## Indicate abuse if necesssary.
    local expected="$1" returned; shift
    atlocal_trace_invocation "$@" && returned=$? || returned=$?
    test $returned -eq "$expected" 2>/dev/null || return 1
}

##----------------------------------------------------------------------------
##  atlocal_trace_invocation_raw_output(FUNC [ARG ...])
##				Invoke FUNC, capture output as well as return-
##				ed status and trace invocation with status and
##				raw output
##
##  NOTE:   (1)	Temporarily disables sh(1) option errexit to avoid triggering
##		EXIT trap if FUNC's invocation fails!
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- CR		(R) A carriage return.	(ASCII <CR>)
##	- BS		(R) A backslash.	(\\)
##----------------------------------------------------------------------------
atlocal_trace_invocation_raw_output() {
    expr "${1+_$1}" : "_$dl_re_id" >/dev/null || return 2
					## Indicate abuse if necesssary.
    local func="$1" flags ifs args output returned; shift; case $- in
	*e*)	flags=${flags-}e;;
    esac; ifs=$IFS; IFS=,; args=$*; IFS=$ifs
    ${flags+set +$flags}
    output=`$func ${1+"$@"}`; returned=$?
    ${flags+set -$flags}
    sed '
	:I'"$NL"'/)='"$returned"'$/!{;N;bI'"$NL"'}
	s/'"$BS$NL"'/<NL>/g;s/'"$CR"'/<CR>/g;s/	/<HT>/g;s/ /<SP>/g
	:N'"$NL"'$!{;N;bN'"$NL"'}
    ' <<EOF
$func([$#]$args)=$returned${output:+$NL$output}
EOF
    return $returned
}

##----------------------------------------------------------------------------
##  atlocal_trace_invocation_set_output(&NAME FUNC [ARG ...])
##				Invoke FUNC, capture output as well as return-
##				ed status, trace invocation with status and
##				rewritten output, and assign output to NAME
##
##  NOTE:   (1)	Temporarily disables sh(1) option errexit to avoid triggering
##		EXIT trap if FUNC's invocation fails!
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- CR		(R) A carriage return.	(ASCII <CR>)
##	- BS		(R) A backslash.	(\\)
##----------------------------------------------------------------------------
atlocal_trace_invocation_set_output() {
    case ${1+1$1_}${2+2$2_} in		## Usage OK?
	1name_*|1func_*|1flags_*|1ifs_*|1args_*|1output_*|1returned_*)
	    return 3			## No, indicate internal error!
	    ;;
	1?*_2?*_)			## Generally yes, but...
	    expr "_$1/$2" : "_$dl_re_id/$dl_re_id" >/dev/null || return 2
					## ...indicate abuse if necesssary.
	    local name="$1" func="$2" flags ifs args output returned; shift 2
	    ;;
	*)  return 2			## Anything else is abuse!
	    ;;
    esac; case $- in
	*e*)	flags=${flags-}e;;
    esac; ifs=$IFS; IFS=,; args=$*; IFS=$ifs
    ${flags+set +$flags}
    output=`$func ${1+"$@"}`; returned=$?; eval "$name"'=$output'
    ${flags+set -$flags}
    sed '
	:N'"$NL"'$!{;N;bN'"$NL"'}
	s/'"$BS$NL"'/<NL>/g;s/'"$CR"'/<CR>/g;s/	/<HT>/g;s/ /<SP>/g
    ' <<EOF
$func([$#]$args)=$returned=>$output
EOF
    return $returned
}

##----------------------------------------------------------------------------
##  atlocal_get_special_cs()	Emit joint set of quote operator's special
##				characters
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- BS		(R) A backslash.	(\\)
##	- DS		(R) A dollar sign.	(\$)
##	- quote_cs_sh	(R) Special sh(1) character set sans '~'.
##	- quote_cs_bre	(R) Special BRE character set sans '^' and '$'.
##	- quote_cs_ere	(R) Special ERE character set with '^' and '$'.
##	- quote_cs_brs	(R) Special 's///' right-hand side character set
##----------------------------------------------------------------------------
atlocal_get_special_cs() {
    sed '
	:N'"$NL"'$!{;N;bN'"$NL"'}
	s/^/%/;:0'"$NL"'s/%\(.\)/\1'"$BS$NL"'%/;t0
	s/%$//
    ' <<EOF | LC_COLLATE=C sort -u | sed '
	:N'"$NL"'$!{;N;s/'"$BS$NL"'//2;tN'"$NL"'bN'"$NL"'}
    '
$quote_cs_sh~$quote_cs_bre^$DS$quote_cs_ere$quote_cs_brs
EOF
}

##----------------------------------------------------------------------------
##  atlocal_set_special_cs(CS)	Split character set CS into quoted word list
##				usable with 'eval set shiftee ...; shift'
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- BS		(R) A backslash.	(\\)
##	- SQ		(R) A single quote.
##	- quote_cs_sh	(R) Special sh(1) character set sans '~'.
##----------------------------------------------------------------------------
atlocal_set_special_cs() {
    sed '
	:N'"$NL"'$!{;N;bN'"$NL"'}
	s/^'"$BS$NL"'/'"$SQ"'&'"$SQ"' %/;t0
	:0'"$NL"'s/%\(['"$quote_cs_sh"'~]\)/'"$BS$BS"'\1 %/;t0
	s/%\(.\)/\1 %/;t0
	s/ %//
    ' <<EOF
$1
EOF
}

##----------------------------------------------------------------------------
##  atlocal_function_deprecated(LIB API FUNC [ARG ...])
##				Check if LIBrary release deprecated FUNC
##----------------------------------------------------------------------------
atlocal_function_deprecated() {
    case ${3+=$3/`dl_meta get loaded`} in
					## Usage OK?/LIB is prefix of FUNC?/
					## LIB is demand-loaded?
	=${1-}/*:${1-}:*|=${1-}_*/*:${1-}:*)
					## Y/Y/Y: Declare local variables.
	    local meta="${1}_meta" version
	    version=`$meta get version` || return 1
	    ;;
	*)  return 2			## N/?/?: Indicate abuse!
	    ;;
    esac; (				## Within subshell environment do...
	dl_inform() {
	    local status=0 about drel wrel crel wapi capi func ifs args invo lib

	    case ${5+5}${4+4}${1+=$1} in
		54=rel-dpr-func)
		    return 126  ;;	## Suppress FUNC's execution!
		*)  return 3	;;
	    esac
	}
	dl_warn() {
	    case ${6+6}${5+5}${4+4}${3+3}${1+=$1} in
		543=rel-dpr-func)
		    return 126  ;;	## Suppress FUNC's execution!
		*)  return 3    ;;
	    esac
	}
	atlocal_trace_invocation $meta set api "$2" && {
					## Library's API version selected?
	    $meta get apis list | grep -e "^$2;$3;" >/dev/null 2>&1 || exit 1
					## Yes, fail test unless function is
					## listed for library's API version.
	    shift 2 && atlocal_trace_invocation_returns 126 "$@" || exit 1
	}				## Also fail test if function doesn't
    )					## return deprecated status.
}

##----------------------------------------------------------------------------
##  atlocal_function_withdrawn(LIB API FUNC [ARG ...])
##				Check if LIBrary withdrew FUNC in API version
##----------------------------------------------------------------------------
atlocal_function_withdrawn() {
    case ${3+=$3/`dl_meta get loaded`} in
					## Usage OK?/LIB is prefix of FUNC?/
					## LIB is demand-loaded?
	=${1-}/*:${1-}:*|=${1-}_*/*:${1-}:*)
	    local meta="${1}_meta"	## Y/Y/Y: Declare local variable.
	    ;;
	*)  return 2			## N/?/?: Indicate abuse!
	    ;;
    esac; (				## Within subshell environment do...
	dl_inform() {
	    local status=0 about drel wrel crel wapi capi func ifs args invo lib

	    case ${5+5}${4+4}${1+=$1} in
		*4=api-wdr-func)
		    return 127  ;;	## Suppress FUNC's execution!
		*)  return 3	;;
	    esac
	}
	dl_warn() {
	    case ${6+6}${5+5}${4+4}${3+3}${1+=$1} in
		43=api-wdr-func)
		    return 127  ;;	## Suppress FUNC's execution!
		*)  return 3    ;;
	    esac
	}
	atlocal_trace_invocation $meta set api "$2" && {
					## Library's API version selected?
	    $meta get apis list | grep -e "^$2;$3;" >/dev/null 2>&1 && exit 1
					## Yes, fail test if function is still
					## listed for library's API version.
	    shift 2 && atlocal_trace_invocation_returns 127 "$@" || exit 1
	}				## Also fail test if function doesn't
    )					## returns withdrawn status.
}

##----------------------------------------------------------------------------
##  atlocal_check_meta_inquiries(LIB [WHAT ...])
##				Check if LIBrary provides the required set of
##				meta inquiries
##----------------------------------------------------------------------------
atlocal_check_meta_inquiries() {
    case ${1+=`dl_meta get loaded`} in
					## Usage OK?/LIB is demand-loaded?
	=*:${1-}:*)			## Y/Y: Declare local variables.
	    local status=0 meta="$1"_meta what; shift
	    ;;
	*)  return 2			## N/?: Indicate abuse!
	    ;;
    esac; for what in							\
	package version api apis					\
	'apis api' 'apis full' 'apis list' 'apis r/o' ${1+"$@"}
    do
	atlocal_trace_invocation_raw_output $meta get $what || case $?/$what in
	    1/api)	;;		## Trace invocation with result and
	    *)  status=1;;		## fail test unless inquiry succeeeded.
	esac
    done; return $status		## Indicate success or failure.
}

##----------------------------------------------------------------------------
##  atlocal_check_meta_get_apis_honours_4th(LIB FUNC)
##				Check if 'LIB_meta get apis' honours (i.e.,
##				applies) the extra sed(1) expression passed as
##				4th argument to formats "full", "list", and
##				"r/o", where FUNC is used to construct the
##				sed(1) expr. of formats "full" and "list"
##
##  Non-local variables:
##	- DS		(R) A dollar sign.	(\$)
##----------------------------------------------------------------------------
atlocal_check_meta_get_apis_honours_4th() {
    case ${3+3}${2+=$2/`dl_meta get loaded`} in
					## Usage OK?/LIB is prefix of FUNC?/
					## LIB is demand-loaded?
	=${1-}/*:${1-}:*|=${1-}_*/*:${1-}:*)
	    local status=0 get="$1"'_meta get' format sx
	    ;;				## Y/Y/Y: Declare local variables.
	*)  return 2			## N/?/?: Indicate abuse!
	    ;;
    esac; for format in full list r/o; do
					## Foreach format do...
	case $format in			## Construct its sed(1) expression.
	    full)	sx="/;$2(/!d;s/;.*$DS//"	;;
	    list)	sx="/;$2;/!d;s/;.*$DS//"	;;
	    r/o)	sx="/^$1_/!d;s///"		;;
	esac
	atlocal_trace_invocation_raw_output $get apis $format "$sx" || status=1
					## Trace invocation and result.
    done; return $status		## Indicate success or failure.
}

##----------------------------------------------------------------------------
##  atlocal_check_constants(LIB)
##				Check if the constants reported by LIBrary's
##				'get apis r/o' meta inquiry (for the default
##				API version) are actually defined
##----------------------------------------------------------------------------
atlocal_check_constants() {
    case ${2+2}${1+=`dl_meta get loaded`} in
					## Usage OK?/LIB is demand-loaded?
	=*:${1-}:*)			## Y/Y: Declare local variables.
	    local status=0 meta="$1"_meta api name
	    ;;
	*)  return 2			## N/?: Indicate abuse!
	    ;;
    esac; for name in `$meta get apis r/o`; do
					## Foreach constant do...
	eval 'case ${'"$name"'+=} in	## Does it have a value?
	    =)  (eval "$name=" 2>/dev/null) && status=1 || echo "$name"
					## Yes, but fail test if we could set
		;;			## it in a subshell environment! 8-O
	    *)  status=1		## No, fail test as it is unset! :-(
		;;
	esac'
    done; return $status		## Indicate success or failure.
}

##----------------------------------------------------------------------------
##  atlocal_check_function_usage_errors(LIB)
##				Check if the functions reported by LIBrary's
##				'get apis list' meta inquiry (for all API ver-
##				sions) indicate usage errors (i.e., return 2)
##				when invoked with insufficient arguments
##
##  Non-local variables:
##	- NL		(R) A newline.		(ASCII <LF>)
##	- dl_re_id	(R) Unanchored BREs received sh(1) identifiers,
##	- dl_re_0n	(R) non-negative unmbers, and
##	- dl_re_1n	(R) positive numbers.
##----------------------------------------------------------------------------
atlocal_check_function_usage_errors() {
    case ${2+2}${1+=`dl_meta get loaded`} in
					## Usage OK?/LIB is demand-loaded?
	=*:${1-}:*)			## Y/Y: Declare local variables.
	    local status=0 meta="$1"_meta sx api func min args n
	    ;;
	*)  return 2			## N/?: Indicate abuse!
	    ;;
    esac; sx='
	s/^\('"$dl_re_id"'\);\('"$dl_re_0n"'\)-'"$dl_re_1n"'$/func=\1 min=\2/;tp
	s/^\('"$dl_re_id"'\);\('"$dl_re_0n"'\)-$/func=\1 min=\2/;tp
	s/^\('"$dl_re_id"'\);\('"$dl_re_0n"'\)$/func=\1 min=\2/;tp
	s/^.*$/test/;:p
    '
    for api in `$meta get apis`; do (	## Foreach API version do...
	trap '' 0			## Ignore EXIT traps within subshell.
	atlocal_trace_invocation $meta set api $api && {
					## Library's API version selected?
	    ifs=$IFS; IFS=$NL; set shiftee `
		$meta get apis list "s/^$api;//;t0${NL}d;:0$sx"
	    `; shift; IFS=$ifs; for signature in ${1+"$@"}; do
					## Foreach parsed signature do...
		eval "$signature" && case $func in
		    dl_exit)
			;;
		    *)			## No, make passes at function.
			args= n=0; while test "$n" -lt "$min"; do
			    atlocal_trace_invocation_returns 2 $func $args || {
				status=1; break
			    }; n=`expr $n + 1`; args="$args $n"
			done
			;;
		esac
	    done
	}; exit $status
    ) || status=1; done; exit $status	## Indicate success or failure.
}
